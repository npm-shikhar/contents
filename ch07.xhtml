<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd"
  xmlns:epub="http://www.idpf.org/2007/ops">

<head>
  <link href="Style00.css" rel="stylesheet" type="text/css" />
  <link href="Style01.css" rel="stylesheet" type="text/css" />
  <link href="Style02.css" rel="stylesheet" type="text/css" />
  <link href="Style03.css" rel="stylesheet" type="text/css" />
  <style type="text/css" title="ibis-book">
    @charset "utf-8";

    #sbo-rt-content html,
    #sbo-rt-content div,
    #sbo-rt-content div,
    #sbo-rt-content span,
    #sbo-rt-content applet,
    #sbo-rt-content object,
    #sbo-rt-content iframe,
    #sbo-rt-content h1,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5,
    #sbo-rt-content h6,
    #sbo-rt-content p,
    #sbo-rt-content blockquote,
    #sbo-rt-content pre,
    #sbo-rt-content a,
    #sbo-rt-content abbr,
    #sbo-rt-content acronym,
    #sbo-rt-content address,
    #sbo-rt-content big,
    #sbo-rt-content cite,
    #sbo-rt-content code,
    #sbo-rt-content del,
    #sbo-rt-content dfn,
    #sbo-rt-content em,
    #sbo-rt-content img,
    #sbo-rt-content ins,
    #sbo-rt-content kbd,
    #sbo-rt-content q,
    #sbo-rt-content s,
    #sbo-rt-content samp,
    #sbo-rt-content small,
    #sbo-rt-content strike,
    #sbo-rt-content strong,
    #sbo-rt-content sub,
    #sbo-rt-content sup,
    #sbo-rt-content tt,
    #sbo-rt-content var,
    #sbo-rt-content b,
    #sbo-rt-content u,
    #sbo-rt-content i,
    #sbo-rt-content center,
    #sbo-rt-content dl,
    #sbo-rt-content dt,
    #sbo-rt-content dd,
    #sbo-rt-content ol,
    #sbo-rt-content ul,
    #sbo-rt-content li,
    #sbo-rt-content fieldset,
    #sbo-rt-content form,
    #sbo-rt-content label,
    #sbo-rt-content legend,
    #sbo-rt-content table,
    #sbo-rt-content caption,
    #sbo-rt-content tdiv,
    #sbo-rt-content tfoot,
    #sbo-rt-content thead,
    #sbo-rt-content tr,
    #sbo-rt-content th,
    #sbo-rt-content td,
    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content canvas,
    #sbo-rt-content details,
    #sbo-rt-content embed,
    #sbo-rt-content figure,
    #sbo-rt-content figcaption,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content output,
    #sbo-rt-content ruby,
    #sbo-rt-content section,
    #sbo-rt-content summary,
    #sbo-rt-content time,
    #sbo-rt-content mark,
    #sbo-rt-content audio,
    #sbo-rt-content video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline
    }

    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content details,
    #sbo-rt-content figcaption,
    #sbo-rt-content figure,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content section {
      display: block
    }

    #sbo-rt-content div {
      line-height: 1
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style: none
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content q {
      quotes: none
    }

    #sbo-rt-content blockquote:before,
    #sbo-rt-content blockquote:after,
    #sbo-rt-content q:before,
    #sbo-rt-content q:after {
      content: none
    }

    #sbo-rt-content table {
      border-collapse: collapse;
      border-spacing: 0
    }

    @page {
      margin: 5px !important
    }

    #sbo-rt-content p {
      margin: 10px 0 0;
      line-height: 125%;
      text-align: left
    }

    #sbo-rt-content p.byline {
      text-align: left;
      margin: -33px auto 35px;
      font-style: italic;
      font-weight: bold
    }

    #sbo-rt-content div.preface p+p.byline {
      margin: 1em 0 0 !important
    }

    #sbo-rt-content div.preface p.byline+p.byline {
      margin: 0 !important
    }

    #sbo-rt-content div.sect1&gt;

    p.byline {
      margin: -.25em 0 1em
    }

    #sbo-rt-content div.sect1&gt;

    p.byline+p.byline {
      margin-top: -1em
    }

    #sbo-rt-content em {
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content em strong,
    #sbo-rt-content strong em {
      font-weight: bold;
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content strong,
    #sbo-rt-content span.bold {
      font-weight: bold
    }

    #sbo-rt-content em.replaceable {
      font-style: italic
    }

    #sbo-rt-content strong.userinput {
      font-weight: bold;
      font-style: normal
    }

    #sbo-rt-content span.bolditalic {
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content a.ulink,
    #sbo-rt-content a.xref,
    #sbo-rt-content a.email,
    #sbo-rt-content a.link,
    #sbo-rt-content a {
      text-decoration: none;
      color: #8e0012
    }

    #sbo-rt-content span.lineannotation {
      font-style: italic;
      color: #a62a2a;
      font-family: serif
    }

    #sbo-rt-content span.underline {
      text-decoration: underline
    }

    #sbo-rt-content span.strikethrough {
      text-decoration: line-through
    }

    #sbo-rt-content span.smallcaps {
      font-variant: small-caps
    }

    #sbo-rt-content span.cursor {
      background: #000;
      color: #fff
    }

    #sbo-rt-content span.smaller {
      font-size: 75%
    }

    #sbo-rt-content .boxedtext,
    #sbo-rt-content .keycap {
      border-style: solid;
      border-width: 1px;
      border-color: #000;
      padding: 1px
    }

    #sbo-rt-content span.gray50 {
      color: #7F7F7F;
    }

    #sbo-rt-content h1,
    #sbo-rt-content div.toc-title,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5 {
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      font-weight: bold;
      text-align: left;
      page-break-after: avoid !important;
      font-family: sans-serif, "DejaVuSans"
    }

    #sbo-rt-content div.toc-title {
      font-size: 1.5em;
      margin-top: 20px !important;
      margin-bottom: 30px !important
    }

    #sbo-rt-content section[data-type="sect1"] h1 {
      font-size: 1.3em;
      color: #8e0012;
      margin: 40px 0 8px 0
    }

    #sbo-rt-content section[data-type="sect2"] h2 {
      font-size: 1.1em;
      margin: 30px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect3"] h3 {
      font-size: 1em;
      color: #555;
      margin: 20px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect4"] h4 {
      font-size: 1em;
      font-weight: normal;
      font-style: italic;
      margin: 15px 0 6px 0 !important
    }

    #sbo-rt-content section[data-type="chapter"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="preface"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="appendix"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="glossary"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="bibliography"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="index"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      line-height: 1;
      margin-bottom: 50px;
      color: #000;
      padding-bottom: 10px;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content span.label,
    #sbo-rt-content span.keep-together {
      font-size: inherit;
      font-weight: inherit
    }

    #sbo-rt-content div[data-type="part"] h1 {
      font-size: 2em;
      text-align: center;
      margin-top: 0 !important;
      margin-bottom: 50px;
      padding: 50px 0 10px 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content img.width-ninety {
      width: 90%
    }

    #sbo-rt-content img {
      max-width: 95%;
      margin: 0 auto;
      padding: 0
    }

    #sbo-rt-content div.figure {
      background-color: transparent;
      text-align: center !important;
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content figure {
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.figure h6,
    #sbo-rt-content figure h6,
    #sbo-rt-content figure figcaption {
      font-size: .9rem !important;
      text-align: center;
      font-weight: normal !important;
      font-style: italic;
      font-family: serif !important;
      text-transform: none !important;
      letter-spacing: normal !important;
      color: #000 !important;
      padding-top: 10px !important;
      page-break-before: avoid
    }

    #sbo-rt-content div.informalfigure {
      text-align: center !important;
      padding: 5px 0 !important
    }

    #sbo-rt-content div.sidebar {
      margin: 15px 0 10px 0 !important;
      border: 1px solid #DCDCDC;
      background-color: #F7F7F7;
      padding: 15px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content aside[data-type="sidebar"] {
      margin: 15px 0 10px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar-title,
    #sbo-rt-content aside[data-type="sidebar"] h5 {
      font-weight: bold;
      font-size: 1em;
      font-family: sans-serif;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar ol,
    #sbo-rt-content div.sidebar ul,
    #sbo-rt-content aside[data-type="sidebar"] ol,
    #sbo-rt-content aside[data-type="sidebar"] ul {
      margin-left: 1.25em !important
    }

    #sbo-rt-content div.sidebar div.figure p.title,
    #sbo-rt-content aside[data-type="sidebar"] figcaption,
    #sbo-rt-content div.sidebar div.informalfigure div.caption {
      font-size: 90%;
      text-align: center;
      font-weight: normal;
      font-style: italic;
      font-family: serif !important;
      color: #000;
      padding: 5px !important;
      page-break-before: avoid;
      page-break-after: avoid
    }

    #sbo-rt-content div.sidebar div.tip,
    #sbo-rt-content div.sidebar div[data-type="tip"],
    #sbo-rt-content div.sidebar div.note,
    #sbo-rt-content div.sidebar div[data-type="note"],
    #sbo-rt-content div.sidebar div.warning,
    #sbo-rt-content div.sidebar div[data-type="warning"],
    #sbo-rt-content div.sidebar div[data-type="caution"],
    #sbo-rt-content div.sidebar div[data-type="important"] {
      margin: 20px auto 20px auto !important;
      font-size: 90%;
      width: 85%
    }

    #sbo-rt-content aside[data-type="sidebar"] p.byline {
      font-size: 90%;
      font-weight: bold;
      font-style: italic;
      text-align: center;
      text-indent: 0;
      margin: 5px auto 6px;
      page-break-after: avoid
    }

    #sbo-rt-content pre {
      white-space: pre-wrap;
      font-family: "Ubuntu Mono", monospace;
      margin: 25px 0 25px 20px;
      font-size: 85%;
      display: block;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content div.note pre.programlisting,
    #sbo-rt-content div.tip pre.programlisting,
    #sbo-rt-content div.warning pre.programlisting,
    #sbo-rt-content div.caution pre.programlisting,
    #sbo-rt-content div.important pre.programlisting {
      margin-bottom: 0
    }

    #sbo-rt-content code {
      font-family: "Ubuntu Mono", monospace;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content code strong em,
    #sbo-rt-content code em strong,
    #sbo-rt-content pre em strong,
    #sbo-rt-content pre strong em,
    #sbo-rt-content strong code em code,
    #sbo-rt-content em code strong code,
    #sbo-rt-content span.bolditalic code {
      font-weight: bold;
      font-style: italic;
      font-family: "Ubuntu Mono BoldItal", monospace
    }

    #sbo-rt-content code em,
    #sbo-rt-content em code,
    #sbo-rt-content pre em,
    #sbo-rt-content em.replaceable {
      font-family: "Ubuntu Mono Ital", monospace;
      font-style: italic
    }

    #sbo-rt-content code strong,
    #sbo-rt-content strong code,
    #sbo-rt-content pre strong,
    #sbo-rt-content strong.userinput {
      font-family: "Ubuntu Mono Bold", monospace;
      font-weight: bold
    }

    #sbo-rt-content div[data-type="example"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div[data-type="example"] h1,
    #sbo-rt-content div[data-type="example"] h2,
    #sbo-rt-content div[data-type="example"] h3,
    #sbo-rt-content div[data-type="example"] h4,
    #sbo-rt-content div[data-type="example"] h5,
    #sbo-rt-content div[data-type="example"] h6 {
      font-style: italic;
      font-weight: normal;
      text-align: left !important;
      text-transform: none !important;
      font-family: serif !important;
      margin: 10px 0 5px 0 !important;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content li pre.example {
      padding: 10px 0 !important
    }

    #sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],
    #sbo-rt-content div[data-type="example"] pre[data-type="screen"] {
      margin: 0
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      margin: 50px 0 10px 0 !important;
      line-height: 1;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] h2,
    #sbo-rt-content section[data-type="titlepage"] p.subtitle,
    #sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"] {
      font-size: 1.3em;
      font-weight: normal;
      text-align: center;
      margin-top: .5em;
      color: #555
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h2[data-type="author"],
    #sbo-rt-content section[data-type="titlepage"] p.author {
      font-size: 1.3em;
      font-family: serif !important;
      font-weight: bold;
      margin: 50px 0 !important;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] p.edition {
      text-align: center;
      text-transform: uppercase;
      margin-top: 2em
    }

    #sbo-rt-content section[data-type="titlepage"] {
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"]:after {
      content: url(css_assets/titlepage_footer_ebook.png);
      margin: 0 auto;
      max-width: 80%
    }

    #sbo-rt-content div.book div.titlepage div.publishername {
      margin-top: 60%;
      margin-bottom: 20px;
      text-align: center;
      font-size: 1.25em
    }

    #sbo-rt-content div.book div.titlepage div.locations p {
      margin: 0;
      text-align: center
    }

    #sbo-rt-content div.book div.titlepage div.locations p.cities {
      font-size: 80%;
      text-align: center;
      margin-top: 5px
    }

    #sbo-rt-content section.preface[title="Dedication"]&gt;

    div.titlepage h2.title {
      text-align: center;
      text-transform: uppercase;
      font-size: 1.5em;
      margin-top: 50px;
      margin-bottom: 50px
    }

    #sbo-rt-content ul.stafflist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.stafflist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content ul.printings li {
      list-style-type: none
    }

    #sbo-rt-content section.preface[title="Dedication"] p {
      font-style: italic;
      text-align: center
    }

    #sbo-rt-content div.colophon h1.title {
      font-size: 1.3em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon h2.subtitle {
      margin: 0 !important;
      color: #000;
      font-family: serif !important;
      font-size: 1em;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.author h3.author {
      font-size: 1.1em;
      font-family: serif !important;
      margin: 10px 0 0 !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h4,
    #sbo-rt-content div.colophon div.editor h3.editor {
      color: #000;
      font-size: .8em;
      margin: 15px 0 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h3.editor {
      font-size: .8em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.publisher {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon div.publisher p,
    #sbo-rt-content div.colophon div.publisher span.publishername {
      margin: 0;
      font-size: .8em
    }

    #sbo-rt-content div.legalnotice p,
    #sbo-rt-content div.timestamp p {
      font-size: .8em
    }

    #sbo-rt-content div.timestamp p {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon[title="About the Author"] h1.title,
    #sbo-rt-content div.colophon[title="Colophon"] h1.title {
      font-size: 1.5em;
      margin: 0 !important;
      font-family: sans-serif !important
    }

    #sbo-rt-content section.chapter div.titlepage div.author {
      margin: 10px 0 10px 0
    }

    #sbo-rt-content section.chapter div.titlepage div.author div.affiliation {
      font-style: italic
    }

    #sbo-rt-content div.attribution {
      margin: 5px 0 0 50px !important
    }

    #sbo-rt-content h3.author span.orgname {
      display: none
    }

    #sbo-rt-content div.epigraph {
      margin: 10px 0 10px 20px !important;
      page-break-inside: avoid;
      font-size: 90%
    }

    #sbo-rt-content div.epigraph p {
      font-style: italic
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content div.blockquote {
      margin: 10px !important;
      page-break-inside: avoid;
      font-size: 95%
    }

    #sbo-rt-content blockquote p,
    #sbo-rt-content div.blockquote p {
      font-style: italic;
      margin: .75em 0 0 !important
    }

    #sbo-rt-content blockquote div.attribution,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      margin: 5px 0 10px 30px !important;
      text-align: right;
      width: 80%
    }

    #sbo-rt-content blockquote div.attribution p,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      font-style: normal;
      margin-top: 5px
    }

    #sbo-rt-content blockquote div.attribution p:before,
    #sbo-rt-content blockquote p[data-type="attribution"]:before {
      font-style: normal;
      content: "—";
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none
    }

    #sbo-rt-content p.right {
      text-align: right;
      margin: 0
    }

    #sbo-rt-content div[data-type="footnotes"] {
      border-top: 1px solid black;
      margin-top: 2em
    }

    #sbo-rt-content sub,
    #sbo-rt-content sup {
      font-size: 75%;
      line-height: 0;
      position: relative
    }

    #sbo-rt-content sup {
      top: -.5em
    }

    #sbo-rt-content sub {
      bottom: -.25em
    }

    #sbo-rt-content p[data-type="footnote"] {
      font-size: 90% !important;
      line-height: 1.2em !important;
      margin-left: 2.5em !important;
      text-indent: -2.3em !important
    }

    #sbo-rt-content p[data-type="footnote"] sup {
      display: inline-block !important;
      position: static !important;
      width: 2em !important;
      text-align: right !important;
      font-size: 100% !important;
      padding-right: .5em !important
    }

    #sbo-rt-content p[data-type="footnote"] a[href$="-marker"] {
      font-family: sans-serif !important;
      font-size: 90% !important;
      color: #8e0012 !important
    }

    #sbo-rt-content a[data-type="noteref"] {
      font-family: sans-serif !important;
      color: #8e0012;
      margin-left: 0;
      padding-left: 0
    }

    #sbo-rt-content div.refentry p.refname {
      font-size: 1em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold;
      margin-bottom: 5px;
      overflow: auto;
      width: 100%
    }

    #sbo-rt-content div.refentry {
      width: 100%;
      display: block;
      margin-top: 2em
    }

    #sbo-rt-content div.refsynopsisdiv {
      display: block;
      clear: both
    }

    #sbo-rt-content div.refentry header {
      page-break-inside: avoid !important;
      display: block;
      break-inside: avoid !important;
      padding-top: 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content div.refsect1 h6 {
      font-size: .9em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold
    }

    #sbo-rt-content div.refsect1 {
      margin-top: 3em
    }

    #sbo-rt-content dt {
      padding-top: 10px !important;
      padding-bottom: 0 !important
    }

    #sbo-rt-content dd {
      margin-left: 1.5em !important;
      margin-bottom: .25em
    }

    #sbo-rt-content dd ol,
    #sbo-rt-content dd ul {
      padding-left: 1em
    }

    #sbo-rt-content dd li {
      margin-top: 0;
      margin-bottom: 0
    }

    #sbo-rt-content dd,
    #sbo-rt-content li {
      text-align: left
    }

    #sbo-rt-content ul,
    #sbo-rt-content ul&gt;
    li,
    #sbo-rt-content ol ul,
    #sbo-rt-content ol ul&gt;
    li,
    #sbo-rt-content ul ol ul,
    #sbo-rt-content ul ol ul&gt;

    li {
      list-style-type: disc
    }

    #sbo-rt-content ul ul,
    #sbo-rt-content ul ul&gt;

    li {
      list-style-type: square
    }

    #sbo-rt-content ul ul ul,
    #sbo-rt-content ul ul ul&gt;

    li {
      list-style-type: circle
    }

    #sbo-rt-content ol,
    #sbo-rt-content ol&gt;
    li,
    #sbo-rt-content ol ul ol,
    #sbo-rt-content ol ul ol&gt;
    li,
    #sbo-rt-content ul ol,
    #sbo-rt-content ul ol&gt;

    li {
      list-style-type: decimal
    }

    #sbo-rt-content ol ol,
    #sbo-rt-content ol ol&gt;

    li {
      list-style-type: lower-alpha
    }

    #sbo-rt-content ol ol ol,
    #sbo-rt-content ol ol ol&gt;

    li {
      list-style-type: lower-roman
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style-position: outside;
      margin: 15px 0 15px 1.25em;
      padding-left: 2.25em
    }

    #sbo-rt-content ol li,
    #sbo-rt-content ul li {
      margin: .5em 0 .65em;
      line-height: 125%
    }

    #sbo-rt-content div.orderedlistalpha {
      list-style-type: upper-alpha
    }

    #sbo-rt-content table.simplelist,
    #sbo-rt-content ul.simplelist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.simplelist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content table.simplelist td {
      border: none
    }

    #sbo-rt-content table.simplelist tr {
      border-bottom: none
    }

    #sbo-rt-content table.simplelist tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content dl.calloutlist p:first-child {
      margin-top: -25px !important
    }

    #sbo-rt-content dl.calloutlist dd {
      padding-left: 0;
      margin-top: -25px
    }

    #sbo-rt-content dl.calloutlist img,
    #sbo-rt-content a.co img {
      padding: 0
    }

    #sbo-rt-content div.toc ol {
      margin-top: 8px !important;
      margin-bottom: 8px !important;
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol ol {
      margin-left: 30px !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol li {
      list-style-type: none
    }

    #sbo-rt-content div.toc a {
      color: #8e0012
    }

    #sbo-rt-content div.toc ol a {
      font-size: 1em;
      font-weight: bold
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;

    ol a {
      font-weight: bold;
      font-size: 1em
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;
    ol&gt;
    li&gt;

    ol a {
      text-decoration: none;
      font-weight: normal;
      font-size: 1em
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"],
    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      margin: 30px !important;
      font-size: 90%;
      padding: 10px 8px 20px 8px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.tip ol,
    #sbo-rt-content div.tip ul,
    #sbo-rt-content div[data-type="tip"] ol,
    #sbo-rt-content div[data-type="tip"] ul,
    #sbo-rt-content div.note ol,
    #sbo-rt-content div.note ul,
    #sbo-rt-content div[data-type="note"] ol,
    #sbo-rt-content div[data-type="note"] ul,
    #sbo-rt-content div.warning ol,
    #sbo-rt-content div.warning ul,
    #sbo-rt-content div[data-type="warning"] ol,
    #sbo-rt-content div[data-type="warning"] ul,
    #sbo-rt-content div[data-type="caution"] ol,
    #sbo-rt-content div[data-type="caution"] ul,
    #sbo-rt-content div[data-type="important"] ol,
    #sbo-rt-content div[data-type="important"] ul {
      margin-left: 1.5em !important
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"] {
      border: 1px solid #BEBEBE;
      background-color: transparent
    }

    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      border: 1px solid #BC8F8F
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="note"] h1,
    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1,
    #sbo-rt-content div[data-type="important"] h6 {
      font-weight: bold;
      font-size: 110%;
      font-family: sans-serif !important;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px !important
    }

    #sbo-rt-content div[data-type="tip"] figure h6,
    #sbo-rt-content div[data-type="note"] figure h6,
    #sbo-rt-content div[data-type="warning"] figure h6,
    #sbo-rt-content div[data-type="caution"] figure h6,
    #sbo-rt-content div[data-type="important"] figure h6 {
      font-family: serif !important
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div[data-type="note"] h1 {
      color: #737373
    }

    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="important"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1 {
      color: #C67171
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,
    #sbo-rt-content div.safarienabled {
      background-color: transparent;
      margin: 8px 0 0 !important;
      border: 0 solid #BEBEBE;
      font-size: 100%;
      padding: 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,
    #sbo-rt-content div.safarienabled h6 {
      display: none
    }

    #sbo-rt-content div.table,
    #sbo-rt-content table {
      margin: 15px 0 30px 0 !important;
      max-width: 95%;
      border: none !important;
      background: none;
      display: table !important
    }

    #sbo-rt-content div.table,
    #sbo-rt-content div.informaltable,
    #sbo-rt-content table {
      page-break-inside: avoid
    }

    #sbo-rt-content tr,
    #sbo-rt-content tr td {
      border-bottom: 1px solid #c3c3c3
    }

    #sbo-rt-content thead td,
    #sbo-rt-content thead th {
      border-bottom: #9d9d9d 1px solid !important;
      border-top: #9d9d9d 1px solid !important
    }

    #sbo-rt-content tr:nth-of-type(even) {
      background-color: #f1f6fc
    }

    #sbo-rt-content thead {
      font-family: sans-serif;
      font-weight: bold
    }

    #sbo-rt-content td,
    #sbo-rt-content th {
      display: table-cell;
      padding: .3em;
      text-align: left;
      vertical-align: middle;
      font-size: 80%
    }

    #sbo-rt-content div.informaltable table {
      margin: 10px auto !important
    }

    #sbo-rt-content div.informaltable table tr {
      border-bottom: none
    }

    #sbo-rt-content div.informaltable table tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content div.informaltable td,
    #sbo-rt-content div.informaltable th {
      border: #9d9d9d 1px solid
    }

    #sbo-rt-content div.table-title,
    #sbo-rt-content table caption {
      font-weight: normal;
      font-style: italic;
      font-family: serif;
      font-size: 1em;
      margin: 10px 0 10px 0 !important;
      padding: 0;
      page-break-after: avoid;
      text-align: left !important
    }

    #sbo-rt-content table code {
      font-size: smaller
    }

    #sbo-rt-content table.border tbody&gt;
    tr:last-child&gt;

    td {
      border-bottom: transparent
    }

    #sbo-rt-content div.equation,
    #sbo-rt-content div[data-type="equation"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div.equation-title,
    #sbo-rt-content div[data-type="equation"] h5 {
      font-style: italic;
      font-weight: normal;
      font-family: serif !important;
      font-size: 90%;
      margin: 20px 0 10px 0 !important;
      page-break-after: avoid
    }

    #sbo-rt-content div.equation-contents {
      margin-left: 20px
    }

    #sbo-rt-content div[data-type="equation"] math {
      font-size: calc(.35em + 1vw)
    }

    #sbo-rt-content span.inlinemediaobject {
      height: .85em;
      display: inline-block;
      margin-bottom: .2em
    }

    #sbo-rt-content span.inlinemediaobject img {
      margin: 0;
      height: .85em
    }

    #sbo-rt-content div.informalequation {
      margin: 20px 0 20px 20px;
      width: 75%
    }

    #sbo-rt-content div.informalequation img {
      width: 75%
    }

    #sbo-rt-content div.index {
      text-indent: 0
    }

    #sbo-rt-content div.index h3 {
      padding: .25em;
      margin-top: 1em !important;
      background-color: #F0F0F0
    }

    #sbo-rt-content div.index li {
      line-height: 130%;
      list-style-type: none
    }

    #sbo-rt-content div.index a.indexterm {
      color: #8e0012 !important
    }

    #sbo-rt-content div.index ul {
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.index ul ul {
      margin-left: 1em !important;
      margin-top: 0 !important
    }

    #sbo-rt-content code.boolean,
    #sbo-rt-content .navy {
      color: rgb(0, 0, 128);
    }

    #sbo-rt-content code.character,
    #sbo-rt-content .olive {
      color: rgb(128, 128, 0);
    }

    #sbo-rt-content code.comment,
    #sbo-rt-content .blue {
      color: rgb(0, 0, 255);
    }

    #sbo-rt-content code.conditional,
    #sbo-rt-content .limegreen {
      color: rgb(50, 205, 50);
    }

    #sbo-rt-content code.constant,
    #sbo-rt-content .darkorange {
      color: rgb(255, 140, 0);
    }

    #sbo-rt-content code.debug,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.define,
    #sbo-rt-content .darkgoldenrod,
    #sbo-rt-content .gold {
      color: rgb(184, 134, 11);
    }

    #sbo-rt-content code.delimiter,
    #sbo-rt-content .dimgray {
      color: rgb(105, 105, 105);
    }

    #sbo-rt-content code.error,
    #sbo-rt-content .red {
      color: rgb(255, 0, 0);
    }

    #sbo-rt-content code.exception,
    #sbo-rt-content .salmon {
      color: rgb(250, 128, 11);
    }

    #sbo-rt-content code.float,
    #sbo-rt-content .steelblue {
      color: rgb(70, 130, 180);
    }

    #sbo-rt-content pre code.function,
    #sbo-rt-content .green {
      color: rgb(0, 128, 0);
    }

    #sbo-rt-content code.identifier,
    #sbo-rt-content .royalblue {
      color: rgb(65, 105, 225);
    }

    #sbo-rt-content code.ignore,
    #sbo-rt-content .gray {
      color: rgb(128, 128, 128);
    }

    #sbo-rt-content code.include,
    #sbo-rt-content .purple {
      color: rgb(128, 0, 128);
    }

    #sbo-rt-content code.keyword,
    #sbo-rt-content .sienna {
      color: rgb(160, 82, 45);
    }

    #sbo-rt-content code.label,
    #sbo-rt-content .deeppink {
      color: rgb(255, 20, 147);
    }

    #sbo-rt-content code.macro,
    #sbo-rt-content .orangered {
      color: rgb(255, 69, 0);
    }

    #sbo-rt-content code.number,
    #sbo-rt-content .brown {
      color: rgb(165, 42, 42);
    }

    #sbo-rt-content code.operator,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.preCondit,
    #sbo-rt-content .teal {
      color: rgb(0, 128, 128);
    }

    #sbo-rt-content code.preProc,
    #sbo-rt-content .fuschia {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.repeat,
    #sbo-rt-content .indigo {
      color: rgb(75, 0, 130);
    }

    #sbo-rt-content code.special,
    #sbo-rt-content .saddlebrown {
      color: rgb(139, 69, 19);
    }

    #sbo-rt-content code.specialchar,
    #sbo-rt-content .magenta {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.specialcomment,
    #sbo-rt-content .seagreen {
      color: rgb(46, 139, 87);
    }

    #sbo-rt-content code.statement,
    #sbo-rt-content .forestgreen {
      color: rgb(34, 139, 34);
    }

    #sbo-rt-content code.storageclass,
    #sbo-rt-content .plum {
      color: rgb(221, 160, 221);
    }

    #sbo-rt-content code.string,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.structure,
    #sbo-rt-content .chocolate {
      color: rgb(210, 106, 30);
    }

    #sbo-rt-content code.tag,
    #sbo-rt-content .darkcyan {
      color: rgb(0, 139, 139);
    }

    #sbo-rt-content code.todo,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.type,
    #sbo-rt-content .mediumslateblue {
      color: rgb(123, 104, 238);
    }

    #sbo-rt-content code.typedef,
    #sbo-rt-content .darkgreen {
      color: rgb(0, 100, 0);
    }

    #sbo-rt-content code.underlined {
      text-decoration: underline;
    }

    #sbo-rt-content pre code.hll {
      background-color: #ffc
    }

    #sbo-rt-content pre code.c {
      color: #09F;
      font-style: italic
    }

    #sbo-rt-content pre code.err {
      color: #A00
    }

    #sbo-rt-content pre code.k {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.o {
      color: #555
    }

    #sbo-rt-content pre code.cm {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cp {
      color: #099
    }

    #sbo-rt-content pre code.c1 {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cs {
      color: #35586C;
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content pre code.gd {
      background-color: #FCC
    }

    #sbo-rt-content pre code.ge {
      font-style: italic
    }

    #sbo-rt-content pre code.gr {
      color: #F00
    }

    #sbo-rt-content pre code.gh {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gi {
      background-color: #CFC
    }

    #sbo-rt-content pre code.go {
      color: #000
    }

    #sbo-rt-content pre code.gp {
      color: #009;
      font-weight: bold
    }

    #sbo-rt-content pre code.gs {
      font-weight: bold
    }

    #sbo-rt-content pre code.gu {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gt {
      color: #9C6
    }

    #sbo-rt-content pre code.kc {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kd {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kn {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kp {
      color: #069
    }

    #sbo-rt-content pre code.kr {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kt {
      color: #078;
      font-weight: bold
    }

    #sbo-rt-content pre code.m {
      color: #F60
    }

    #sbo-rt-content pre code.s {
      color: #C30
    }

    #sbo-rt-content pre code.na {
      color: #309
    }

    #sbo-rt-content pre code.nb {
      color: #366
    }

    #sbo-rt-content pre code.nc {
      color: #0A8;
      font-weight: bold
    }

    #sbo-rt-content pre code.no {
      color: #360
    }

    #sbo-rt-content pre code.nd {
      color: #99F
    }

    #sbo-rt-content pre code.ni {
      color: #999;
      font-weight: bold
    }

    #sbo-rt-content pre code.ne {
      color: #C00;
      font-weight: bold
    }

    #sbo-rt-content pre code.nf {
      color: #C0F
    }

    #sbo-rt-content pre code.nl {
      color: #99F
    }

    #sbo-rt-content pre code.nn {
      color: #0CF;
      font-weight: bold
    }

    #sbo-rt-content pre code.nt {
      color: #309;
      font-weight: bold
    }

    #sbo-rt-content pre code.nv {
      color: #033
    }

    #sbo-rt-content pre code.ow {
      color: #000;
      font-weight: bold
    }

    #sbo-rt-content pre code.w {
      color: #bbb
    }

    #sbo-rt-content pre code.mf {
      color: #F60
    }

    #sbo-rt-content pre code.mh {
      color: #F60
    }

    #sbo-rt-content pre code.mi {
      color: #F60
    }

    #sbo-rt-content pre code.mo {
      color: #F60
    }

    #sbo-rt-content pre code.sb {
      color: #C30
    }

    #sbo-rt-content pre code.sc {
      color: #C30
    }

    #sbo-rt-content pre code.sd {
      color: #C30;
      font-style: italic
    }

    #sbo-rt-content pre code.s2 {
      color: #C30
    }

    #sbo-rt-content pre code.se {
      color: #C30;
      font-weight: bold
    }

    #sbo-rt-content pre code.sh {
      color: #C30
    }

    #sbo-rt-content pre code.si {
      color: #A00
    }

    #sbo-rt-content pre code.sx {
      color: #C30
    }

    #sbo-rt-content pre code.sr {
      color: #3AA
    }

    #sbo-rt-content pre code.s1 {
      color: #C30
    }

    #sbo-rt-content pre code.ss {
      color: #A60
    }

    #sbo-rt-content pre code.bp {
      color: #366
    }

    #sbo-rt-content pre code.vc {
      color: #033
    }

    #sbo-rt-content pre code.vg {
      color: #033
    }

    #sbo-rt-content pre code.vi {
      color: #033
    }

    #sbo-rt-content pre code.il {
      color: #F60
    }

    #sbo-rt-content pre code.g {
      color: #050
    }

    #sbo-rt-content pre code.l {
      color: #C60
    }

    #sbo-rt-content pre code.l {
      color: #F90
    }

    #sbo-rt-content pre code.n {
      color: #008
    }

    #sbo-rt-content pre code.nx {
      color: #008
    }

    #sbo-rt-content pre code.py {
      color: #96F
    }

    #sbo-rt-content pre code.p {
      color: #000
    }

    #sbo-rt-content pre code.x {
      color: #F06
    }

    #sbo-rt-content div.blockquote_sampler_toc {
      width: 95%;
      margin: 5px 5px 5px 10px !important
    }

    #sbo-rt-content div {
      font-family: serif;
      text-align: left
    }

    #sbo-rt-content .gray-background,
    #sbo-rt-content .reverse-video {
      background: #2E2E2E;
      color: #FFF
    }

    #sbo-rt-content .light-gray-background {
      background: #A0A0A0
    }

    #sbo-rt-content .preserve-whitespace {
      white-space: pre-wrap
    }

    #sbo-rt-content span.gray {
      color: #4C4C4C
    }

    #sbo-rt-content .width-10 {
      width: 10vw !important
    }

    #sbo-rt-content .width-20 {
      width: 20vw !important
    }

    #sbo-rt-content .width-30 {
      width: 30vw !important
    }

    #sbo-rt-content .width-40 {
      width: 40vw !important
    }

    #sbo-rt-content .width-50 {
      width: 50vw !important
    }

    #sbo-rt-content .width-60 {
      width: 60vw !important
    }

    #sbo-rt-content .width-70 {
      width: 70vw !important
    }

    #sbo-rt-content .width-80 {
      width: 80vw !important
    }

    #sbo-rt-content .width-90 {
      width: 90vw !important
    }

    #sbo-rt-content .width-full,
    #sbo-rt-content .width-100 {
      width: 100vw !important
    }

    #sbo-rt-content div[data-type="equation"].fifty-percent img {
      width: 50%
    }
  </style>
  <style type="text/css" id="font-styles">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-size: &lt;
      %=font_size %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="font-family">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-family: &lt;
      %=font_family %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="column-width">
    #sbo-rt-content {
      max-width: &lt;
      %=column_width %&gt;
      % !important;
      margin: 0 auto !important;
    }
  </style>

  <style type="text/css">
    body {
      background-color: #fbfbfb !important;
      margin: 1em;
    }

    #sbo-rt-content * {
      text-indent: 0pt !important;
    }

    #sbo-rt-content .bq {
      margin-right: 1em !important;
    }

    #sbo-rt-content * {
      word-wrap: break-word !important;
      word-break: break-word !important;
    }

    #sbo-rt-content table,
    #sbo-rt-content pre {
      overflow-x: unset !important;
      overflow: unset !important;
      overflow-y: unset !important;
      white-space: pre-wrap !important;
    }
  </style>
</head>

<body>
  <div id="sbo-rt-content">
    <section data-type="chapter" epub:type="chapter"
      data-pdf-bookmark="Chapter 7. Ensemble Learning and Random Forests">
      <div class="chapter" id="ensembles_chapter">
        <h1><span class="label">Chapter 7. </span>Ensemble Learning and Random Forests</h1>


        <p>Suppose <a data-type="indexterm" data-primary="Ensemble Learning" id="el7" />you ask a complex question to
          thousands of random people, then aggregate their answers. In many cases you will find that this aggregated
          answer is better than an expert’s answer. This is called the <em>wisdom of the crowd</em>. Similarly, if you
          aggregate the predictions of a group of predictors (such as classifiers or regressors), you will often get
          better predictions than with the best individual predictor. A group of predictors is called an
          <em>ensemble</em>; thus, this technique is called <em>Ensemble Learning</em>, and an Ensemble Learning
          algorithm is called an <em>Ensemble method</em>.</p>

        <p>For example, you can train a group of <a data-type="indexterm" data-primary="Decision Trees"
            id="idm139656374996224" />Decision Tree classifiers, each on a different random subset of the training set.
          To make predictions, you just obtain the predictions of all individual trees, then predict the class that gets
          the most votes (see the last exercise in <a data-type="xref" href="ch06.xhtml#trees_chapter">Chapter 6</a>).
          Such an ensemble of Decision Trees is called a <em>Random Forest</em>, <a data-type="indexterm"
            data-primary="Random Forests" id="idm139656374993888" />and despite its simplicity, this is one of the most
          powerful Machine Learning algorithms available today.</p>

        <p>Moreover, as we discussed in <a data-type="xref" href="ch02.xhtml#project_chapter">Chapter 2</a>, you will
          often use Ensemble methods near the end of a project, once you have already built a few good predictors, to
          combine them into an even better predictor. In fact, the winning solutions in Machine Learning competitions
          often involve several Ensemble methods (most famously in the <a href="http://netflixprize.com/">Netflix Prize
            competition</a>).</p>

        <p>In this chapter we will discuss the most popular Ensemble methods, including <em>bagging</em>,
          <em>boosting</em>, <em>stacking</em>, and a few others. We will also explore Random Forests.</p>






        <section data-type="sect1" data-pdf-bookmark="Voting Classifiers">
          <div class="sect1" id="idm139656374988768">
            <h1>Voting Classifiers</h1>

            <p>Suppose <a data-type="indexterm" data-primary="classifiers" data-secondary="voting" id="c7v" /><a
                data-type="indexterm" data-primary="voting classifiers" id="vc7" /><a data-type="indexterm"
                data-primary="hard voting classifiers" id="hvc7" />you have trained a few classifiers, each one
              achieving about 80% accuracy. You may have a Logistic Regression classifier, an SVM classifier, a Random
              Forest classifier, a K-Nearest Neighbors classifier, and perhaps a few more (see <a data-type="xref"
                href="#voting_classifier_training_diagram">Figure 7-1</a>).</p>

            <figure>
              <div id="voting_classifier_training_diagram" class="figure">
                <img src="mlst_0701.png" alt="mlst 0701" width="1969" height="845" />
                <h6><span class="label">Figure 7-1. </span>Training diverse classifiers</h6>
              </div>
            </figure>

            <p>A very simple way to create an even better classifier is to aggregate the predictions of each classifier
              and predict the class that gets the most votes. This majority-vote classifier is called a <em>hard
                voting</em> classifier (see <a data-type="xref"
                href="#voting_classifier_prediction_diagram">Figure 7-2</a>).</p>

            <figure>
              <div id="voting_classifier_prediction_diagram" class="figure">
                <img src="mlst_0702.png" alt="mlst 0702" width="1950" height="1038" />
                <h6><span class="label">Figure 7-2. </span>Hard voting classifier predictions</h6>
              </div>
            </figure>

            <p>Somewhat surprisingly, this voting classifier often achieves a higher accuracy than the best classifier
              in the ensemble. In fact, even if each classifier is a <em>weak learner</em> <a data-type="indexterm"
                data-primary="weak learners" id="idm139656374975680" />(meaning it does only slightly better than random
              guessing), the ensemble can still be a <em>strong learner</em> (achieving high accuracy), <a
                data-type="indexterm" data-primary="strong learners" id="idm139656374974272" />provided there are a
              sufficient number of weak learners and they are sufficiently diverse.</p>

            <p>How is this possible? The following analogy can help shed some light on this mystery. Suppose you have a
              slightly biased coin that has a 51% chance of coming up heads, and 49% chance of coming up tails. If you
              toss it 1,000 times, you will generally get more or less 510 heads and 490 tails, and hence a majority of
              heads. If you do the math, you will find that the probability of obtaining a majority of heads after 1,000
              tosses is close to 75%. The more you toss the coin, the higher the probability (e.g., with 10,000 tosses,
              the probability climbs over 97%). This is due to the <em>law of large numbers</em>: <a
                data-type="indexterm" data-primary="law of large numbers" id="idm139656374971936" />as you keep tossing
              the coin, the ratio of heads gets closer and closer to the probability of heads (51%). <a data-type="xref"
                href="#law_of_large_numbers_plot">Figure 7-3</a> shows 10 series of biased coin tosses. You can see that
              as the number of tosses increases, the ratio of heads approaches 51%. Eventually all 10 series end up so
              close to 51% that they are consistently above 50%.</p>

            <figure>
              <div id="law_of_large_numbers_plot" class="figure">
                <img src="mlst_0703.png" alt="mlst 0703" width="2310" height="928" />
                <h6><span class="label">Figure 7-3. </span>The law of large numbers</h6>
              </div>
            </figure>

            <p>Similarly, suppose you build an ensemble containing 1,000 classifiers that are individually correct only
              51% of the time (barely better than random guessing). If you predict the majority voted class, you can
              hope for up to 75% accuracy! However, this is only true if all classifiers are perfectly independent,
              making uncorrelated errors, which is clearly not the case since they are trained on the same data. They
              are likely to make the same types of errors, so there will be many majority votes for the wrong class,
              reducing the ensemble’s accuracy.</p>
            <div data-type="tip">
              <h6>Tip</h6>
              <p>Ensemble methods work best when the predictors are as independent from one another as possible. One way
                to get diverse classifiers is to train them using very different algorithms. This increases the chance
                that they will make very different types of errors, improving the ensemble’s accuracy.</p>
            </div>

            <p>The following code creates and trains a voting classifier in Scikit-Learn, composed of three diverse
              classifiers (the training set is the moons dataset, <a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="sklearn.ensemble.RandomForestClassifier" id="idm139656374964880" /><a
                data-type="indexterm" data-primary="Scikit-Learn" data-secondary="sklearn.ensemble.VotingClassifier"
                id="idm139656374963840" /><a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="sklearn.linear_model.LogisticRegression" id="idm139656374962880" /><a
                data-type="indexterm" data-primary="Scikit-Learn" data-secondary="sklearn.svm.SVC"
                id="idm139656374961920" />introduced in <a data-type="xref"
                href="ch05.xhtml#svm_chapter">Chapter 5</a>):</p>

            <pre data-type="programlisting"
              data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">RandomForestClassifier</code>
<code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">VotingClassifier</code>
<code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LogisticRegression</code>
<code class="kn">from</code> <code class="nn">sklearn.svm</code> <code class="kn">import</code> <code class="n">SVC</code>

<code class="n">log_clf</code> <code class="o">=</code> <code class="n">LogisticRegression</code><code class="p">()</code>
<code class="n">rnd_clf</code> <code class="o">=</code> <code class="n">RandomForestClassifier</code><code class="p">()</code>
<code class="n">svm_clf</code> <code class="o">=</code> <code class="n">SVC</code><code class="p">()</code>

<code class="n">voting_clf</code> <code class="o">=</code> <code class="n">VotingClassifier</code><code class="p">(</code>
    <code class="n">estimators</code><code class="o">=</code><code class="p">[(</code><code class="s1">'lr'</code><code class="p">,</code> <code class="n">log_clf</code><code class="p">),</code> <code class="p">(</code><code class="s1">'rf'</code><code class="p">,</code> <code class="n">rnd_clf</code><code class="p">),</code> <code class="p">(</code><code class="s1">'svc'</code><code class="p">,</code> <code class="n">svm_clf</code><code class="p">)],</code>
    <code class="n">voting</code><code class="o">=</code><code class="s1">'hard'</code><code class="p">)</code>
<code class="n">voting_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code></pre>

            <p>Let’s look at each classifier’s accuracy <a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="sklearn.metrics.accuracy_score()" id="idm139656374957696" />on the test set:</p>

            <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.metrics</code> <code class="kn">import</code> <code class="n">accuracy_score</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">for</code> <code class="n">clf</code> <code class="ow">in</code> <code class="p">(</code><code class="n">log_clf</code><code class="p">,</code> <code class="n">rnd_clf</code><code class="p">,</code> <code class="n">svm_clf</code><code class="p">,</code> <code class="n">voting_clf</code><code class="p">):</code>
<code class="gp">... </code>    <code class="n">clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
<code class="gp">... </code>    <code class="n">y_pred</code> <code class="o">=</code> <code class="n">clf</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="n">clf</code><code class="o">.</code><code class="n">__class__</code><code class="o">.</code><code class="n">__name__</code><code class="p">,</code> <code class="n">accuracy_score</code><code class="p">(</code><code class="n">y_test</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">))</code>
<code class="gp">...</code>
<code class="go">LogisticRegression 0.864</code>
<code class="go">RandomForestClassifier 0.896</code>
<code class="go">SVC 0.888</code>
<code class="go">VotingClassifier 0.904</code></pre>

            <p>There you have it! The voting classifier slightly outperforms all the individual classifiers.</p>

            <p>If all classifiers are able to estimate class probabilities (i.e., they have a
              <code>predict_proba()</code> method), then you can tell Scikit-Learn to predict the class with the highest
              class probability, averaged over all the individual classifiers. This is <a data-type="indexterm"
                data-primary="soft voting" id="idm139656374713216" />called <em>soft voting</em>. It often achieves
              higher performance than hard voting because it gives more weight to highly confident votes. All you need
              to do is replace <code>voting="hard"</code> with <code>voting="soft"</code> and ensure that all
              classifiers can estimate class probabilities. This is not the case of the <code>SVC</code> class by
              default, so you need to set its <code>probability</code> hyperparameter to <code>True</code> (this will
              make the <code>SVC</code> class use cross-validation to estimate class probabilities, slowing down
              training, and it will add a <code>predict_proba()</code> method). If you modify the preceding code to use
              soft voting, you will find that the voting classifier achieves over 91.2% <a data-type="indexterm"
                data-primary="classifiers" data-secondary="voting" data-startref="c7v" id="idm139656374708528" /><a
                data-type="indexterm" data-primary="voting classifiers" data-startref="vc7" id="idm139656374707280" /><a
                data-type="indexterm" data-primary="hard voting classifiers" data-startref="hvc7"
                id="idm139656374706336" />accuracy!</p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Bagging and Pasting">
          <div class="sect1" id="idm139656374871504">
            <h1>Bagging and Pasting</h1>

            <p>One <a data-type="indexterm" data-primary="Ensemble Learning" data-secondary="bagging and pasting"
                id="el7bap" /><a data-type="indexterm" data-primary="bagging and pasting" id="b7" /><a
                data-type="indexterm" data-primary="bootstrap aggregation" data-see="bagging"
                id="idm139656374701744" /><a data-type="indexterm" data-primary="bootstrapping"
                id="idm139656374700800" />way to get a diverse set of classifiers is to use very different training
              algorithms, as just discussed. Another approach is to use the same training algorithm for every predictor,
              but to train them on different random subsets of the training set. When sampling is performed
              <em>with</em> replacement, this method is called <a
                href="https://homl.info/20"><em>bagging</em></a><sup><a data-type="noteref"
                  id="idm139656374698608-marker" href="ch07.xhtml#idm139656374698608">1</a></sup> (short for
              <em>bootstrap aggregating</em><sup><a data-type="noteref" id="idm139656374697664-marker"
                  href="ch07.xhtml#idm139656374697664">2</a></sup>). When sampling is performed <em>without</em>
              replacement, it is called <a href="https://homl.info/21"><em>pasting</em></a>.<sup><a data-type="noteref"
                  id="idm139656374695232-marker" href="ch07.xhtml#idm139656374695232">3</a></sup></p>

            <p>In other words, both bagging and pasting allow training instances to be sampled several times across
              multiple predictors, but only bagging allows training instances to be sampled several times for the same
              predictor. This sampling and training process is represented in <a data-type="xref"
                href="#bagging_training_diagram">Figure 7-4</a>.</p>

            <figure>
              <div id="bagging_training_diagram" class="figure">
                <img src="mlst_0704.png" alt="mlst 0704" width="2165" height="1093" />
                <h6><span class="label">Figure 7-4. </span>Pasting/bagging training set sampling and training</h6>
              </div>
            </figure>

            <p>Once all predictors are trained, the ensemble can make a prediction for a new instance by simply
              aggregating the predictions of all predictors. The aggregation function is typically <a
                data-type="indexterm" data-primary="statistical mode" id="idm139656374852368" />the <em>statistical
                mode</em> (i.e., the most frequent prediction, just like a hard voting classifier) for classification,
              or the average for regression. Each individual predictor has a higher bias than if it were trained on the
              original training set, but aggregation reduces both bias and variance.<sup><a data-type="noteref"
                  id="idm139656374850832-marker" href="ch07.xhtml#idm139656374850832">4</a></sup> Generally, the net
              result is that the ensemble has a similar bias but a lower variance than a single predictor trained on the
              original training set.</p>

            <p>As you can see in <a data-type="xref" href="#bagging_training_diagram">Figure 7-4</a>, predictors can all
              be trained in parallel, via different CPU cores or even different servers. Similarly, predictions can be
              made in parallel. This is one of the reasons why bagging and pasting are such popular methods: they scale
              very well.</p>








            <section data-type="sect2" data-pdf-bookmark="Bagging and Pasting in Scikit-Learn">
              <div class="sect2" id="idm139656374847456">
                <h2>Bagging and Pasting in Scikit-Learn</h2>

                <p>Scikit-Learn <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.BaggingClassifier" id="sklebcch7" /><a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="bagging and pasting in" id="sl7bapi" /><a
                    data-type="indexterm" data-primary="bagging and pasting" data-secondary="in Scikit-Learn"
                    data-secondary-sortas="scikit" id="bap7isl" />offers a simple API for both bagging and pasting with
                  the <code>BaggingClassifier</code> class (or <code>BaggingRegressor</code> for regression). The
                  following code trains an ensemble of <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.tree.DecisionTreeClassifier" id="skltdtccha7" />500 Decision Tree
                  classifiers,<sup><a data-type="noteref" id="idm139656374839376-marker"
                      href="ch07.xhtml#idm139656374839376">5</a></sup> each trained on 100 training instances randomly
                  sampled from the training set with replacement (this is an example of bagging, but if you want to use
                  pasting instead, just set <code>bootstrap=False</code>). The <code>n_jobs</code> parameter tells
                  Scikit-Learn the number of CPU cores to use for training and predictions (<span
                    class="keep-together">–1</span> tells Scikit-Learn to use all available cores):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">BaggingClassifier</code>
<code class="kn">from</code> <code class="nn">sklearn.tree</code> <code class="kn">import</code> <code class="n">DecisionTreeClassifier</code>

<code class="n">bag_clf</code> <code class="o">=</code> <code class="n">BaggingClassifier</code><code class="p">(</code>
    <code class="n">DecisionTreeClassifier</code><code class="p">(),</code> <code class="n">n_estimators</code><code class="o">=</code><code class="mi">500</code><code class="p">,</code>
    <code class="n">max_samples</code><code class="o">=</code><code class="mi">100</code><code class="p">,</code> <code class="n">bootstrap</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">n_jobs</code><code class="o">=-</code><code class="mi">1</code><code class="p">)</code>
<code class="n">bag_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
<code class="n">y_pred</code> <code class="o">=</code> <code class="n">bag_clf</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code></pre>
                <div data-type="note" epub:type="note">
                  <h6>Note</h6>
                  <p>The <code>BaggingClassifier</code> automatically performs soft voting instead of hard voting if the
                    base classifier can estimate class probabilities (i.e., if it has a <code>predict_proba()</code>
                    method), which is the case with Decision Trees classifiers.</p>
                </div>

                <p><a data-type="xref" href="#decision_tree_without_and_with_bagging_plot">Figure 7-5</a> compares the
                  decision boundary of a single Decision Tree with the decision boundary of a bagging ensemble of 500
                  trees (from the preceding code), both trained on the moons dataset. As you can see, the ensemble’s
                  predictions will likely generalize much better than the single Decision Tree’s predictions: the
                  ensemble has a comparable bias but a smaller variance (it makes roughly the same number of errors on
                  the training set, but the decision boundary is less irregular).</p>

                <figure>
                  <div id="decision_tree_without_and_with_bagging_plot" class="figure">
                    <img src="mlst_0705.png" alt="mlst 0705" width="3228" height="1096" />
                    <h6><span class="label">Figure 7-5. </span>A single Decision Tree versus a bagging ensemble of 500
                      trees</h6>
                  </div>
                </figure>

                <p>Bootstrapping introduces a bit more diversity in the subsets that each predictor is trained on, so
                  bagging ends up with a slightly higher bias than pasting, but this also means that predictors end up
                  being less correlated so the ensemble’s variance is reduced. Overall, bagging often results in better
                  models, which explains why it is generally preferred. However, if you have spare time and CPU power
                  you can use cross-validation to evaluate both bagging and pasting and select the one that <a
                    data-type="indexterm" data-primary="Scikit-Learn" data-secondary="bagging and pasting in"
                    data-startref="sl7bapi" id="idm139656374795216" /><a data-type="indexterm"
                    data-primary="bagging and pasting" data-secondary="in Scikit-Learn" data-secondary-sortas="scikit"
                    data-startref="bap7isl" id="idm139656374793968" />works best.</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Out-of-Bag Evaluation">
              <div class="sect2" id="idm139656374792224">
                <h2>Out-of-Bag Evaluation</h2>

                <p>With <a data-type="indexterm" data-primary="bagging and pasting"
                    data-secondary="out-of-bag evaluation" id="bap7oobe" /><a data-type="indexterm"
                    data-primary="out-of-bag evaluation" id="oobe7" />bagging, some instances may be sampled several
                  times for any given predictor, while others may not be sampled at all. By default a
                  <code>BaggingClassifier</code> samples <em>m</em> training instances with replacement
                  (<code>bootstrap=True</code>), where <em>m</em> is the size of the training set. This means that only
                  about 63% of the training instances are sampled on average for each predictor.<sup><a
                      data-type="noteref" id="idm139656374785936-marker"
                      href="ch07.xhtml#idm139656374785936">6</a></sup> The remaining 37% of the training instances that
                  are not sampled are called <em>out-of-bag</em> (oob) instances. Note that they are not the same 37%
                  for all predictors.</p>

                <p>Since a predictor never sees the oob instances during training, it can be evaluated on these
                  instances, without the need for a separate validation set. You can evaluate the ensemble itself by
                  averaging out the oob evaluations of each predictor.</p>

                <p>In Scikit-Learn, you can set <code>oob_score=True</code> when creating a
                  <code>BaggingClassifier</code> to request an automatic oob evaluation after training. The following
                  code demonstrates this. The resulting evaluation score is available <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.tree.DecisionTreeClassifier"
                    data-startref="skltdtccha7" id="idm139656374782432" />through the <code>oob_score_</code> variable:
                </p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">bag_clf</code> <code class="o">=</code> <code class="n">BaggingClassifier</code><code class="p">(</code>
<code class="gp">... </code>    <code class="n">DecisionTreeClassifier</code><code class="p">(),</code> <code class="n">n_estimators</code><code class="o">=</code><code class="mi">500</code><code class="p">,</code>
<code class="gp">... </code>    <code class="n">bootstrap</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">n_jobs</code><code class="o">=-</code><code class="mi">1</code><code class="p">,</code> <code class="n">oob_score</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">bag_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">bag_clf</code><code class="o">.</code><code class="n">oob_score_</code>
<code class="go">0.90133333333333332</code></pre>

                <p>According to this oob evaluation, this <code>BaggingClassifier</code> is likely to achieve about
                  90.1% accuracy <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.metrics.accuracy_score()" id="idm139656374623792" />on the test set. Let’s
                  verify this:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.metrics</code> <code class="kn">import</code> <code class="n">accuracy_score</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">y_pred</code> <code class="o">=</code> <code class="n">bag_clf</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">accuracy_score</code><code class="p">(</code><code class="n">y_test</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">)</code>
<code class="go">0.91200000000000003</code></pre>

                <p>We get 91.2% accuracy on the test set—close enough!</p>

                <p>The oob decision function for each training instance is also available through the
                  <code>oob_decision_function_</code> variable. In this case (since the base estimator has a
                  <code>predict_proba()</code> method) the decision function returns the class probabilities for each
                  training instance. For example, the oob evaluation estimates that the first training instance has a
                  68.25% probability of belonging to the positive <a data-type="indexterm"
                    data-primary="Ensemble Learning" data-secondary="bagging and pasting" data-startref="el7bap"
                    id="idm139656374609168" /><a data-type="indexterm" data-primary="bagging and pasting"
                    data-startref="b7" id="idm139656374445264" />class (and 31.75% of belonging to the negative <a
                    data-type="indexterm" data-primary="bagging and pasting" data-secondary="out-of-bag evaluation"
                    data-startref="bap7oobe" id="idm139656374444128" /><a data-type="indexterm"
                    data-primary="out-of-bag evaluation" data-startref="oobe7" id="idm139656374442912" />class):</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">bag_clf</code><code class="o">.</code><code class="n">oob_decision_function_</code>
<code class="go">array([[0.31746032, 0.68253968],</code>
<code class="go">       [0.34117647, 0.65882353],</code>
<code class="go">       [1.        , 0.        ],</code>
<code class="go">       ...</code>
<code class="go">       [1.        , 0.        ],</code>
<code class="go">       [0.03108808, 0.96891192],</code>
<code class="go">       [0.57291667, 0.42708333]])</code></pre>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Random Patches and Random Subspaces">
          <div class="sect1" id="idm139656374791728">
            <h1>Random Patches and Random Subspaces</h1>

            <p>The <code>BaggingClassifier</code> <a data-type="indexterm" data-primary="Ensemble Learning"
                data-secondary="random patches and random subspaces" id="idm139656374474128" /><a data-type="indexterm"
                data-primary="Random Patches and Random Subspaces" id="idm139656374473152" />class supports sampling the
              features as well. This is controlled by two hyperparameters: <code>max_features</code> and
              <code>bootstrap_features</code>. They work the same way as <code>max_samples</code> and
              <code>bootstrap</code>, but for feature sampling instead of instance sampling. Thus, each predictor will
              be trained on a random subset of the input features.</p>

            <p>This is particularly useful when you are dealing with high-dimensional inputs (such as images). Sampling
              both training instances and features is called the <a href="https://homl.info/22"><em>Random Patches</em>
                method</a>.<sup><a data-type="noteref" id="idm139656374440864-marker"
                  href="ch07.xhtml#idm139656374440864">7</a></sup> Keeping all training instances (i.e.,
              <code>bootstrap=False</code> and <code>max_samples=1.0</code>) but sampling features (i.e.,
              <code>bootstrap_features=True</code> and/or <code>max_features</code> smaller than 1.0) is called the <a
                href="https://homl.info/23"><em>Random Subspaces</em> method</a>.<sup><a data-type="noteref"
                  id="idm139656374437424-marker" href="ch07.xhtml#idm139656374437424">8</a></sup></p>

            <p>Sampling features results in even more predictor diversity, trading a bit more bias for a lower variance.
            </p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Random Forests">
          <div class="sect1" id="idm139656374436192">
            <h1>Random Forests</h1>

            <p>As <a data-type="indexterm" data-primary="Random Forests" id="rf7" /><a data-type="indexterm"
                data-primary="Ensemble Learning" data-secondary="Random Forests" data-seealso="Random Forests"
                id="el7rf" /><a data-type="indexterm" data-primary="Decision Trees" data-secondary="Random Forests"
                data-see="Random Forests" id="idm139656374411008" /><a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="sklearn.ensemble.BaggingClassifier" data-startref="sklebcch7" id="idm139656374409792" />
              <a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="sklearn.ensemble.RandomForestRegressor" id="sklrfrch7" /> <a data-type="indexterm"
                data-primary="Scikit-Learn" data-secondary="sklearn.tree.DecisionTreeClassifier"
                id="idm139656374407040" />we have discussed, a <a href="https://homl.info/24">Random Forest</a><sup><a
                  data-type="noteref" id="idm139656374405360-marker" href="ch07.xhtml#idm139656374405360">9</a></sup> is
              an ensemble of Decision Trees, generally trained via the bagging method (or sometimes pasting), typically
              with <code>max_samples</code> set to the size of the training set. Instead of building a
              <code>BaggingClassifier</code> and passing it a <code>DecisionTreeClassifier</code>, you can instead use
              the <code>RandomForestClassifier</code> class, which is more convenient and optimized for Decision
              Trees<sup><a data-type="noteref" id="idm139656374402880-marker"
                  href="ch07.xhtml#idm139656374402880">10</a></sup> (similarly, there is a
              <code>RandomForestRegressor</code> class for regression tasks). The following code trains a Random Forest
              classifier with 500 trees (each limited to maximum 16 nodes), using all available CPU cores:</p>

            <pre data-type="programlisting"
              data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">RandomForestClassifier</code>

<code class="n">rnd_clf</code> <code class="o">=</code> <code class="n">RandomForestClassifier</code><code class="p">(</code><code class="n">n_estimators</code><code class="o">=</code><code class="mi">500</code><code class="p">,</code> <code class="n">max_leaf_nodes</code><code class="o">=</code><code class="mi">16</code><code class="p">,</code> <code class="n">n_jobs</code><code class="o">=-</code><code class="mi">1</code><code class="p">)</code>
<code class="n">rnd_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>

<code class="n">y_pred_rf</code> <code class="o">=</code> <code class="n">rnd_clf</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code></pre>

            <p>With a few exceptions, a <code>RandomForestClassifier</code> has all the hyperparameters of a
              <code>DecisionTreeClassifier</code> (to control how trees are grown), plus all the hyperparameters of a
              <code>BaggingClassifier</code> to control the ensemble itself.<sup><a data-type="noteref"
                  id="idm139656374507264-marker" href="ch07.xhtml#idm139656374507264">11</a></sup></p>

            <p>The Random Forest algorithm introduces extra randomness when growing trees; instead of searching for the
              very best feature when splitting a node (see <a data-type="xref"
                href="ch06.xhtml#trees_chapter">Chapter 6</a>), it searches for the best feature among a random subset
              of features. This results in a greater tree diversity, which (once again) trades a higher bias for a lower
              variance, generally yielding an overall better model. The following <code>BaggingClassifier</code> is
              roughly equivalent to the previous <code>RandomForestClassifier</code>:</p>

            <pre data-type="programlisting"
              data-code-language="python"><code class="n">bag_clf</code> <code class="o">=</code> <code class="n">BaggingClassifier</code><code class="p">(</code>
    <code class="n">DecisionTreeClassifier</code><code class="p">(</code><code class="n">splitter</code><code class="o">=</code><code class="s2">"random"</code><code class="p">,</code> <code class="n">max_leaf_nodes</code><code class="o">=</code><code class="mi">16</code><code class="p">),</code>
    <code class="n">n_estimators</code><code class="o">=</code><code class="mi">500</code><code class="p">,</code> <code class="n">max_samples</code><code class="o">=</code><code class="mf">1.0</code><code class="p">,</code> <code class="n">bootstrap</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">n_jobs</code><code class="o">=-</code><code class="mi">1</code><code class="p">)</code></pre>








            <section data-type="sect2" data-pdf-bookmark="Extra-Trees">
              <div class="sect2" id="idm139656377939008">
                <h2>Extra-Trees</h2>

                <p>When <a data-type="indexterm" data-primary="Random Forests" data-secondary="Extra-Trees"
                    id="idm139656374267200" /><a data-type="indexterm" data-primary="Extra-Trees"
                    id="idm139656374266192" />you are growing a tree in a Random Forest, at each node only a random
                  subset of the features is considered for splitting (as discussed earlier). It is possible to make
                  trees even more random by also using random thresholds for each feature rather than searching for the
                  best possible thresholds (like regular Decision Trees do).</p>

                <p>A forest of such extremely random trees is simply called an <a
                    href="https://homl.info/25"><em>Extremely Randomized Trees</em></a> ensemble<sup><a
                      data-type="noteref" id="idm139656374263808-marker"
                      href="ch07.xhtml#idm139656374263808">12</a></sup> (or <em>Extra-Trees</em> for short). Once again,
                  this trades more bias for a lower variance. It also makes Extra-Trees much faster to train than
                  regular Random Forests since finding the best possible threshold for each feature at every node is one
                  of the most time-consuming tasks of growing a tree.</p>

                <p>You can create an Extra-Trees classifier using Scikit-Learn’s <code>ExtraTreesClassifier</code>
                  class. Its API is identical to <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.RandomForestRegressor" data-startref="sklrfrch7"
                    id="idm139656374261392" />the <code>RandomForestClassifier</code> class. Similarly, the
                  <code>ExtraTreesRegressor</code> class has the same API as the <code>RandomForestRegressor</code>
                  class.</p>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>It is hard to tell in advance whether a <code>RandomForestClassifier</code> will perform better or
                    worse than an <code>ExtraTreesClassifier</code>. Generally, the only way to know is to try both and
                    compare them using cross-validation (and tuning the hyperparameters using grid search).</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Feature Importance">
              <div class="sect2" id="idm139656374256544">
                <h2>Feature Importance</h2>

                <p>Yet another great quality of Random Forests is that they make it easy to measure the <a
                    data-type="indexterm" data-primary="Random Forests" data-secondary="feature importance"
                    id="rf7fi" /><a data-type="indexterm" data-primary="feature importance" id="fi7" />relative
                  importance of each feature. Scikit-Learn measures a feature’s importance by looking at how much the
                  tree nodes that use that feature reduce impurity on average (across all trees in the forest). More
                  precisely, it is a weighted average, where each node’s weight is equal to the number of training
                  samples that are associated with it (see <a data-type="xref"
                    href="ch06.xhtml#trees_chapter">Chapter 6</a>).</p>

                <p>Scikit-Learn computes this score automatically for each feature after training, then it scales the
                  results so that the sum of all importances is equal to 1. You can access the result using the
                  <code>feature_importances_</code> variable. For example, the following code trains a
                  <code>RandomForestClassifier</code> on the <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.datasets.load_iris()" id="idm139656374250032" />iris dataset (introduced in
                  <a data-type="xref" href="ch04.xhtml#linear_models_chapter">Chapter 4</a>) and outputs each feature’s
                  importance. It seems that the most important features are the petal length (44%) and width (42%),
                  while sepal length and width are rather unimportant in comparison (11% and 2%, respectively).</p>

                <pre data-type="programlisting" data-code-language="pycon" class="pagebreak-before"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.datasets</code> <code class="kn">import</code> <code class="n">load_iris</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">iris</code> <code class="o">=</code> <code class="n">load_iris</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">rnd_clf</code> <code class="o">=</code> <code class="n">RandomForestClassifier</code><code class="p">(</code><code class="n">n_estimators</code><code class="o">=</code><code class="mi">500</code><code class="p">,</code> <code class="n">n_jobs</code><code class="o">=-</code><code class="mi">1</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">rnd_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">iris</code><code class="p">[</code><code class="s">"data"</code><code class="p">],</code> <code class="n">iris</code><code class="p">[</code><code class="s">"target"</code><code class="p">])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">for</code> <code class="n">name</code><code class="p">,</code> <code class="n">score</code> <code class="ow">in</code> <code class="nb">zip</code><code class="p">(</code><code class="n">iris</code><code class="p">[</code><code class="s">"feature_names"</code><code class="p">],</code> <code class="n">rnd_clf</code><code class="o">.</code><code class="n">feature_importances_</code><code class="p">):</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="n">name</code><code class="p">,</code> <code class="n">score</code><code class="p">)</code>
<code class="gp">...</code>
<code class="go">sepal length (cm) 0.112492250999</code>
<code class="go">sepal width (cm) 0.0231192882825</code>
<code class="go">petal length (cm) 0.441030464364</code>
<code class="go">petal width (cm) 0.423357996355</code></pre>

                <p>Similarly, if you train a Random Forest classifier on the MNIST dataset (introduced in <a
                    data-type="xref" href="ch03.xhtml#classification_chapter">Chapter 3</a>) and plot each pixel’s
                  importance, you get the image represented in <a data-type="xref"
                    href="#mnist_feature_importance_plot">Figure 7-6</a>.</p>

                <figure class="smallereighty">
                  <div id="mnist_feature_importance_plot" class="figure">
                    <img src="mlst_0706.png" alt="mlst 0706" width="1536" height="1054" />
                    <h6><span class="label">Figure 7-6. </span>MNIST pixel importance (according to a Random Forest
                      classifier)</h6>
                  </div>
                </figure>

                <p>Random Forests are very handy to get a quick understanding of what features actually matter, in
                  particular if you need to perform <a data-type="indexterm" data-primary="Random Forests"
                    data-startref="rf7" id="idm139656374197712" /><a data-type="indexterm"
                    data-primary="Ensemble Learning" data-secondary="Random Forests" data-seealso="Random Forests"
                    data-startref="el7rf" id="idm139656374196736" /><a data-type="indexterm"
                    data-primary="Random Forests" data-secondary="feature importance" data-startref="rf7fi"
                    id="idm139656374195248" /><a data-type="indexterm" data-primary="feature importance"
                    data-startref="fi7" id="idm139656374194032" /><a data-type="indexterm"
                    data-primary="feature selection" id="idm139656374193088" />feature selection.</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Boosting">
          <div class="sect1" id="idm139656374192160">
            <h1>Boosting</h1>

            <p><em>Boosting</em> <a data-type="indexterm" data-primary="Ensemble Learning" data-secondary="boosting"
                id="el7b" /><a data-type="indexterm" data-primary="boosting" id="boosting7" /><a data-type="indexterm"
                data-primary="hypothesis boosting" data-see="boosting" id="idm139656374188096" />(originally called
              <em>hypothesis boosting</em>) refers to any Ensemble method that can combine several weak learners into a
              strong learner. The general idea of most boosting methods is to train predictors sequentially, each trying
              to correct its predecessor. There are many boosting methods available, but by far the most popular are <a
                href="https://homl.info/26"><em>AdaBoost</em></a><sup><a data-type="noteref"
                  id="idm139656374185584-marker" href="ch07.xhtml#idm139656374185584">13</a></sup> (short for
              <em>Adaptive Boosting</em>) and <em>Gradient Boosting</em>. Let’s start with AdaBoost.</p>








            <section data-type="sect2" data-pdf-bookmark="AdaBoost">
              <div class="sect2" id="idm139656374183920">
                <h2>AdaBoost</h2>

                <p>One <a data-type="indexterm" data-primary="boosting" data-secondary="AdaBoost" id="b7a" /><a
                    data-type="indexterm" data-primary="AdaBoost" id="a7" />way for a new predictor to correct its
                  predecessor is to pay a bit more attention to the training instances that the predecessor underfitted.
                  This results in new predictors focusing more and more on the hard cases. This is the technique used by
                  AdaBoost.</p>

                <p>For example, to build an AdaBoost classifier, a first base classifier (such as a Decision Tree) is
                  trained and used to make predictions on the training set. The relative weight of misclassified
                  training instances is then increased. A second classifier is trained using the updated weights and
                  again it makes predictions on the training set, weights are updated, and so on (see <a
                    data-type="xref" href="#adaboost_training_diagram">Figure 7-7</a>).</p>

                <figure>
                  <div id="adaboost_training_diagram" class="figure">
                    <img src="mlst_0707.png" alt="mlst 0707" width="1756" height="1027" />
                    <h6><span class="label">Figure 7-7. </span>AdaBoost sequential training with instance weight updates
                    </h6>
                  </div>
                </figure>

                <p><a data-type="xref" href="#boosting_plot">Figure 7-8</a> shows the decision boundaries of five
                  consecutive predictors on the moons dataset (in this example, each predictor is a highly regularized
                  SVM classifier with an RBF kernel<sup><a data-type="noteref" id="idm139656374174544-marker"
                      href="ch07.xhtml#idm139656374174544">14</a></sup>). The first classifier gets many instances
                  wrong, so their weights get boosted. The second classifier therefore does a better job on these
                  instances, and so on. The plot on the right represents the same sequence of predictors except that the
                  learning rate is halved (i.e., the misclassified instance weights are boosted half as much at every
                  iteration). As you can see, this sequential learning technique has some similarities with Gradient
                  Descent, except that instead of tweaking a single predictor’s parameters to minimize a <a
                    data-type="indexterm" data-primary="cost function" data-secondary="in AdaBoost"
                    data-secondary-sortas="AdaBoost" id="idm139656374173168" />cost function, AdaBoost adds predictors
                  to the ensemble, gradually making it better.</p>

                <figure>
                  <div id="boosting_plot" class="figure">
                    <img src="mlst_0708.png" alt="mlst 0708" width="3228" height="1099" />
                    <h6><span class="label">Figure 7-8. </span>Decision boundaries of consecutive predictors</h6>
                  </div>
                </figure>

                <p>Once all predictors are trained, the ensemble makes predictions very much like bagging or pasting,
                  except that predictors have different weights depending on their overall accuracy on the weighted
                  training set.</p>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>There is one important drawback to this sequential learning technique: it cannot be parallelized
                    (or only partially), since each predictor can only be trained after the previous predictor has been
                    trained and evaluated. As a result, it does not scale as well as bagging or pasting.</p>
                </div>

                <p>Let’s take a closer look at the AdaBoost algorithm. Each instance weight
                  <em>w</em><sup><em>(i)</em></sup> is initially set to <math xmlns="http://www.w3.org/1998/Math/MathML"
                    alttext="StartFraction 1 Over m EndFraction">
                    <mfrac>
                      <mn>1</mn>
                      <mi>m</mi>
                    </mfrac>
                  </math>. A first predictor is trained and its weighted error rate <em>r</em><sub>1</sub> is computed
                  on the training set; see <a data-type="xref" href="#weighted_error_rate">Equation 7-1</a>.</p>
                <div id="weighted_error_rate" data-type="equation">
                  <h5><span class="label">Equation 7-1. </span>Weighted error rate of the j<sup>th</sup> predictor</h5>
                  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>j</mi>
                      </msub>
                      <mo>=</mo>
                      <mstyle scriptlevel="0" displaystyle="true">
                        <mfrac>
                          <mstyle scriptlevel="0" displaystyle="true">
                            <mrow>
                              <munderover>
                                <mo>∑</mo>
                                <mstyle scriptlevel="0" displaystyle="false">
                                  <mrow>
                                    <mfrac linethickness="0pt">
                                      <mrow>
                                        <mi>i</mi>
                                        <mo>=</mo>
                                        <mn>1</mn>
                                      </mrow>
                                      <mrow>
                                        <msubsup>
                                          <mover accent="true">
                                            <mi>y</mi>
                                            <mo>^</mo>
                                          </mover>
                                          <mi>j</mi>
                                          <mrow>
                                            <mo>(</mo>
                                            <mi>i</mi>
                                            <mo>)</mo>
                                          </mrow>
                                        </msubsup>
                                        <mo>≠</mo>
                                        <msup>
                                          <mi>y</mi>
                                          <mrow>
                                            <mo>(</mo>
                                            <mi>i</mi>
                                            <mo>)</mo>
                                          </mrow>
                                        </msup>
                                      </mrow>
                                    </mfrac>
                                  </mrow>
                                </mstyle>
                                <mi>m</mi>
                              </munderover>
                              <msup>
                                <mi>w</mi>
                                <mrow>
                                  <mo>(</mo>
                                  <mi>i</mi>
                                  <mo>)</mo>
                                </mrow>
                              </msup>
                            </mrow>
                          </mstyle>
                          <mstyle scriptlevel="0" displaystyle="true">
                            <mrow>
                              <munderover>
                                <mo>∑</mo>
                                <mrow>
                                  <mi>i</mi>
                                  <mo>=</mo>
                                  <mn>1</mn>
                                </mrow>
                                <mi>m</mi>
                              </munderover>
                              <msup>
                                <mi>w</mi>
                                <mrow>
                                  <mo>(</mo>
                                  <mi>i</mi>
                                  <mo>)</mo>
                                </mrow>
                              </msup>
                            </mrow>
                          </mstyle>
                        </mfrac>
                      </mstyle>
                      <mspace width="1.em" />
                      <mtext>where</mtext>
                      <mspace width="4.pt" />
                      <msubsup>
                        <mover accent="true">
                          <mi>y</mi>
                          <mo>^</mo>
                        </mover>
                        <mi>j</mi>
                        <mrow>
                          <mo>(</mo>
                          <mi>i</mi>
                          <mo>)</mo>
                        </mrow>
                      </msubsup>
                      <mspace width="4.pt" />
                      <mtext>is</mtext>
                      <mspace width="4.pt" />
                      <mtext>the</mtext>
                      <mspace width="4.pt" />
                      <msup>
                        <mi>j</mi>
                        <mtext>th</mtext>
                      </msup>
                      <mspace width="4.pt" />
                      <mtext>predictor’s</mtext>
                      <mspace width="4.pt" />
                      <mtext>prediction</mtext>
                      <mspace width="4.pt" />
                      <mtext>for</mtext>
                      <mspace width="4.pt" />
                      <mtext>the</mtext>
                      <mspace width="4.pt" />
                      <msup>
                        <mi>i</mi>
                        <mtext>th</mtext>
                      </msup>
                      <mspace width="4.pt" />
                      <mtext>instance.</mtext>
                    </mrow>
                  </math>
                </div>

                <p>The predictor’s weight <em>α</em><sub><em>j</em></sub> is then computed using <a data-type="xref"
                    href="#predictor_weight">Equation 7-2</a>, where <em>η</em> is the learning rate hyperparameter
                  (defaults to 1).<sup><a data-type="noteref" id="idm139656374121872-marker"
                      href="ch07.xhtml#idm139656374121872">15</a></sup> The more accurate the predictor is, the higher
                  its weight will be. If it is just guessing randomly, then its weight will be close to zero. However,
                  if it is most often wrong (i.e., less accurate than random guessing), then its weight will be
                  negative.</p>
                <div data-type="equation" id="predictor_weight">
                  <h5><span class="label">Equation 7-2. </span>Predictor weight</h5>
                  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mtable displaystyle="true">
                      <mtr>
                        <mtd columnalign="right">
                          <mrow>
                            <msub>
                              <mi>α</mi>
                              <mi>j</mi>
                            </msub>
                            <mo>=</mo>
                            <mi>η</mi>
                            <mo form="prefix">log</mo>
                            <mstyle scriptlevel="0" displaystyle="true">
                              <mfrac>
                                <mrow>
                                  <mn>1</mn>
                                  <mo>-</mo>
                                  <msub>
                                    <mi>r</mi>
                                    <mi>j</mi>
                                  </msub>
                                </mrow>
                                <msub>
                                  <mi>r</mi>
                                  <mi>j</mi>
                                </msub>
                              </mfrac>
                            </mstyle>
                          </mrow>
                        </mtd>
                      </mtr>
                    </mtable>
                  </math>
                </div>

                <p>Next the instance weights are updated using <a data-type="xref"
                    href="#instance_weight_update">Equation 7-3</a>: the misclassified instances are boosted.</p>
                <div data-type="equation" id="instance_weight_update">
                  <h5><span class="label">Equation 7-3. </span>Weight update rule</h5>
                  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mtable displaystyle="true">
                      <mtr>
                        <mtd />
                        <mtd columnalign="left">
                          <mrow>
                            <mspace width="4.pt" />
                            <mtext>for</mtext>
                            <mspace width="4.pt" />
                            <mi>i</mi>
                            <mo>=</mo>
                            <mn>1</mn>
                            <mo>,</mo>
                            <mn>2</mn>
                            <mo>,</mo>
                            <mo>⋯</mo>
                            <mo>,</mo>
                            <mi>m</mi>
                          </mrow>
                        </mtd>
                      </mtr>
                      <mtr>
                        <mtd />
                        <mtd columnalign="left">
                          <mrow>
                            <msup>
                              <mi>w</mi>
                              <mrow>
                                <mo>(</mo>
                                <mi>i</mi>
                                <mo>)</mo>
                              </mrow>
                            </msup>
                            <mo>←</mo>
                            <mfenced separators="" open="{" close="">
                              <mtable>
                                <mtr>
                                  <mtd columnalign="left">
                                    <msup>
                                      <mi>w</mi>
                                      <mrow>
                                        <mo>(</mo>
                                        <mi>i</mi>
                                        <mo>)</mo>
                                      </mrow>
                                    </msup>
                                  </mtd>
                                  <mtd columnalign="left">
                                    <mrow>
                                      <mtext>if</mtext>
                                      <mspace width="4.pt" />
                                      <msup>
                                        <mover accent="true">
                                          <msub>
                                            <mi>y</mi>
                                            <mi>j</mi>
                                          </msub>
                                          <mo>^</mo>
                                        </mover>
                                        <mrow>
                                          <mo>(</mo>
                                          <mi>i</mi>
                                          <mo>)</mo>
                                        </mrow>
                                      </msup>
                                      <mo>=</mo>
                                      <msup>
                                        <mi>y</mi>
                                        <mrow>
                                          <mo>(</mo>
                                          <mi>i</mi>
                                          <mo>)</mo>
                                        </mrow>
                                      </msup>
                                    </mrow>
                                  </mtd>
                                </mtr>
                                <mtr>
                                  <mtd columnalign="left">
                                    <mrow>
                                      <msup>
                                        <mi>w</mi>
                                        <mrow>
                                          <mo>(</mo>
                                          <mi>i</mi>
                                          <mo>)</mo>
                                        </mrow>
                                      </msup>
                                      <mo form="prefix">exp</mo>
                                      <mrow>
                                        <mo>(</mo>
                                        <msub>
                                          <mi>α</mi>
                                          <mi>j</mi>
                                        </msub>
                                        <mo>)</mo>
                                      </mrow>
                                    </mrow>
                                  </mtd>
                                  <mtd columnalign="left">
                                    <mrow>
                                      <mtext>if</mtext>
                                      <mspace width="4.pt" />
                                      <msup>
                                        <mover accent="true">
                                          <msub>
                                            <mi>y</mi>
                                            <mi>j</mi>
                                          </msub>
                                          <mo>^</mo>
                                        </mover>
                                        <mrow>
                                          <mo>(</mo>
                                          <mi>i</mi>
                                          <mo>)</mo>
                                        </mrow>
                                      </msup>
                                      <mo>≠</mo>
                                      <msup>
                                        <mi>y</mi>
                                        <mrow>
                                          <mo>(</mo>
                                          <mi>i</mi>
                                          <mo>)</mo>
                                        </mrow>
                                      </msup>
                                    </mrow>
                                  </mtd>
                                </mtr>
                              </mtable>
                            </mfenced>
                          </mrow>
                        </mtd>
                      </mtr>
                    </mtable>
                  </math>
                </div>

                <p>Then all the instance weights are normalized (i.e., divided by <math
                    xmlns="http://www.w3.org/1998/Math/MathML"
                    alttext="sigma-summation Underscript i equals 1 Overscript m Endscripts w Superscript left-parenthesis i right-parenthesis">
                    <mrow>
                      <msubsup>
                        <mo>∑</mo>
                        <mrow>
                          <mi>i</mi>
                          <mo>=</mo>
                          <mn>1</mn>
                        </mrow>
                        <mi>m</mi>
                      </msubsup>
                      <msup>
                        <mi>w</mi>
                        <mrow>
                          <mo>(</mo>
                          <mi>i</mi>
                          <mo>)</mo>
                        </mrow>
                      </msup>
                    </mrow>
                  </math>).</p>

                <p>Finally, a new predictor is trained using the updated weights, and the whole process is repeated (the
                  new predictor’s weight is computed, the instance weights are updated, then another predictor is
                  trained, and so on). The algorithm stops when the desired number of predictors is reached, or when a
                  perfect predictor is found.</p>

                <p>To make predictions, AdaBoost simply computes the predictions of all the predictors and weighs them
                  using the predictor weights <em>α</em><sub><em>j</em></sub>. The predicted class is the one that
                  receives the majority of weighted votes (see <a data-type="xref" href="#adaboost_prediction">Equation
                    7-4</a>).</p>
                <div id="adaboost_prediction" data-type="equation">
                  <h5><span class="label">Equation 7-4. </span>AdaBoost predictions</h5>
                  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mrow>
                      <mover accent="true">
                        <mi>y</mi>
                        <mo>^</mo>
                      </mover>
                      <mrow>
                        <mo>(</mo>
                        <mi mathvariant="bold">x</mi>
                        <mo>)</mo>
                      </mrow>
                      <mo>=</mo>
                      <munder>
                        <mo form="prefix">argmax</mo>
                        <mi>k</mi>
                      </munder>
                      <mrow>
                        <munderover>
                          <mo>∑</mo>
                          <mfrac linethickness="0pt">
                            <mstyle scriptlevel="1" displaystyle="false">
                              <mrow>
                                <mi>j</mi>
                                <mo>=</mo>
                                <mn>1</mn>
                              </mrow>
                            </mstyle>
                            <mstyle scriptlevel="1" displaystyle="false">
                              <mrow>
                                <msub>
                                  <mover accent="true">
                                    <mi>y</mi>
                                    <mo>^</mo>
                                  </mover>
                                  <mi>j</mi>
                                </msub>
                                <mrow>
                                  <mo>(</mo>
                                  <mi mathvariant="bold">x</mi>
                                  <mo>)</mo>
                                </mrow>
                                <mo>=</mo>
                                <mi>k</mi>
                              </mrow>
                            </mstyle>
                          </mfrac>
                          <mi>N</mi>
                        </munderover>
                        <msub>
                          <mi>α</mi>
                          <mi>j</mi>
                        </msub>
                      </mrow>
                      <mspace width="1.em" />
                      <mtext>where</mtext>
                      <mspace width="4.pt" />
                      <mi>N</mi>
                      <mspace width="4.pt" />
                      <mtext>is</mtext>
                      <mspace width="4.pt" />
                      <mtext>the</mtext>
                      <mspace width="4.pt" />
                      <mtext>number</mtext>
                      <mspace width="4.pt" />
                      <mtext>of</mtext>
                      <mspace width="4.pt" />
                      <mtext>predictors.</mtext>
                    </mrow>
                  </math>
                </div>

                <p>Scikit-Learn <a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="SAMME"
                    id="idm139656374018800" />actually uses a multiclass version of AdaBoost called <a
                    href="https://homl.info/27"><em>SAMME</em></a><sup><a data-type="noteref"
                      id="idm139656374016912-marker" href="ch07.xhtml#idm139656374016912">16</a></sup> (which stands for
                  <em>Stagewise Additive Modeling using a Multiclass Exponential loss function</em>). When there are
                  just two classes, SAMME is equivalent to AdaBoost. Moreover, if the predictors can estimate class
                  probabilities (i.e., if they have a <code>predict_proba()</code> method), Scikit-Learn can use a
                  variant of SAMME called <em>SAMME.R</em> (the <em>R</em> stands for “Real”), which relies on class
                  probabilities rather than predictions and generally performs better.</p>

                <p>The following code trains an <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.AdaBoostClassifier" id="idm139656374013648" />AdaBoost classifier
                  based on 200 <em>Decision Stumps</em> using Scikit-Learn’s <code>AdaBoostClassifier</code> class (as
                  you might expect, there is also an <code>AdaBoostRegressor</code> class). A <a data-type="indexterm"
                    data-primary="Decision Stumps" id="idm139656374011264" />Decision Stump is a <a
                    data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.tree.DecisionTreeClassifier" id="idm139656374010400" />Decision Tree with
                  <code>max_depth=1</code>—in other words, a tree composed of a single decision node plus two leaf
                  nodes. This is the default base estimator for the <code>AdaBoostClassifier</code> class:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">AdaBoostClassifier</code>

<code class="n">ada_clf</code> <code class="o">=</code> <code class="n">AdaBoostClassifier</code><code class="p">(</code>
    <code class="n">DecisionTreeClassifier</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">1</code><code class="p">),</code> <code class="n">n_estimators</code><code class="o">=</code><code class="mi">200</code><code class="p">,</code>
    <code class="n">algorithm</code><code class="o">=</code><code class="s2">"SAMME.R"</code><code class="p">,</code> <code class="n">learning_rate</code><code class="o">=</code><code class="mf">0.5</code><code class="p">)</code>
<code class="n">ada_clf</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code></pre>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>If your AdaBoost ensemble is overfitting the training set, you can try reducing the number of
                    estimators or more strongly regularizing the base <a data-type="indexterm" data-primary="boosting"
                      data-secondary="AdaBoost" data-startref="b7a" id="idm139656373971248" /><a data-type="indexterm"
                      data-primary="AdaBoost" data-startref="a7" id="idm139656373970064" />estimator.</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Gradient Boosting">
              <div class="sect2" id="idm139656374182976">
                <h2>Gradient Boosting</h2>

                <p>Another <a data-type="indexterm" data-primary="boosting" data-secondary="Gradient Boosting"
                    id="b7gb" /><a data-type="indexterm" data-primary="Gradient Boosting" id="gb7" />very popular
                  Boosting algorithm is <a href="https://homl.info/28"><em>Gradient Boosting</em></a>.<sup><a
                      data-type="noteref" id="idm139656373963712-marker"
                      href="ch07.xhtml#idm139656373963712">17</a></sup> Just like AdaBoost, Gradient Boosting works by
                  sequentially adding predictors to an ensemble, each one correcting its predecessor. However, instead
                  of tweaking the instance weights at every iteration like AdaBoost does, this method tries to fit the
                  new predictor to the <em>residual errors</em> <a data-type="indexterm" data-primary="residual errors"
                    id="re7" />made by the previous predictor.</p>

                <p>Let’s go through a simple regression example using <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.tree.DecisionTreeRegressor"
                    id="skltdtgch7" />Decision Trees as the base predictors (of course Gradient Boosting also works
                  great with regression tasks). This is called<a data-type="indexterm"
                    data-primary="Gradient Tree Boosting" id="idm139656373959040" /><a data-type="indexterm"
                    data-primary="Gradient Boosted Regression Trees (GBRT)" id="idm139656373958368" /> <em>Gradient Tree
                    Boosting</em>, or <em>Gradient Boosted Regression Trees</em> (<em>GBRT</em>). First, let’s fit a
                  <code>DecisionTreeRegressor</code> to the training set (for example, a noisy quadratic training set):
                </p>

                <pre data-type="programlisting" data-code-language="python"
                  class="pagebreak-before"><code class="kn">from</code> <code class="nn">sklearn.tree</code> <code class="kn">import</code> <code class="n">DecisionTreeRegressor</code>

<code class="n">tree_reg1</code> <code class="o">=</code> <code class="n">DecisionTreeRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">)</code>
<code class="n">tree_reg1</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">)</code></pre>

                <p>Now train a second <code>DecisionTreeRegressor</code> on the residual errors made by the first
                  predictor:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">y2</code> <code class="o">=</code> <code class="n">y</code> <code class="o">-</code> <code class="n">tree_reg1</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X</code><code class="p">)</code>
<code class="n">tree_reg2</code> <code class="o">=</code> <code class="n">DecisionTreeRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">)</code>
<code class="n">tree_reg2</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y2</code><code class="p">)</code></pre>

                <p>Then <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.tree.DecisionTreeRegressor" data-startref="skltdtgch7"
                    id="idm139656373816256" />we train a third regressor on the residual errors made by the second
                  predictor:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">y3</code> <code class="o">=</code> <code class="n">y2</code> <code class="o">-</code> <code class="n">tree_reg2</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X</code><code class="p">)</code>
<code class="n">tree_reg3</code> <code class="o">=</code> <code class="n">DecisionTreeRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">)</code>
<code class="n">tree_reg3</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y3</code><code class="p">)</code></pre>

                <p>Now we have an ensemble containing three trees. It can make predictions on a new instance simply by
                  adding up the predictions of all the trees:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">y_pred</code> <code class="o">=</code> <code class="nb">sum</code><code class="p">(</code><code class="n">tree</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_new</code><code class="p">)</code> <code class="k">for</code> <code class="n">tree</code> <code class="ow">in</code> <code class="p">(</code><code class="n">tree_reg1</code><code class="p">,</code> <code class="n">tree_reg2</code><code class="p">,</code> <code class="n">tree_reg3</code><code class="p">))</code></pre>

                <p><a data-type="xref" href="#gradient_boosting_plot">Figure 7-9</a> represents the predictions of these
                  three trees in the left column, and the ensemble’s predictions in the right column. In the first row,
                  the ensemble has just one tree, so its predictions are exactly the same as the first tree’s
                  predictions. In the second row, a new tree is trained on the residual errors of the first tree. On the
                  right you can see that the ensemble’s predictions are equal to the sum of the predictions of the first
                  two trees. Similarly, in the third row another tree is trained on the residual errors of the second
                  tree. You can see that the ensemble’s predictions gradually get better as trees are added to the <a
                    data-type="indexterm" data-primary="residual errors" data-startref="re7"
                    id="idm139656373930928" />ensemble.</p>

                <p>A simpler way to train GBRT ensembles is to use Scikit-Learn’s <code>GradientBoostingRegressor</code>
                  class. <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.GradientBoostingRegressor" id="idm139656373928896" /> <a
                    data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.RandomForestRegressor" id="idm139656373927760" />Much like the
                  <code>RandomForestRegressor</code> class, it has hyperparameters to control the growth of Decision
                  Trees (e.g., <code>max_depth</code>, <code>min_samples_leaf</code>, and so on), as well as
                  hyperparameters to control the ensemble training, such as the number of trees
                  (<code>n_estimators</code>). The following code creates the same ensemble as the previous one:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">GradientBoostingRegressor</code>

<code class="n">gbrt</code> <code class="o">=</code> <code class="n">GradientBoostingRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">,</code> <code class="n">n_estimators</code><code class="o">=</code><code class="mi">3</code><code class="p">,</code> <code class="n">learning_rate</code><code class="o">=</code><code class="mf">1.0</code><code class="p">)</code>
<code class="n">gbrt</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">)</code></pre>

                <figure>
                  <div id="gradient_boosting_plot" class="figure">
                    <img src="mlst_0709.png" alt="mlst 0709" width="3163" height="3203" />
                    <h6><span class="label">Figure 7-9. </span>Gradient Boosting</h6>
                  </div>
                </figure>

                <p>The <code>learning_rate</code> hyperparameter scales the contribution of each tree. If you set it to
                  a low value, such as <code>0.1</code>, you will need more trees in the ensemble to fit the training
                  set, but the predictions will usually generalize better. This is a regularization technique <a
                    data-type="indexterm" data-primary="shrinkage" id="idm139656373734224" /><a data-type="indexterm"
                    data-primary="regularization" data-secondary="shrinkage" id="idm139656373733520" />called
                  <em>shrinkage</em>. <a data-type="xref" href="#gbrt_learning_rate_plot">Figure 7-10</a> shows two GBRT
                  ensembles trained with a low learning rate: the one on the left does not have enough trees to fit the
                  training set, while the one on the right has too many trees and overfits the training set.</p>

                <figure>
                  <div id="gbrt_learning_rate_plot" class="figure">
                    <img src="mlst_0710.png" alt="mlst 0710" width="3194" height="1093" />
                    <h6><span class="label">Figure 7-10. </span>GBRT ensembles with not enough predictors (left) and too
                      many (right)</h6>
                  </div>
                </figure>

                <p>In order to find the optimal number of trees, you can use <a data-type="indexterm"
                    data-primary="early stopping" id="idm139656373728528" />early stopping (see <a data-type="xref"
                    href="ch04.xhtml#linear_models_chapter">Chapter 4</a>). A simple way to implement this is to use the
                  <code>staged_predict()</code> method: it returns an iterator over the predictions made by the ensemble
                  at each stage of training (with one tree, two trees, etc.). The following code trains a GBRT ensemble
                  with 120 trees, then measures the validation error at each stage of training to find the optimal
                  number of trees, and finally trains another GBRT ensemble <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.metrics.mean_squared_error()"
                    id="sklmmsech7" /><a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.train_test_split()" id="idm139656373724912" /><a
                    data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.GradientBoostingRegressor" id="sklegbrch7" />using the optimal
                  number of trees:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">import</code> <code class="nn">numpy</code> <code class="kn">as</code> <code class="nn">np</code>
<code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">train_test_split</code>
<code class="kn">from</code> <code class="nn">sklearn.metrics</code> <code class="kn">import</code> <code class="n">mean_squared_error</code>

<code class="n">X_train</code><code class="p">,</code> <code class="n">X_val</code><code class="p">,</code> <code class="n">y_train</code><code class="p">,</code> <code class="n">y_val</code> <code class="o">=</code> <code class="n">train_test_split</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">)</code>

<code class="n">gbrt</code> <code class="o">=</code> <code class="n">GradientBoostingRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">,</code> <code class="n">n_estimators</code><code class="o">=</code><code class="mi">120</code><code class="p">)</code>
<code class="n">gbrt</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>

<code class="n">errors</code> <code class="o">=</code> <code class="p">[</code><code class="n">mean_squared_error</code><code class="p">(</code><code class="n">y_val</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">)</code>
          <code class="k">for</code> <code class="n">y_pred</code> <code class="ow">in</code> <code class="n">gbrt</code><code class="o">.</code><code class="n">staged_predict</code><code class="p">(</code><code class="n">X_val</code><code class="p">)]</code>
<code class="n">bst_n_estimators</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">argmin</code><code class="p">(</code><code class="n">errors</code><code class="p">)</code>

<code class="n">gbrt_best</code> <code class="o">=</code> <code class="n">GradientBoostingRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">,</code><code class="n">n_estimators</code><code class="o">=</code><code class="n">bst_n_estimators</code><code class="p">)</code>
<code class="n">gbrt_best</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code></pre>

                <p>The validation errors are represented on the left of <a data-type="xref"
                    href="#early_stopping_gbrt_plot">Figure 7-11</a>, and the best model’s predictions are represented
                  on the right.</p>

                <figure>
                  <div id="early_stopping_gbrt_plot" class="figure">
                    <img src="mlst_0711.png" alt="mlst 0711" width="3196" height="1090" />
                    <h6><span class="label">Figure 7-11. </span>Tuning the number of trees using early stopping</h6>
                  </div>
                </figure>

                <p>It is also possible to implement early stopping by actually stopping training early (instead of
                  training a large number of trees first and then looking back to find the optimal number). You can do
                  so by setting <code>warm_start=True</code>, which makes Scikit-Learn keep existing trees when the
                  <code>fit()</code> method is called, allowing incremental training. The <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.ensemble.GradientBoostingRegressor"
                    data-startref="sklegbrch7" id="idm139656373526496" /><a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.metrics.mean_squared_error()"
                    data-startref="sklmmsech7" id="idm139656373525152" />following code stops training when the
                  validation error does not improve for five iterations in a row:</p>

                <pre data-type="programlisting" data-code-language="python"><code class="n">gbrt</code> <code class="o">=</code> <code class="n">GradientBoostingRegressor</code><code class="p">(</code><code class="n">max_depth</code><code class="o">=</code><code class="mi">2</code><code class="p">,</code> <code class="n">warm_start</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>

<code class="n">min_val_error</code> <code class="o">=</code> <code class="nb">float</code><code class="p">(</code><code class="s2">"inf"</code><code class="p">)</code>
<code class="n">error_going_up</code> <code class="o">=</code> <code class="mi">0</code>
<code class="k">for</code> <code class="n">n_estimators</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="mi">120</code><code class="p">):</code>
    <code class="n">gbrt</code><code class="o">.</code><code class="n">n_estimators</code> <code class="o">=</code> <code class="n">n_estimators</code>
    <code class="n">gbrt</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
    <code class="n">y_pred</code> <code class="o">=</code> <code class="n">gbrt</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_val</code><code class="p">)</code>
    <code class="n">val_error</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">y_val</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">)</code>
    <code class="k">if</code> <code class="n">val_error</code> <code class="o">&lt;</code> <code class="n">min_val_error</code><code class="p">:</code>
        <code class="n">min_val_error</code> <code class="o">=</code> <code class="n">val_error</code>
        <code class="n">error_going_up</code> <code class="o">=</code> <code class="mi">0</code>
    <code class="k">else</code><code class="p">:</code>
        <code class="n">error_going_up</code> <code class="o">+=</code> <code class="mi">1</code>
        <code class="k">if</code> <code class="n">error_going_up</code> <code class="o">==</code> <code class="mi">5</code><code class="p">:</code>
            <code class="k">break</code>  <code class="c1"># early stopping</code></pre>

                <p>The <code>GradientBoostingRegressor</code> class also supports <a data-type="indexterm"
                    data-primary="subsample" id="idm139656373521200" />a <code>subsample</code> hyperparameter, which
                  specifies the fraction of training instances to be used for training each tree. For example, if
                  <code>subsample=0.25</code>, then each tree is trained on 25% of the training instances, selected
                  randomly. As you can probably guess by now, this trades a higher bias for a lower variance. It also
                  speeds up training considerably. This <a data-type="indexterm"
                    data-primary="Stochastic Gradient Boosting" id="idm139656373438608" />technique is called
                  <em>Stochastic Gradient Boosting</em>.</p>
                <div data-type="note" epub:type="note">
                  <h6>Note</h6>
                  <p>It is possible to use Gradient Boosting with other <a data-type="indexterm"
                      data-primary="cost function" data-secondary="in Gradient Descent" data-secondary-sortas="Gradient"
                      id="idm139656373436512" />cost functions. This is controlled by the <code>loss</code>
                    hyperparameter (see Scikit-Learn’s documentation for more <a data-type="indexterm"
                      data-primary="boosting" data-secondary="Gradient Boosting" data-startref="b7gb"
                      id="idm139656373434752" /><a data-type="indexterm" data-primary="Gradient Boosting"
                      data-startref="gb7" id="idm139656373433504" /><a data-type="indexterm"
                      data-primary="Ensemble Learning" data-secondary="boosting" data-startref="el7b"
                      id="idm139656373432560" /><a data-type="indexterm" data-primary="boosting"
                      data-startref="boosting7" id="idm139656373431344" />details).</p>
                </div>

                <p>It is worth noting that an optimized implementation of Gradient Boosting is available in the popular
                  python library <a href="https://github.com/dmlc/xgboost"><em>XGBoost</em></a>, which stands for
                  Extreme Gradient Boosting. This package was initially developed by Tianqi Chen as part of the
                  Distributed (Deep) Machine Learning Community (<a href="http://dmlc.ml/">DMLC</a>), and it aims at
                  being extremely fast, scalable and portable. In fact, XGBoost is often an important component of the
                  winning entries in ML competitions. XGBoost’s API is quite similar to Scikit-Learn’s:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">import</code> <code class="nn">xgboost</code>

<code class="n">xgb_reg</code> <code class="o">=</code> <code class="n">xgboost</code><code class="o">.</code><code class="n">XGBRegressor</code><code class="p">()</code>
<code class="n">xgb_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
<code class="n">y_pred</code> <code class="o">=</code> <code class="n">xgb_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_val</code><code class="p">)</code></pre>

                <p>XGBoost also offers several nice features, such as automatically taking care of early stopping:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">xgb_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">,</code>
            <code class="n">eval_set</code><code class="o">=</code><code class="p">[(</code><code class="n">X_val</code><code class="p">,</code> <code class="n">y_val</code><code class="p">)],</code> <code class="n">early_stopping_rounds</code><code class="o">=</code><code class="mi">2</code><code class="p">)</code>
<code class="n">y_pred</code> <code class="o">=</code> <code class="n">xgb_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_val</code><code class="p">)</code></pre>

                <p>You should definitely check it out!</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Stacking">
          <div class="sect1" id="idm139656373967824">
            <h1>Stacking</h1>

            <p>The <a data-type="indexterm" data-primary="stacking" id="s7" /><a data-type="indexterm"
                data-primary="Ensemble Learning" data-secondary="stacking" id="el7s" />last Ensemble method we will
              discuss in this chapter is called <em>stacking</em> <a data-type="indexterm"
                data-primary="stacked generalization" data-see="stacking" id="idm139656373226160" />(short for <a
                href="https://homl.info/29"><em>stacked generalization</em></a>).<sup><a data-type="noteref"
                  id="idm139656373224176-marker" href="ch07.xhtml#idm139656373224176">18</a></sup> It is based on a
              simple idea: instead of using trivial functions (such as hard voting) to aggregate the predictions of all
              predictors in an ensemble, why don’t we train a model to perform this aggregation? <a data-type="xref"
                href="#blending_prediction_diagram">Figure 7-12</a> <a data-type="indexterm" data-primary="blending"
                id="blend7" />shows such an ensemble performing a regression task on a new instance. Each of the bottom
              three predictors predicts a different value (3.1, 2.7, and 2.9), and then the final predictor <a
                data-type="indexterm" data-primary="meta learner" data-see="blending" id="idm139656373221184" />(called
              a <em>blender</em>, or a <em>meta learner</em>) takes these predictions as inputs and makes the final
              prediction (3.0).</p>

            <figure class="smallersixty">
              <div id="blending_prediction_diagram" class="figure">
                <img src="mlst_0712.png" alt="mlst 0712" width="1451" height="1277" />
                <h6><span class="label">Figure 7-12. </span>Aggregating predictions using a blending predictor</h6>
              </div>
            </figure>

            <p>To train the blender, a common approach is to use a <a data-type="indexterm" data-primary="hold-out sets"
                data-seealso="blenders" id="idm139656373216848" />hold-out set.<sup><a data-type="noteref"
                  id="idm139656373215744-marker" href="ch07.xhtml#idm139656373215744">19</a></sup> Let’s see how it
              works. First, the training set is split in two subsets. The first subset is used to train the predictors
              in the first layer (see <a data-type="xref" href="#blending_layer_1_training_diagram">Figure 7-13</a>).
            </p>

            <figure class="smallersixty">
              <div id="blending_layer_1_training_diagram" class="figure">
                <img src="mlst_0713.png" alt="mlst 0713" width="1536" height="988" />
                <h6><span class="label">Figure 7-13. </span>Training the first layer</h6>
              </div>
            </figure>

            <p>Next, the first layer predictors are used to make predictions on the second (held-out) set (see <a
                data-type="xref" href="#blending_layer_2_training_diagram">Figure 7-14</a>). This ensures that the
              predictions are “clean,” since the predictors never saw these instances during training. Now for each
              instance in the hold-out set there are three predicted values. We can create a new training set using
              these predicted values as input features (which makes this new training set three-dimensional), and
              keeping the target values. The blender is trained on this new training set, so it learns to predict the
              target value given the first layer’s predictions.</p>

            <figure class="smallersixty">
              <div id="blending_layer_2_training_diagram" class="figure">
                <img src="mlst_0714.png" alt="mlst 0714" width="1664" height="1661" />
                <h6><span class="label">Figure 7-14. </span>Training the blender</h6>
              </div>
            </figure>

            <p>It is actually possible to train several different blenders this way (e.g., one using Linear Regression,
              another using Random Forest Regression, and so on): we get a whole layer of blenders. The trick is to
              split the training set into three subsets: the first one is used to train the first layer, the second one
              is used to create the training set used to train the second layer (using predictions made by the
              predictors of the first layer), and the third one is used to create the training set to train the third
              layer (using predictions made by the predictors of the second layer). Once this is done, we can make a
              prediction for a new instance by going through each layer sequentially, as shown in <a data-type="xref"
                href="#multi_layer_blending_diagram">Figure 7-15</a>.</p>

            <figure class="smallersixty">
              <div id="multi_layer_blending_diagram" class="figure">
                <img src="mlst_0715.png" alt="mlst 0715" width="1346" height="1391" />
                <h6><span class="label">Figure 7-15. </span>Predictions in a multilayer stacking ensemble</h6>
              </div>
            </figure>

            <p>Unfortunately, Scikit-Learn does not support stacking directly, but it is not too hard to roll out your
              own implementation (see the following exercises). Alternatively, you can use an open source implementation
              <a data-type="indexterm" data-primary="stacking" data-startref="s7" id="idm139656373201776" /><a
                data-type="indexterm" data-primary="Ensemble Learning" data-secondary="stacking" data-startref="el7s"
                id="idm139656373200800" />such <a data-type="indexterm" data-primary="brew" id="idm139656373199456" />as
              <code>brew</code> (available at <a href="https://github.com/viisar/brew"><em
                  class="hyperlink">https://github.com/viisar/brew</em></a>).</p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Exercises">
          <div class="sect1" id="idm139656373355088">
            <h1>Exercises</h1>
            <ol>
              <li>
                <p>If you have trained five different models on the exact same training data, and they all achieve 95%
                  precision, is there any chance that you can combine these models to get better results? If so, how? If
                  not, why?</p>
              </li>
              <li>
                <p>What is the difference between hard and soft voting classifiers?</p>
              </li>
              <li>
                <p>Is it possible to speed up training of a bagging ensemble by distributing it across multiple servers?
                  What about pasting ensembles, boosting ensembles, random forests, or stacking ensembles?</p>
              </li>
              <li>
                <p>What is the benefit of out-of-bag evaluation?</p>
              </li>
              <li>
                <p>What makes Extra-Trees more random than regular Random Forests? How can this extra randomness help?
                  Are Extra-Trees slower or faster than regular Random Forests?</p>
              </li>
              <li>
                <p>If your AdaBoost ensemble underfits the training data, what hyperparameters should you tweak and how?
                </p>
              </li>
              <li>
                <p>If your Gradient Boosting ensemble overfits the training set, should you increase or decrease the
                  learning rate?</p>
              </li>
              <li>
                <p>Load the MNIST data (introduced in <a data-type="xref"
                    href="ch03.xhtml#classification_chapter">Chapter 3</a>), and split it into a training set, a
                  validation set, and a test set (e.g., use 50,000 instances for training, 10,000 for validation, and
                  10,000 for testing). Then train various classifiers, such as a Random Forest classifier, an
                  Extra-Trees classifier, and an SVM. Next, try to combine them into an ensemble that outperforms them
                  all on the validation set, using a soft or hard voting classifier. Once you have found one, try it on
                  the test set. How much better does it perform compared to the individual classifiers?</p>
              </li>
              <li>
                <p>Run the individual classifiers from the previous exercise to make predictions on the validation set,
                  and create a new training set with the resulting predictions: each training instance is a vector
                  containing the set of predictions from all your classifiers for an image, and the target is the
                  image’s class. Train a classifier on this new training set. Congratulations, you have just trained a
                  blender, and together with the classifiers they form a stacking ensemble! <a data-type="indexterm"
                    data-primary="blending" data-startref="blend7" id="idm139656373334240" />Now let’s evaluate the
                  ensemble on the test set. For each image in the test set, make predictions with all your classifiers,
                  then feed the predictions to the blender to get the ensemble’s predictions. How does it compare to the
                  voting classifier you trained <a data-type="indexterm" data-primary="Ensemble Learning"
                    data-startref="el7" id="idm139656373332864" />earlier?</p>
              </li>

            </ol>

            <p>Solutions to these exercises are available in Appendix A.</p>
          </div>
        </section>







        <div data-type="footnotes">
          <p data-type="footnote" id="idm139656374698608"><sup><a
                href="ch07.xhtml#idm139656374698608-marker">1</a></sup> “Bagging Predictors,” L. Breiman (1996).</p>
          <p data-type="footnote" id="idm139656374697664"><sup><a
                href="ch07.xhtml#idm139656374697664-marker">2</a></sup> In statistics, resampling with replacement is
            called <em>bootstrapping</em>.</p>
          <p data-type="footnote" id="idm139656374695232"><sup><a
                href="ch07.xhtml#idm139656374695232-marker">3</a></sup> “Pasting small votes for classification in large
            databases and on-line,” L. Breiman (1999).</p>
          <p data-type="footnote" id="idm139656374850832"><sup><a
                href="ch07.xhtml#idm139656374850832-marker">4</a></sup> Bias and variance were introduced in <a
              data-type="xref" href="ch04.xhtml#linear_models_chapter">Chapter 4</a>.</p>
          <p data-type="footnote" id="idm139656374839376"><sup><a
                href="ch07.xhtml#idm139656374839376-marker">5</a></sup> <code>max_samples</code> can alternatively be
            set to a float between 0.0 and 1.0, in which case the max number of instances to sample is equal to the size
            of the training set times <code>max_samples</code>.</p>
          <p data-type="footnote" id="idm139656374785936"><sup><a
                href="ch07.xhtml#idm139656374785936-marker">6</a></sup> As <em>m</em> grows, this ratio approaches 1 –
            exp(–1) ≈ 63.212%.</p>
          <p data-type="footnote" id="idm139656374440864"><sup><a
                href="ch07.xhtml#idm139656374440864-marker">7</a></sup> “Ensembles on Random Patches,” G. Louppe and P.
            Geurts (2012).</p>
          <p data-type="footnote" id="idm139656374437424"><sup><a
                href="ch07.xhtml#idm139656374437424-marker">8</a></sup> “The random subspace method for constructing
            decision forests,” Tin Kam Ho (1998).</p>
          <p data-type="footnote" id="idm139656374405360"><sup><a
                href="ch07.xhtml#idm139656374405360-marker">9</a></sup> “Random Decision Forests,” T. Ho (1995).</p>
          <p data-type="footnote" id="idm139656374402880"><sup><a
                href="ch07.xhtml#idm139656374402880-marker">10</a></sup> The <code>BaggingClassifier</code> class
            remains useful if you want a bag of something other than Decision Trees.</p>
          <p data-type="footnote" id="idm139656374507264"><sup><a
                href="ch07.xhtml#idm139656374507264-marker">11</a></sup> There are a few notable exceptions:
            <code>splitter</code> is absent (forced to <code>"random"</code>), <code>presort</code> is absent (forced to
            <code>False</code>), <code>max_samples</code> is absent (forced to <code>1.0</code>), and
            <code>base_estimator</code> is absent (forced to <code>DecisionTreeClassifier</code> with the provided
            hyperparameters).</p>
          <p data-type="footnote" id="idm139656374263808"><sup><a
                href="ch07.xhtml#idm139656374263808-marker">12</a></sup> “Extremely randomized trees,” P. Geurts, D.
            Ernst, L. Wehenkel (2005).</p>
          <p data-type="footnote" id="idm139656374185584"><sup><a
                href="ch07.xhtml#idm139656374185584-marker">13</a></sup> “A Decision-Theoretic Generalization of On-Line
            Learning and an Application to Boosting,” Yoav Freund, Robert E. Schapire (1997).</p>
          <p data-type="footnote" id="idm139656374174544"><sup><a
                href="ch07.xhtml#idm139656374174544-marker">14</a></sup> This is just for illustrative purposes. SVMs
            are generally not good base predictors for AdaBoost, because they are slow and tend to be unstable with
            AdaBoost.</p>
          <p data-type="footnote" id="idm139656374121872"><sup><a
                href="ch07.xhtml#idm139656374121872-marker">15</a></sup> The original AdaBoost algorithm does not use a
            learning rate hyperparameter.</p>
          <p data-type="footnote" id="idm139656374016912"><sup><a
                href="ch07.xhtml#idm139656374016912-marker">16</a></sup> For more details, see “Multi-Class AdaBoost,”
            J. Zhu et al. (2006).</p>
          <p data-type="footnote" id="idm139656373963712"><sup><a
                href="ch07.xhtml#idm139656373963712-marker">17</a></sup> First introduced in “Arcing the Edge,” L.
            Breiman (1997), and further developed in the paper “Greedy Function Approximation: A Gradient Boosting
            Machine,” Jerome H. Friedman (1999).</p>
          <p data-type="footnote" id="idm139656373224176"><sup><a
                href="ch07.xhtml#idm139656373224176-marker">18</a></sup> “Stacked Generalization,” D. Wolpert (1992).
          </p>
          <p data-type="footnote" id="idm139656373215744"><sup><a
                href="ch07.xhtml#idm139656373215744-marker">19</a></sup> Alternatively, it is possible to use
            out-of-fold predictions. In some contexts this is called <em>stacking</em>, while using a hold-out set is
            called <em>blending</em>. However, for many people these terms are synonymous.</p>
        </div>
      </div>
    </section>
  </div>



</body>

</html>