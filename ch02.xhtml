<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd"
  xmlns:epub="http://www.idpf.org/2007/ops">

<head>
  <link href="Style00.css" rel="stylesheet" type="text/css" />
  <link href="Style01.css" rel="stylesheet" type="text/css" />
  <link href="Style02.css" rel="stylesheet" type="text/css" />
  <link href="Style03.css" rel="stylesheet" type="text/css" />
  <style type="text/css" title="ibis-book">
    @charset "utf-8";

    #sbo-rt-content html,
    #sbo-rt-content div,
    #sbo-rt-content div,
    #sbo-rt-content span,
    #sbo-rt-content applet,
    #sbo-rt-content object,
    #sbo-rt-content iframe,
    #sbo-rt-content h1,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5,
    #sbo-rt-content h6,
    #sbo-rt-content p,
    #sbo-rt-content blockquote,
    #sbo-rt-content pre,
    #sbo-rt-content a,
    #sbo-rt-content abbr,
    #sbo-rt-content acronym,
    #sbo-rt-content address,
    #sbo-rt-content big,
    #sbo-rt-content cite,
    #sbo-rt-content code,
    #sbo-rt-content del,
    #sbo-rt-content dfn,
    #sbo-rt-content em,
    #sbo-rt-content img,
    #sbo-rt-content ins,
    #sbo-rt-content kbd,
    #sbo-rt-content q,
    #sbo-rt-content s,
    #sbo-rt-content samp,
    #sbo-rt-content small,
    #sbo-rt-content strike,
    #sbo-rt-content strong,
    #sbo-rt-content sub,
    #sbo-rt-content sup,
    #sbo-rt-content tt,
    #sbo-rt-content var,
    #sbo-rt-content b,
    #sbo-rt-content u,
    #sbo-rt-content i,
    #sbo-rt-content center,
    #sbo-rt-content dl,
    #sbo-rt-content dt,
    #sbo-rt-content dd,
    #sbo-rt-content ol,
    #sbo-rt-content ul,
    #sbo-rt-content li,
    #sbo-rt-content fieldset,
    #sbo-rt-content form,
    #sbo-rt-content label,
    #sbo-rt-content legend,
    #sbo-rt-content table,
    #sbo-rt-content caption,
    #sbo-rt-content tdiv,
    #sbo-rt-content tfoot,
    #sbo-rt-content thead,
    #sbo-rt-content tr,
    #sbo-rt-content th,
    #sbo-rt-content td,
    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content canvas,
    #sbo-rt-content details,
    #sbo-rt-content embed,
    #sbo-rt-content figure,
    #sbo-rt-content figcaption,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content output,
    #sbo-rt-content ruby,
    #sbo-rt-content section,
    #sbo-rt-content summary,
    #sbo-rt-content time,
    #sbo-rt-content mark,
    #sbo-rt-content audio,
    #sbo-rt-content video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline
    }

    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content details,
    #sbo-rt-content figcaption,
    #sbo-rt-content figure,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content section {
      display: block
    }

    #sbo-rt-content div {
      line-height: 1
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style: none
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content q {
      quotes: none
    }

    #sbo-rt-content blockquote:before,
    #sbo-rt-content blockquote:after,
    #sbo-rt-content q:before,
    #sbo-rt-content q:after {
      content: none
    }

    #sbo-rt-content table {
      border-collapse: collapse;
      border-spacing: 0
    }

    @page {
      margin: 5px !important
    }

    #sbo-rt-content p {
      margin: 10px 0 0;
      line-height: 125%;
      text-align: left
    }

    #sbo-rt-content p.byline {
      text-align: left;
      margin: -33px auto 35px;
      font-style: italic;
      font-weight: bold
    }

    #sbo-rt-content div.preface p+p.byline {
      margin: 1em 0 0 !important
    }

    #sbo-rt-content div.preface p.byline+p.byline {
      margin: 0 !important
    }

    #sbo-rt-content div.sect1&gt;

    p.byline {
      margin: -.25em 0 1em
    }

    #sbo-rt-content div.sect1&gt;

    p.byline+p.byline {
      margin-top: -1em
    }

    #sbo-rt-content em {
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content em strong,
    #sbo-rt-content strong em {
      font-weight: bold;
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content strong,
    #sbo-rt-content span.bold {
      font-weight: bold
    }

    #sbo-rt-content em.replaceable {
      font-style: italic
    }

    #sbo-rt-content strong.userinput {
      font-weight: bold;
      font-style: normal
    }

    #sbo-rt-content span.bolditalic {
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content a.ulink,
    #sbo-rt-content a.xref,
    #sbo-rt-content a.email,
    #sbo-rt-content a.link,
    #sbo-rt-content a {
      text-decoration: none;
      color: #8e0012
    }

    #sbo-rt-content span.lineannotation {
      font-style: italic;
      color: #a62a2a;
      font-family: serif
    }

    #sbo-rt-content span.underline {
      text-decoration: underline
    }

    #sbo-rt-content span.strikethrough {
      text-decoration: line-through
    }

    #sbo-rt-content span.smallcaps {
      font-variant: small-caps
    }

    #sbo-rt-content span.cursor {
      background: #000;
      color: #fff
    }

    #sbo-rt-content span.smaller {
      font-size: 75%
    }

    #sbo-rt-content .boxedtext,
    #sbo-rt-content .keycap {
      border-style: solid;
      border-width: 1px;
      border-color: #000;
      padding: 1px
    }

    #sbo-rt-content span.gray50 {
      color: #7F7F7F;
    }

    #sbo-rt-content h1,
    #sbo-rt-content div.toc-title,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5 {
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      font-weight: bold;
      text-align: left;
      page-break-after: avoid !important;
      font-family: sans-serif, "DejaVuSans"
    }

    #sbo-rt-content div.toc-title {
      font-size: 1.5em;
      margin-top: 20px !important;
      margin-bottom: 30px !important
    }

    #sbo-rt-content section[data-type="sect1"] h1 {
      font-size: 1.3em;
      color: #8e0012;
      margin: 40px 0 8px 0
    }

    #sbo-rt-content section[data-type="sect2"] h2 {
      font-size: 1.1em;
      margin: 30px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect3"] h3 {
      font-size: 1em;
      color: #555;
      margin: 20px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect4"] h4 {
      font-size: 1em;
      font-weight: normal;
      font-style: italic;
      margin: 15px 0 6px 0 !important
    }

    #sbo-rt-content section[data-type="chapter"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="preface"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="appendix"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="glossary"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="bibliography"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="index"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      line-height: 1;
      margin-bottom: 50px;
      color: #000;
      padding-bottom: 10px;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content span.label,
    #sbo-rt-content span.keep-together {
      font-size: inherit;
      font-weight: inherit
    }

    #sbo-rt-content div[data-type="part"] h1 {
      font-size: 2em;
      text-align: center;
      margin-top: 0 !important;
      margin-bottom: 50px;
      padding: 50px 0 10px 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content img.width-ninety {
      width: 90%
    }

    #sbo-rt-content img {
      max-width: 95%;
      margin: 0 auto;
      padding: 0
    }

    #sbo-rt-content div.figure {
      background-color: transparent;
      text-align: center !important;
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content figure {
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.figure h6,
    #sbo-rt-content figure h6,
    #sbo-rt-content figure figcaption {
      font-size: .9rem !important;
      text-align: center;
      font-weight: normal !important;
      font-style: italic;
      font-family: serif !important;
      text-transform: none !important;
      letter-spacing: normal !important;
      color: #000 !important;
      padding-top: 10px !important;
      page-break-before: avoid
    }

    #sbo-rt-content div.informalfigure {
      text-align: center !important;
      padding: 5px 0 !important
    }

    #sbo-rt-content div.sidebar {
      margin: 15px 0 10px 0 !important;
      border: 1px solid #DCDCDC;
      background-color: #F7F7F7;
      padding: 15px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content aside[data-type="sidebar"] {
      margin: 15px 0 10px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar-title,
    #sbo-rt-content aside[data-type="sidebar"] h5 {
      font-weight: bold;
      font-size: 1em;
      font-family: sans-serif;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar ol,
    #sbo-rt-content div.sidebar ul,
    #sbo-rt-content aside[data-type="sidebar"] ol,
    #sbo-rt-content aside[data-type="sidebar"] ul {
      margin-left: 1.25em !important
    }

    #sbo-rt-content div.sidebar div.figure p.title,
    #sbo-rt-content aside[data-type="sidebar"] figcaption,
    #sbo-rt-content div.sidebar div.informalfigure div.caption {
      font-size: 90%;
      text-align: center;
      font-weight: normal;
      font-style: italic;
      font-family: serif !important;
      color: #000;
      padding: 5px !important;
      page-break-before: avoid;
      page-break-after: avoid
    }

    #sbo-rt-content div.sidebar div.tip,
    #sbo-rt-content div.sidebar div[data-type="tip"],
    #sbo-rt-content div.sidebar div.note,
    #sbo-rt-content div.sidebar div[data-type="note"],
    #sbo-rt-content div.sidebar div.warning,
    #sbo-rt-content div.sidebar div[data-type="warning"],
    #sbo-rt-content div.sidebar div[data-type="caution"],
    #sbo-rt-content div.sidebar div[data-type="important"] {
      margin: 20px auto 20px auto !important;
      font-size: 90%;
      width: 85%
    }

    #sbo-rt-content aside[data-type="sidebar"] p.byline {
      font-size: 90%;
      font-weight: bold;
      font-style: italic;
      text-align: center;
      text-indent: 0;
      margin: 5px auto 6px;
      page-break-after: avoid
    }

    #sbo-rt-content pre {
      white-space: pre-wrap;
      font-family: "Ubuntu Mono", monospace;
      margin: 25px 0 25px 20px;
      font-size: 85%;
      display: block;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content div.note pre.programlisting,
    #sbo-rt-content div.tip pre.programlisting,
    #sbo-rt-content div.warning pre.programlisting,
    #sbo-rt-content div.caution pre.programlisting,
    #sbo-rt-content div.important pre.programlisting {
      margin-bottom: 0
    }

    #sbo-rt-content code {
      font-family: "Ubuntu Mono", monospace;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content code strong em,
    #sbo-rt-content code em strong,
    #sbo-rt-content pre em strong,
    #sbo-rt-content pre strong em,
    #sbo-rt-content strong code em code,
    #sbo-rt-content em code strong code,
    #sbo-rt-content span.bolditalic code {
      font-weight: bold;
      font-style: italic;
      font-family: "Ubuntu Mono BoldItal", monospace
    }

    #sbo-rt-content code em,
    #sbo-rt-content em code,
    #sbo-rt-content pre em,
    #sbo-rt-content em.replaceable {
      font-family: "Ubuntu Mono Ital", monospace;
      font-style: italic
    }

    #sbo-rt-content code strong,
    #sbo-rt-content strong code,
    #sbo-rt-content pre strong,
    #sbo-rt-content strong.userinput {
      font-family: "Ubuntu Mono Bold", monospace;
      font-weight: bold
    }

    #sbo-rt-content div[data-type="example"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div[data-type="example"] h1,
    #sbo-rt-content div[data-type="example"] h2,
    #sbo-rt-content div[data-type="example"] h3,
    #sbo-rt-content div[data-type="example"] h4,
    #sbo-rt-content div[data-type="example"] h5,
    #sbo-rt-content div[data-type="example"] h6 {
      font-style: italic;
      font-weight: normal;
      text-align: left !important;
      text-transform: none !important;
      font-family: serif !important;
      margin: 10px 0 5px 0 !important;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content li pre.example {
      padding: 10px 0 !important
    }

    #sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],
    #sbo-rt-content div[data-type="example"] pre[data-type="screen"] {
      margin: 0
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      margin: 50px 0 10px 0 !important;
      line-height: 1;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] h2,
    #sbo-rt-content section[data-type="titlepage"] p.subtitle,
    #sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"] {
      font-size: 1.3em;
      font-weight: normal;
      text-align: center;
      margin-top: .5em;
      color: #555
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h2[data-type="author"],
    #sbo-rt-content section[data-type="titlepage"] p.author {
      font-size: 1.3em;
      font-family: serif !important;
      font-weight: bold;
      margin: 50px 0 !important;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] p.edition {
      text-align: center;
      text-transform: uppercase;
      margin-top: 2em
    }

    #sbo-rt-content section[data-type="titlepage"] {
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"]:after {
      content: url(css_assets/titlepage_footer_ebook.png);
      margin: 0 auto;
      max-width: 80%
    }

    #sbo-rt-content div.book div.titlepage div.publishername {
      margin-top: 60%;
      margin-bottom: 20px;
      text-align: center;
      font-size: 1.25em
    }

    #sbo-rt-content div.book div.titlepage div.locations p {
      margin: 0;
      text-align: center
    }

    #sbo-rt-content div.book div.titlepage div.locations p.cities {
      font-size: 80%;
      text-align: center;
      margin-top: 5px
    }

    #sbo-rt-content section.preface[title="Dedication"]&gt;

    div.titlepage h2.title {
      text-align: center;
      text-transform: uppercase;
      font-size: 1.5em;
      margin-top: 50px;
      margin-bottom: 50px
    }

    #sbo-rt-content ul.stafflist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.stafflist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content ul.printings li {
      list-style-type: none
    }

    #sbo-rt-content section.preface[title="Dedication"] p {
      font-style: italic;
      text-align: center
    }

    #sbo-rt-content div.colophon h1.title {
      font-size: 1.3em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon h2.subtitle {
      margin: 0 !important;
      color: #000;
      font-family: serif !important;
      font-size: 1em;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.author h3.author {
      font-size: 1.1em;
      font-family: serif !important;
      margin: 10px 0 0 !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h4,
    #sbo-rt-content div.colophon div.editor h3.editor {
      color: #000;
      font-size: .8em;
      margin: 15px 0 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h3.editor {
      font-size: .8em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.publisher {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon div.publisher p,
    #sbo-rt-content div.colophon div.publisher span.publishername {
      margin: 0;
      font-size: .8em
    }

    #sbo-rt-content div.legalnotice p,
    #sbo-rt-content div.timestamp p {
      font-size: .8em
    }

    #sbo-rt-content div.timestamp p {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon[title="About the Author"] h1.title,
    #sbo-rt-content div.colophon[title="Colophon"] h1.title {
      font-size: 1.5em;
      margin: 0 !important;
      font-family: sans-serif !important
    }

    #sbo-rt-content section.chapter div.titlepage div.author {
      margin: 10px 0 10px 0
    }

    #sbo-rt-content section.chapter div.titlepage div.author div.affiliation {
      font-style: italic
    }

    #sbo-rt-content div.attribution {
      margin: 5px 0 0 50px !important
    }

    #sbo-rt-content h3.author span.orgname {
      display: none
    }

    #sbo-rt-content div.epigraph {
      margin: 10px 0 10px 20px !important;
      page-break-inside: avoid;
      font-size: 90%
    }

    #sbo-rt-content div.epigraph p {
      font-style: italic
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content div.blockquote {
      margin: 10px !important;
      page-break-inside: avoid;
      font-size: 95%
    }

    #sbo-rt-content blockquote p,
    #sbo-rt-content div.blockquote p {
      font-style: italic;
      margin: .75em 0 0 !important
    }

    #sbo-rt-content blockquote div.attribution,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      margin: 5px 0 10px 30px !important;
      text-align: right;
      width: 80%
    }

    #sbo-rt-content blockquote div.attribution p,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      font-style: normal;
      margin-top: 5px
    }

    #sbo-rt-content blockquote div.attribution p:before,
    #sbo-rt-content blockquote p[data-type="attribution"]:before {
      font-style: normal;
      content: "—";
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none
    }

    #sbo-rt-content p.right {
      text-align: right;
      margin: 0
    }

    #sbo-rt-content div[data-type="footnotes"] {
      border-top: 1px solid black;
      margin-top: 2em
    }

    #sbo-rt-content sub,
    #sbo-rt-content sup {
      font-size: 75%;
      line-height: 0;
      position: relative
    }

    #sbo-rt-content sup {
      top: -.5em
    }

    #sbo-rt-content sub {
      bottom: -.25em
    }

    #sbo-rt-content p[data-type="footnote"] {
      font-size: 90% !important;
      line-height: 1.2em !important;
      margin-left: 2.5em !important;
      text-indent: -2.3em !important
    }

    #sbo-rt-content p[data-type="footnote"] sup {
      display: inline-block !important;
      position: static !important;
      width: 2em !important;
      text-align: right !important;
      font-size: 100% !important;
      padding-right: .5em !important
    }

    #sbo-rt-content p[data-type="footnote"] a[href$="-marker"] {
      font-family: sans-serif !important;
      font-size: 90% !important;
      color: #8e0012 !important
    }

    #sbo-rt-content a[data-type="noteref"] {
      font-family: sans-serif !important;
      color: #8e0012;
      margin-left: 0;
      padding-left: 0
    }

    #sbo-rt-content div.refentry p.refname {
      font-size: 1em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold;
      margin-bottom: 5px;
      overflow: auto;
      width: 100%
    }

    #sbo-rt-content div.refentry {
      width: 100%;
      display: block;
      margin-top: 2em
    }

    #sbo-rt-content div.refsynopsisdiv {
      display: block;
      clear: both
    }

    #sbo-rt-content div.refentry header {
      page-break-inside: avoid !important;
      display: block;
      break-inside: avoid !important;
      padding-top: 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content div.refsect1 h6 {
      font-size: .9em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold
    }

    #sbo-rt-content div.refsect1 {
      margin-top: 3em
    }

    #sbo-rt-content dt {
      padding-top: 10px !important;
      padding-bottom: 0 !important
    }

    #sbo-rt-content dd {
      margin-left: 1.5em !important;
      margin-bottom: .25em
    }

    #sbo-rt-content dd ol,
    #sbo-rt-content dd ul {
      padding-left: 1em
    }

    #sbo-rt-content dd li {
      margin-top: 0;
      margin-bottom: 0
    }

    #sbo-rt-content dd,
    #sbo-rt-content li {
      text-align: left
    }

    #sbo-rt-content ul,
    #sbo-rt-content ul&gt;
    li,
    #sbo-rt-content ol ul,
    #sbo-rt-content ol ul&gt;
    li,
    #sbo-rt-content ul ol ul,
    #sbo-rt-content ul ol ul&gt;

    li {
      list-style-type: disc
    }

    #sbo-rt-content ul ul,
    #sbo-rt-content ul ul&gt;

    li {
      list-style-type: square
    }

    #sbo-rt-content ul ul ul,
    #sbo-rt-content ul ul ul&gt;

    li {
      list-style-type: circle
    }

    #sbo-rt-content ol,
    #sbo-rt-content ol&gt;
    li,
    #sbo-rt-content ol ul ol,
    #sbo-rt-content ol ul ol&gt;
    li,
    #sbo-rt-content ul ol,
    #sbo-rt-content ul ol&gt;

    li {
      list-style-type: decimal
    }

    #sbo-rt-content ol ol,
    #sbo-rt-content ol ol&gt;

    li {
      list-style-type: lower-alpha
    }

    #sbo-rt-content ol ol ol,
    #sbo-rt-content ol ol ol&gt;

    li {
      list-style-type: lower-roman
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style-position: outside;
      margin: 15px 0 15px 1.25em;
      padding-left: 2.25em
    }

    #sbo-rt-content ol li,
    #sbo-rt-content ul li {
      margin: .5em 0 .65em;
      line-height: 125%
    }

    #sbo-rt-content div.orderedlistalpha {
      list-style-type: upper-alpha
    }

    #sbo-rt-content table.simplelist,
    #sbo-rt-content ul.simplelist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.simplelist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content table.simplelist td {
      border: none
    }

    #sbo-rt-content table.simplelist tr {
      border-bottom: none
    }

    #sbo-rt-content table.simplelist tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content dl.calloutlist p:first-child {
      margin-top: -25px !important
    }

    #sbo-rt-content dl.calloutlist dd {
      padding-left: 0;
      margin-top: -25px
    }

    #sbo-rt-content dl.calloutlist img,
    #sbo-rt-content a.co img {
      padding: 0
    }

    #sbo-rt-content div.toc ol {
      margin-top: 8px !important;
      margin-bottom: 8px !important;
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol ol {
      margin-left: 30px !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol li {
      list-style-type: none
    }

    #sbo-rt-content div.toc a {
      color: #8e0012
    }

    #sbo-rt-content div.toc ol a {
      font-size: 1em;
      font-weight: bold
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;

    ol a {
      font-weight: bold;
      font-size: 1em
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;
    ol&gt;
    li&gt;

    ol a {
      text-decoration: none;
      font-weight: normal;
      font-size: 1em
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"],
    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      margin: 30px !important;
      font-size: 90%;
      padding: 10px 8px 20px 8px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.tip ol,
    #sbo-rt-content div.tip ul,
    #sbo-rt-content div[data-type="tip"] ol,
    #sbo-rt-content div[data-type="tip"] ul,
    #sbo-rt-content div.note ol,
    #sbo-rt-content div.note ul,
    #sbo-rt-content div[data-type="note"] ol,
    #sbo-rt-content div[data-type="note"] ul,
    #sbo-rt-content div.warning ol,
    #sbo-rt-content div.warning ul,
    #sbo-rt-content div[data-type="warning"] ol,
    #sbo-rt-content div[data-type="warning"] ul,
    #sbo-rt-content div[data-type="caution"] ol,
    #sbo-rt-content div[data-type="caution"] ul,
    #sbo-rt-content div[data-type="important"] ol,
    #sbo-rt-content div[data-type="important"] ul {
      margin-left: 1.5em !important
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"] {
      border: 1px solid #BEBEBE;
      background-color: transparent
    }

    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      border: 1px solid #BC8F8F
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="note"] h1,
    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1,
    #sbo-rt-content div[data-type="important"] h6 {
      font-weight: bold;
      font-size: 110%;
      font-family: sans-serif !important;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px !important
    }

    #sbo-rt-content div[data-type="tip"] figure h6,
    #sbo-rt-content div[data-type="note"] figure h6,
    #sbo-rt-content div[data-type="warning"] figure h6,
    #sbo-rt-content div[data-type="caution"] figure h6,
    #sbo-rt-content div[data-type="important"] figure h6 {
      font-family: serif !important
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div[data-type="note"] h1 {
      color: #737373
    }

    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="important"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1 {
      color: #C67171
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,
    #sbo-rt-content div.safarienabled {
      background-color: transparent;
      margin: 8px 0 0 !important;
      border: 0 solid #BEBEBE;
      font-size: 100%;
      padding: 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,
    #sbo-rt-content div.safarienabled h6 {
      display: none
    }

    #sbo-rt-content div.table,
    #sbo-rt-content table {
      margin: 15px 0 30px 0 !important;
      max-width: 95%;
      border: none !important;
      background: none;
      display: table !important
    }

    #sbo-rt-content div.table,
    #sbo-rt-content div.informaltable,
    #sbo-rt-content table {
      page-break-inside: avoid
    }

    #sbo-rt-content tr,
    #sbo-rt-content tr td {
      border-bottom: 1px solid #c3c3c3
    }

    #sbo-rt-content thead td,
    #sbo-rt-content thead th {
      border-bottom: #9d9d9d 1px solid !important;
      border-top: #9d9d9d 1px solid !important
    }

    #sbo-rt-content tr:nth-of-type(even) {
      background-color: #f1f6fc
    }

    #sbo-rt-content thead {
      font-family: sans-serif;
      font-weight: bold
    }

    #sbo-rt-content td,
    #sbo-rt-content th {
      display: table-cell;
      padding: .3em;
      text-align: left;
      vertical-align: middle;
      font-size: 80%
    }

    #sbo-rt-content div.informaltable table {
      margin: 10px auto !important
    }

    #sbo-rt-content div.informaltable table tr {
      border-bottom: none
    }

    #sbo-rt-content div.informaltable table tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content div.informaltable td,
    #sbo-rt-content div.informaltable th {
      border: #9d9d9d 1px solid
    }

    #sbo-rt-content div.table-title,
    #sbo-rt-content table caption {
      font-weight: normal;
      font-style: italic;
      font-family: serif;
      font-size: 1em;
      margin: 10px 0 10px 0 !important;
      padding: 0;
      page-break-after: avoid;
      text-align: left !important
    }

    #sbo-rt-content table code {
      font-size: smaller
    }

    #sbo-rt-content table.border tbody&gt;
    tr:last-child&gt;

    td {
      border-bottom: transparent
    }

    #sbo-rt-content div.equation,
    #sbo-rt-content div[data-type="equation"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div.equation-title,
    #sbo-rt-content div[data-type="equation"] h5 {
      font-style: italic;
      font-weight: normal;
      font-family: serif !important;
      font-size: 90%;
      margin: 20px 0 10px 0 !important;
      page-break-after: avoid
    }

    #sbo-rt-content div.equation-contents {
      margin-left: 20px
    }

    #sbo-rt-content div[data-type="equation"] math {
      font-size: calc(.35em + 1vw)
    }

    #sbo-rt-content span.inlinemediaobject {
      height: .85em;
      display: inline-block;
      margin-bottom: .2em
    }

    #sbo-rt-content span.inlinemediaobject img {
      margin: 0;
      height: .85em
    }

    #sbo-rt-content div.informalequation {
      margin: 20px 0 20px 20px;
      width: 75%
    }

    #sbo-rt-content div.informalequation img {
      width: 75%
    }

    #sbo-rt-content div.index {
      text-indent: 0
    }

    #sbo-rt-content div.index h3 {
      padding: .25em;
      margin-top: 1em !important;
      background-color: #F0F0F0
    }

    #sbo-rt-content div.index li {
      line-height: 130%;
      list-style-type: none
    }

    #sbo-rt-content div.index a.indexterm {
      color: #8e0012 !important
    }

    #sbo-rt-content div.index ul {
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.index ul ul {
      margin-left: 1em !important;
      margin-top: 0 !important
    }

    #sbo-rt-content code.boolean,
    #sbo-rt-content .navy {
      color: rgb(0, 0, 128);
    }

    #sbo-rt-content code.character,
    #sbo-rt-content .olive {
      color: rgb(128, 128, 0);
    }

    #sbo-rt-content code.comment,
    #sbo-rt-content .blue {
      color: rgb(0, 0, 255);
    }

    #sbo-rt-content code.conditional,
    #sbo-rt-content .limegreen {
      color: rgb(50, 205, 50);
    }

    #sbo-rt-content code.constant,
    #sbo-rt-content .darkorange {
      color: rgb(255, 140, 0);
    }

    #sbo-rt-content code.debug,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.define,
    #sbo-rt-content .darkgoldenrod,
    #sbo-rt-content .gold {
      color: rgb(184, 134, 11);
    }

    #sbo-rt-content code.delimiter,
    #sbo-rt-content .dimgray {
      color: rgb(105, 105, 105);
    }

    #sbo-rt-content code.error,
    #sbo-rt-content .red {
      color: rgb(255, 0, 0);
    }

    #sbo-rt-content code.exception,
    #sbo-rt-content .salmon {
      color: rgb(250, 128, 11);
    }

    #sbo-rt-content code.float,
    #sbo-rt-content .steelblue {
      color: rgb(70, 130, 180);
    }

    #sbo-rt-content pre code.function,
    #sbo-rt-content .green {
      color: rgb(0, 128, 0);
    }

    #sbo-rt-content code.identifier,
    #sbo-rt-content .royalblue {
      color: rgb(65, 105, 225);
    }

    #sbo-rt-content code.ignore,
    #sbo-rt-content .gray {
      color: rgb(128, 128, 128);
    }

    #sbo-rt-content code.include,
    #sbo-rt-content .purple {
      color: rgb(128, 0, 128);
    }

    #sbo-rt-content code.keyword,
    #sbo-rt-content .sienna {
      color: rgb(160, 82, 45);
    }

    #sbo-rt-content code.label,
    #sbo-rt-content .deeppink {
      color: rgb(255, 20, 147);
    }

    #sbo-rt-content code.macro,
    #sbo-rt-content .orangered {
      color: rgb(255, 69, 0);
    }

    #sbo-rt-content code.number,
    #sbo-rt-content .brown {
      color: rgb(165, 42, 42);
    }

    #sbo-rt-content code.operator,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.preCondit,
    #sbo-rt-content .teal {
      color: rgb(0, 128, 128);
    }

    #sbo-rt-content code.preProc,
    #sbo-rt-content .fuschia {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.repeat,
    #sbo-rt-content .indigo {
      color: rgb(75, 0, 130);
    }

    #sbo-rt-content code.special,
    #sbo-rt-content .saddlebrown {
      color: rgb(139, 69, 19);
    }

    #sbo-rt-content code.specialchar,
    #sbo-rt-content .magenta {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.specialcomment,
    #sbo-rt-content .seagreen {
      color: rgb(46, 139, 87);
    }

    #sbo-rt-content code.statement,
    #sbo-rt-content .forestgreen {
      color: rgb(34, 139, 34);
    }

    #sbo-rt-content code.storageclass,
    #sbo-rt-content .plum {
      color: rgb(221, 160, 221);
    }

    #sbo-rt-content code.string,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.structure,
    #sbo-rt-content .chocolate {
      color: rgb(210, 106, 30);
    }

    #sbo-rt-content code.tag,
    #sbo-rt-content .darkcyan {
      color: rgb(0, 139, 139);
    }

    #sbo-rt-content code.todo,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.type,
    #sbo-rt-content .mediumslateblue {
      color: rgb(123, 104, 238);
    }

    #sbo-rt-content code.typedef,
    #sbo-rt-content .darkgreen {
      color: rgb(0, 100, 0);
    }

    #sbo-rt-content code.underlined {
      text-decoration: underline;
    }

    #sbo-rt-content pre code.hll {
      background-color: #ffc
    }

    #sbo-rt-content pre code.c {
      color: #09F;
      font-style: italic
    }

    #sbo-rt-content pre code.err {
      color: #A00
    }

    #sbo-rt-content pre code.k {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.o {
      color: #555
    }

    #sbo-rt-content pre code.cm {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cp {
      color: #099
    }

    #sbo-rt-content pre code.c1 {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cs {
      color: #35586C;
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content pre code.gd {
      background-color: #FCC
    }

    #sbo-rt-content pre code.ge {
      font-style: italic
    }

    #sbo-rt-content pre code.gr {
      color: #F00
    }

    #sbo-rt-content pre code.gh {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gi {
      background-color: #CFC
    }

    #sbo-rt-content pre code.go {
      color: #000
    }

    #sbo-rt-content pre code.gp {
      color: #009;
      font-weight: bold
    }

    #sbo-rt-content pre code.gs {
      font-weight: bold
    }

    #sbo-rt-content pre code.gu {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gt {
      color: #9C6
    }

    #sbo-rt-content pre code.kc {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kd {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kn {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kp {
      color: #069
    }

    #sbo-rt-content pre code.kr {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kt {
      color: #078;
      font-weight: bold
    }

    #sbo-rt-content pre code.m {
      color: #F60
    }

    #sbo-rt-content pre code.s {
      color: #C30
    }

    #sbo-rt-content pre code.na {
      color: #309
    }

    #sbo-rt-content pre code.nb {
      color: #366
    }

    #sbo-rt-content pre code.nc {
      color: #0A8;
      font-weight: bold
    }

    #sbo-rt-content pre code.no {
      color: #360
    }

    #sbo-rt-content pre code.nd {
      color: #99F
    }

    #sbo-rt-content pre code.ni {
      color: #999;
      font-weight: bold
    }

    #sbo-rt-content pre code.ne {
      color: #C00;
      font-weight: bold
    }

    #sbo-rt-content pre code.nf {
      color: #C0F
    }

    #sbo-rt-content pre code.nl {
      color: #99F
    }

    #sbo-rt-content pre code.nn {
      color: #0CF;
      font-weight: bold
    }

    #sbo-rt-content pre code.nt {
      color: #309;
      font-weight: bold
    }

    #sbo-rt-content pre code.nv {
      color: #033
    }

    #sbo-rt-content pre code.ow {
      color: #000;
      font-weight: bold
    }

    #sbo-rt-content pre code.w {
      color: #bbb
    }

    #sbo-rt-content pre code.mf {
      color: #F60
    }

    #sbo-rt-content pre code.mh {
      color: #F60
    }

    #sbo-rt-content pre code.mi {
      color: #F60
    }

    #sbo-rt-content pre code.mo {
      color: #F60
    }

    #sbo-rt-content pre code.sb {
      color: #C30
    }

    #sbo-rt-content pre code.sc {
      color: #C30
    }

    #sbo-rt-content pre code.sd {
      color: #C30;
      font-style: italic
    }

    #sbo-rt-content pre code.s2 {
      color: #C30
    }

    #sbo-rt-content pre code.se {
      color: #C30;
      font-weight: bold
    }

    #sbo-rt-content pre code.sh {
      color: #C30
    }

    #sbo-rt-content pre code.si {
      color: #A00
    }

    #sbo-rt-content pre code.sx {
      color: #C30
    }

    #sbo-rt-content pre code.sr {
      color: #3AA
    }

    #sbo-rt-content pre code.s1 {
      color: #C30
    }

    #sbo-rt-content pre code.ss {
      color: #A60
    }

    #sbo-rt-content pre code.bp {
      color: #366
    }

    #sbo-rt-content pre code.vc {
      color: #033
    }

    #sbo-rt-content pre code.vg {
      color: #033
    }

    #sbo-rt-content pre code.vi {
      color: #033
    }

    #sbo-rt-content pre code.il {
      color: #F60
    }

    #sbo-rt-content pre code.g {
      color: #050
    }

    #sbo-rt-content pre code.l {
      color: #C60
    }

    #sbo-rt-content pre code.l {
      color: #F90
    }

    #sbo-rt-content pre code.n {
      color: #008
    }

    #sbo-rt-content pre code.nx {
      color: #008
    }

    #sbo-rt-content pre code.py {
      color: #96F
    }

    #sbo-rt-content pre code.p {
      color: #000
    }

    #sbo-rt-content pre code.x {
      color: #F06
    }

    #sbo-rt-content div.blockquote_sampler_toc {
      width: 95%;
      margin: 5px 5px 5px 10px !important
    }

    #sbo-rt-content div {
      font-family: serif;
      text-align: left
    }

    #sbo-rt-content .gray-background,
    #sbo-rt-content .reverse-video {
      background: #2E2E2E;
      color: #FFF
    }

    #sbo-rt-content .light-gray-background {
      background: #A0A0A0
    }

    #sbo-rt-content .preserve-whitespace {
      white-space: pre-wrap
    }

    #sbo-rt-content span.gray {
      color: #4C4C4C
    }

    #sbo-rt-content .width-10 {
      width: 10vw !important
    }

    #sbo-rt-content .width-20 {
      width: 20vw !important
    }

    #sbo-rt-content .width-30 {
      width: 30vw !important
    }

    #sbo-rt-content .width-40 {
      width: 40vw !important
    }

    #sbo-rt-content .width-50 {
      width: 50vw !important
    }

    #sbo-rt-content .width-60 {
      width: 60vw !important
    }

    #sbo-rt-content .width-70 {
      width: 70vw !important
    }

    #sbo-rt-content .width-80 {
      width: 80vw !important
    }

    #sbo-rt-content .width-90 {
      width: 90vw !important
    }

    #sbo-rt-content .width-full,
    #sbo-rt-content .width-100 {
      width: 100vw !important
    }

    #sbo-rt-content div[data-type="equation"].fifty-percent img {
      width: 50%
    }
  </style>
  <style type="text/css" id="font-styles">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-size: &lt;
      %=font_size %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="font-family">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-family: &lt;
      %=font_family %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="column-width">
    #sbo-rt-content {
      max-width: &lt;
      %=column_width %&gt;
      % !important;
      margin: 0 auto !important;
    }
  </style>

  <style type="text/css">
    body {
      background-color: #fbfbfb !important;
      margin: 1em;
    }

    #sbo-rt-content * {
      text-indent: 0pt !important;
    }

    #sbo-rt-content .bq {
      margin-right: 1em !important;
    }

    #sbo-rt-content * {
      word-wrap: break-word !important;
      word-break: break-word !important;
    }

    #sbo-rt-content table,
    #sbo-rt-content pre {
      overflow-x: unset !important;
      overflow: unset !important;
      overflow-y: unset !important;
      white-space: pre-wrap !important;
    }
  </style>
</head>

<body>
  <div id="sbo-rt-content">
    <section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 2. End-to-End Machine Learning Project">
      <div class="chapter" id="project_chapter">
        <h1><span class="label">Chapter 2. </span>End-to-End Machine Learning Project</h1>


        <p>In <a data-type="indexterm" data-primary="Machine Learning" data-secondary="process example"
            id="mlpe2" />this chapter, you will go through an example project end to end, pretending to be a recently
          hired data scientist in a real estate company.<sup><a data-type="noteref" id="idm139656389571952-marker"
              href="ch02.xhtml#idm139656389571952">1</a></sup> Here are the main steps you will go through:</p>
        <ol>
          <li>
            <p>Look at the big picture.</p>
          </li>
          <li>
            <p>Get the data.</p>
          </li>
          <li>
            <p>Discover and visualize the data to gain insights.</p>
          </li>
          <li>
            <p>Prepare the data for Machine Learning algorithms.</p>
          </li>
          <li>
            <p>Select a model and train it.</p>
          </li>
          <li>
            <p>Fine-tune your model.</p>
          </li>
          <li>
            <p>Present your solution.</p>
          </li>
          <li>
            <p>Launch, monitor, and maintain your system.</p>
          </li>

        </ol>






        <section data-type="sect1" data-pdf-bookmark="Working with Real Data">
          <div class="sect1" id="idm139656389563264">
            <h1>Working with Real Data</h1>

            <p>When <a data-type="indexterm" data-primary="data" data-secondary="working with real data"
                id="idm139656389561696" />you are learning about Machine Learning it is best to actually experiment with
              real-world data, not just artificial datasets. Fortunately, there are thousands of open datasets to choose
              from, ranging across all sorts of domains. Here are a few places you can look to get data:</p>

            <ul>
              <li>
                <p>Popular open data repositories:</p>

                <ul>
                  <li>
                    <p><a href="http://archive.ics.uci.edu/ml/">UC Irvine Machine Learning Repository</a></p>
                  </li>
                  <li>
                    <p><a href="https://www.kaggle.com/datasets">Kaggle datasets</a></p>
                  </li>
                  <li>
                    <p><a href="https://registry.opendata.aws/">Amazon’s AWS datasets</a></p>
                  </li>
                </ul>
              </li>
              <li>
                <p>Meta portals (they list open data repositories):</p>

                <ul>
                  <li>
                    <p><a href="http://dataportals.org/"><em class="hyperlink">http://dataportals.org/</em></a></p>
                  </li>
                  <li>
                    <p><a href="http://opendatamonitor.eu/"><em class="hyperlink">http://opendatamonitor.eu/</em></a>
                    </p>
                  </li>
                  <li>
                    <p><a href="http://quandl.com/"><em class="hyperlink">http://quandl.com/</em></a></p>
                  </li>
                </ul>
              </li>
              <li>
                <p>Other pages listing many popular open data repositories:</p>

                <ul>
                  <li>
                    <p><a href="https://homl.info/9">Wikipedia’s list of Machine Learning datasets</a></p>
                  </li>
                  <li>
                    <p><a href="https://homl.info/10">Quora.com question</a></p>
                  </li>
                  <li>
                    <p><a href="https://www.reddit.com/r/datasets">Datasets subreddit</a></p>
                  </li>
                </ul>
              </li>
            </ul>

            <p>In this chapter we chose the California Housing Prices dataset from the StatLib repository<sup><a
                  data-type="noteref" id="idm139656389542256-marker" href="ch02.xhtml#idm139656389542256">2</a></sup>
              (see <a data-type="xref" href="#california_housing_prices_plot">Figure 2-1</a>). This dataset was based on
              data from the 1990 California census. It is not exactly recent (you could still afford a nice house in the
              Bay Area at the time), but it has many qualities for learning, so we will pretend it is recent data. We
              also added a categorical attribute and removed a few features for teaching purposes.</p>

            <figure class="smallerseventy">
              <div id="california_housing_prices_plot" class="figure">
                <img src="mlst_0201.png" alt="mlst 0201" width="2721" height="2002" />
                <h6><span class="label">Figure 2-1. </span>California housing prices</h6>
              </div>
            </figure>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Look at the Big Picture">
          <div class="sect1" id="idm139656389537424">
            <h1>Look at the Big Picture</h1>

            <p>Welcome to Machine Learning Housing Corporation! The first task you are asked to perform is to build a
              model of housing prices in California using the California census data. This data has metrics such as the
              population, median income, median housing price, and so on for each block group in California. Block
              groups are the smallest geographical unit for which the US Census Bureau publishes sample data (a block
              group typically has a population of 600 to 3,000 people). We will just call them “districts” for short.
            </p>

            <p>Your model should learn from this data and be able to predict the median housing price in any district,
              given all the other metrics.</p>
            <div data-type="tip">
              <h6>Tip</h6>
              <p>Since you are a well-organized data scientist, the first thing you do is to pull out your <a
                  data-type="indexterm" data-primary="Machine Learning" data-secondary="project checklist"
                  id="idm139656389533632" />Machine Learning project checklist. You can start with the one in Appendix
                B; it should work reasonably well for most Machine Learning projects but make sure to adapt it to your
                needs. In this chapter we will go through many checklist items, but we will also skip a few, either
                because they are self-explanatory or because they will be discussed in later chapters.</p>
            </div>








            <section data-type="sect2" data-pdf-bookmark="Frame the Problem">
              <div class="sect2" id="idm139656389531888">
                <h2>Frame the Problem</h2>

                <p>The <a data-type="indexterm" data-primary="framing a problem" id="fap2" />first question to ask your
                  boss is what exactly is the business objective; building a model is probably not the end goal. How
                  does the company expect to use and benefit from this model? This is important because it will
                  determine how you frame the problem, what algorithms you will select, what performance measure you
                  will use to evaluate your model, and how much effort you should spend tweaking it.</p>

                <p>Your boss answers that your model’s output (a prediction of a district’s median housing price) will
                  be fed to another Machine Learning system (see <a data-type="xref"
                    href="#house_pricing_pipeline_diagram">Figure 2-2</a>), along with many other
                  <em>signals</em>.<sup><a data-type="noteref" id="idm139656389526864-marker"
                      href="ch02.xhtml#idm139656389526864">3</a></sup> This downstream system will determine whether it
                  is worth investing in a given area or not. Getting this right is critical, as it directly affects
                  revenue.</p>

                <figure>
                  <div id="house_pricing_pipeline_diagram" class="figure">
                    <img src="mlst_0202.png" alt="mlst 0202" width="2478" height="805" />
                    <h6><span class="label">Figure 2-2. </span>A Machine Learning pipeline for real estate investments
                    </h6>
                  </div>
                </figure>
                <aside data-type="sidebar" epub:type="sidebar">
                  <div class="sidebar" id="idm139656389523424">
                    <h5>Pipelines</h5>
                    <p>A <a data-type="indexterm" data-primary="data pipeline" id="idm139656389522096" /><a
                        data-type="indexterm" data-primary="pipelines" id="idm139656389521360" />sequence of data
                      processing <em>components</em> is called a data <em>pipeline</em>. Pipelines are very common in
                      Machine Learning systems, since there is a lot of data to manipulate and many data transformations
                      to apply.</p>

                    <p>Components typically run asynchronously. Each component pulls in a large amount of data,
                      processes it, and spits out the result in another data store, and then some time later the next
                      component in the pipeline pulls this data and spits out its own output, and so on. Each component
                      is fairly self-contained: the interface between components is simply the data store. This makes
                      the system quite simple to grasp (with the help of a data flow graph), and different teams can
                      focus on different components. Moreover, if a component breaks down, the downstream components can
                      often continue to run normally (at least for a while) by just using the last output from the
                      broken component. This makes the architecture quite robust.</p>

                    <p>On the other hand, a broken component can go unnoticed for some time if proper monitoring is not
                      implemented. The data gets stale and the overall system’s performance drops.</p>
                  </div>
                </aside>

                <p>The next question to ask is what the current solution looks like (if any). It will often give you a
                  reference performance, as well as insights on how to solve the problem. Your boss answers that the
                  district housing prices are currently estimated manually by experts: a team gathers up-to-date
                  information about a district, and when they cannot get the median housing price, they estimate it
                  using complex rules.</p>

                <p>This is costly and time-consuming, and their estimates are not great; in cases where they manage to
                  find out the actual median housing price, they often realize that their estimates were off by more
                  than 20%. This is why the company thinks that it would be useful to train a model to predict a
                  district’s median housing price given other data about that district. The census data looks like a
                  great dataset to exploit for this purpose, since it includes the median housing prices of thousands of
                  districts, as well as other data.</p>

                <p>Okay, with all this information you are now ready to start designing your system. First, you need to
                  frame the problem: is it supervised, unsupervised, or Reinforcement Learning? Is it a classification
                  task, a regression task, or something else? Should you use batch learning or online learning
                  techniques? Before you read on, pause and try to answer these questions for yourself.</p>

                <p>Have you found the answers? Let’s see: it is clearly a typical supervised learning task since you are
                  <a data-type="indexterm" data-primary="labels" id="idm139656389514288" />given <em>labeled</em>
                  training examples (each instance comes with the expected output, i.e., the district’s median housing
                  price). Moreover, it is also a typical regression task, since you are asked to predict a value. More
                  specifically, this is <a data-type="indexterm" data-primary="multiple regression"
                    id="idm139656389512800" />a <em>multiple regression</em> problem since the system will use multiple
                  features to make a prediction (it will use the district’s population, the median income, etc.). It is
                  also a <a data-type="indexterm" data-primary="univariate regression"
                    id="idm139656389511376" /><em>univariate regression</em> problem since we are only trying to predict
                  a single value for each district. If we were trying to predict multiple values per district, it would
                  be a <a data-type="indexterm" data-primary="multivariate regression"
                    id="idm139656389510112" /><em>multivariate regression</em> problem. Finally, there is no continuous
                  flow of data coming in the system, there is no particular need to adjust to changing data rapidly, and
                  the data is small enough to fit in memory, so plain batch learning should do just fine.</p>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>If the data was huge, you could either split your batch learning work across multiple servers
                    (using <a data-type="indexterm" data-primary="MapReduce" id="idm139656389507776" />the
                    <em>MapReduce</em> technique), or you could use an online learning <a data-type="indexterm"
                      data-primary="framing a problem" data-startref="fap2" id="idm139656389506528" />technique instead.
                  </p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Select a Performance Measure">
              <div class="sect2" id="select_a_performance_measure">
                <h2>Select a Performance Measure</h2>

                <p>Your <a data-type="indexterm" data-primary="performance measures" id="pm2" />next step is to select a
                  performance measure. A typical performance measure for regression problems is the <a
                    data-type="indexterm" data-primary="Root Mean Square Error (RMSE)" id="rmse2" />Root Mean Square
                  Error (RMSE). It gives an idea of how much error the system typically makes in its predictions, with a
                  higher weight for large errors. <a data-type="xref" href="#rmse_equation">Equation 2-1</a> shows the
                  mathematical formula to compute the RMSE.</p>
                <div id="rmse_equation" data-type="equation">
                  <h5><span class="label">Equation 2-1. </span>Root Mean Square Error (RMSE)</h5><math
                    xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mrow>
                      <mtext>RMSE</mtext>
                      <mrow>
                        <mo>(</mo>
                        <mi mathvariant="bold">X</mi>
                        <mo>,</mo>
                        <mi>h</mi>
                        <mo>)</mo>
                      </mrow>
                      <mo>=</mo>
                      <msqrt>
                        <mrow>
                          <mfrac>
                            <mn>1</mn>
                            <mi>m</mi>
                          </mfrac>
                          <munderover>
                            <mo>∑</mo>
                            <mrow>
                              <mi>i</mi>
                              <mo>=</mo>
                              <mn>1</mn>
                            </mrow>
                            <mi>m</mi>
                          </munderover>
                          <msup>
                            <mfenced separators="" open="(" close=")">
                              <mi>h</mi>
                              <mrow>
                                <mo>(</mo>
                                <msup>
                                  <mi mathvariant="bold">x</mi>
                                  <mrow>
                                    <mo>(</mo>
                                    <mi>i</mi>
                                    <mo>)</mo>
                                  </mrow>
                                </msup>
                                <mo>)</mo>
                              </mrow>
                              <mo>-</mo>
                              <msup>
                                <mi>y</mi>
                                <mrow>
                                  <mo>(</mo>
                                  <mi>i</mi>
                                  <mo>)</mo>
                                </mrow>
                              </msup>
                            </mfenced>
                            <mn>2</mn>
                          </msup>
                        </mrow>
                      </msqrt>
                    </mrow>
                  </math>
                </div>
                <aside data-type="sidebar" epub:type="sidebar" class="pagebreak-before less_space">
                  <div class="sidebar" id="notations">
                    <h5>Notations</h5>
                    <p>This equation introduces several very common <a data-type="indexterm"
                        data-primary="Machine Learning" data-secondary="notations" id="ml2n" /><a data-type="indexterm"
                        data-primary="notations" id="n2" />Machine Learning notations that we will use throughout this
                      book:</p>

                    <ul>
                      <li>
                        <p><em>m</em> is the number of instances in the dataset you are measuring the RMSE on.</p>

                        <ul>
                          <li>
                            <p>For example, if you are evaluating the RMSE on a validation set of 2,000 districts, then
                              <em>m</em> = 2,000.</p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p><strong>x</strong><sup><em>(i)</em></sup> is a vector of all the feature values (excluding
                          the label) of the <em>i</em><sup><em>th</em></sup> instance in the dataset, and
                          <em>y</em><sup><em>(i)</em></sup> is its label (the desired output value for that instance).
                        </p>

                        <ul>
                          <li>
                            <p>For example, if the first district in the dataset is located at longitude –118.29°,
                              latitude 33.91°, and it has 1,416 inhabitants with a median income of $38,372, and the
                              median house value is $156,400 (ignoring the other features for now), then:</p>
                            <div class="fifty-percent" data-type="equation">
                              <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                                <mrow>
                                  <msup>
                                    <mi mathvariant="bold">x</mi>
                                    <mrow>
                                      <mo>(</mo>
                                      <mn>1</mn>
                                      <mo>)</mo>
                                    </mrow>
                                  </msup>
                                  <mo>=</mo>
                                  <mfenced open="(" close=")">
                                    <mtable>
                                      <mtr>
                                        <mtd>
                                          <mrow>
                                            <mo>-</mo>
                                            <mn>118</mn>
                                            <mo>.</mo>
                                            <mn>29</mn>
                                          </mrow>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <mrow>
                                            <mn>33</mn>
                                            <mo>.</mo>
                                            <mn>91</mn>
                                          </mrow>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <mrow>
                                            <mn>1</mn>
                                            <mo>,</mo>
                                            <mn>416</mn>
                                          </mrow>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <mrow>
                                            <mn>38</mn>
                                            <mo>,</mo>
                                            <mn>372</mn>
                                          </mrow>
                                        </mtd>
                                      </mtr>
                                    </mtable>
                                  </mfenced>
                                </mrow>
                              </math>
                            </div>

                            <p>and:</p>
                            <div data-type="equation">
                              <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                                <mrow>
                                  <msup>
                                    <mi>y</mi>
                                    <mrow>
                                      <mo>(</mo>
                                      <mn>1</mn>
                                      <mo>)</mo>
                                    </mrow>
                                  </msup>
                                  <mo>=</mo>
                                  <mn>156</mn>
                                  <mo>,</mo>
                                  <mn>400</mn>
                                </mrow>
                              </math>
                            </div>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p><strong>X</strong> is a matrix containing all the feature values (excluding labels) of all
                          instances in the dataset. There is one row per instance and the
                          <em>i</em><sup><em>th</em></sup> row is equal to the transpose of
                          <strong>x</strong><sup><em>(i)</em></sup>, noted
                          (<strong>x</strong><sup><em>(i)</em></sup>)<sup><em>T</em></sup>.<sup><a data-type="noteref"
                              id="idm139656389441280-marker" href="ch02.xhtml#idm139656389441280">4</a></sup></p>

                        <ul>
                          <li>
                            <p>For example, if the first district is as just described, then the matrix
                              <strong>X</strong> looks like this:</p>
                            <div data-type="equation">
                              <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                                <mrow>
                                  <mi mathvariant="bold">X</mi>
                                  <mo>=</mo>
                                  <mfenced open="(" close=")">
                                    <mtable>
                                      <mtr>
                                        <mtd>
                                          <msup>
                                            <mrow>
                                              <mo>(</mo>
                                              <msup>
                                                <mi mathvariant="bold">x</mi>
                                                <mrow>
                                                  <mo>(</mo>
                                                  <mn>1</mn>
                                                  <mo>)</mo>
                                                </mrow>
                                              </msup>
                                              <mo>)</mo>
                                            </mrow>
                                            <mi>T</mi>
                                          </msup>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <msup>
                                            <mrow>
                                              <mo>(</mo>
                                              <msup>
                                                <mi mathvariant="bold">x</mi>
                                                <mrow>
                                                  <mo>(</mo>
                                                  <mn>2</mn>
                                                  <mo>)</mo>
                                                </mrow>
                                              </msup>
                                              <mo>)</mo>
                                            </mrow>
                                            <mi>T</mi>
                                          </msup>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <mo>⋮</mo>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <msup>
                                            <mrow>
                                              <mo>(</mo>
                                              <msup>
                                                <mi mathvariant="bold">x</mi>
                                                <mrow>
                                                  <mo>(</mo>
                                                  <mn>1999</mn>
                                                  <mo>)</mo>
                                                </mrow>
                                              </msup>
                                              <mo>)</mo>
                                            </mrow>
                                            <mi>T</mi>
                                          </msup>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <msup>
                                            <mrow>
                                              <mo>(</mo>
                                              <msup>
                                                <mi mathvariant="bold">x</mi>
                                                <mrow>
                                                  <mo>(</mo>
                                                  <mn>2000</mn>
                                                  <mo>)</mo>
                                                </mrow>
                                              </msup>
                                              <mo>)</mo>
                                            </mrow>
                                            <mi>T</mi>
                                          </msup>
                                        </mtd>
                                      </mtr>
                                    </mtable>
                                  </mfenced>
                                  <mo>=</mo>
                                  <mfenced open="(" close=")">
                                    <mtable>
                                      <mtr>
                                        <mtd>
                                          <mrow>
                                            <mo>-</mo>
                                            <mn>118</mn>
                                            <mo>.</mo>
                                            <mn>29</mn>
                                          </mrow>
                                        </mtd>
                                        <mtd>
                                          <mrow>
                                            <mn>33</mn>
                                            <mo>.</mo>
                                            <mn>91</mn>
                                          </mrow>
                                        </mtd>
                                        <mtd>
                                          <mrow>
                                            <mn>1</mn>
                                            <mo>,</mo>
                                            <mn>416</mn>
                                          </mrow>
                                        </mtd>
                                        <mtd>
                                          <mrow>
                                            <mn>38</mn>
                                            <mo>,</mo>
                                            <mn>372</mn>
                                          </mrow>
                                        </mtd>
                                      </mtr>
                                      <mtr>
                                        <mtd>
                                          <mo>⋮</mo>
                                        </mtd>
                                        <mtd>
                                          <mo>⋮</mo>
                                        </mtd>
                                        <mtd>
                                          <mo>⋮</mo>
                                        </mtd>
                                        <mtd>
                                          <mo>⋮</mo>
                                        </mtd>
                                      </mtr>
                                    </mtable>
                                  </mfenced>
                                </mrow>
                              </math>
                            </div>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p><em>h</em> is your system’s prediction function, also called <a data-type="indexterm"
                            data-primary="hypothesis" id="idm139656389397344" />a <em>hypothesis</em>. When your system
                          is given an <a data-type="indexterm" data-primary="feature vector"
                            id="idm139656389396096" />instance’s feature vector
                          <strong>x</strong><sup><em>(i)</em></sup>, it outputs a predicted value
                          <em>ŷ</em><sup><em>(i)</em></sup> = <em>h</em>(<strong>x</strong><sup><em>(i)</em></sup>) for
                          that instance (<em>ŷ</em> is pronounced “y-hat”).</p>

                        <ul>
                          <li>
                            <p>For example, if your system predicts that the median housing price in the first district
                              is $158,400, then <em>ŷ</em><sup>(1)</sup> = <em>h</em>(<strong>x</strong><sup>(1)</sup>)
                              = 158,400. The prediction error for this district is <em>ŷ</em><sup>(1)</sup> –
                              <em>y</em><sup>(1)</sup> = 2,000.</p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p>RMSE(<strong>X</strong>,<em>h</em>) is the <a data-type="indexterm"
                            data-primary="cost function" id="idm139656389385344" />cost function measured on the set of
                          examples using your hypothesis <em>h</em>.</p>
                      </li>
                    </ul>

                    <p>We use lowercase italic font for scalar values (such as <em>m</em> or
                      <em>y</em><sup><em>(i)</em></sup>) and function names (such as <em>h</em>), lowercase bold font
                      for vectors (such as <strong>x</strong><sup><em>(i)</em></sup>), and uppercase <a
                        data-type="indexterm" data-primary="Machine Learning" data-secondary="notations"
                        data-startref="ml2n" id="idm139656389380512" /><a data-type="indexterm" data-primary="notations"
                        data-startref="n2" id="idm139656389379264" />bold font for matrices (such as
                      <strong>X</strong>).</p>
                  </div>
                </aside>

                <p>Even though the RMSE is generally the preferred performance measure for regression tasks, in some
                  contexts you may prefer to use another function. For example, suppose that there are many outlier
                  districts. In that case, you may consider using <a data-type="indexterm"
                    data-primary="Mean Absolute Error (MAE)" id="mae2" /><a data-type="indexterm"
                    data-primary="Average Absolute Deviation" id="idm139656389376240" />the <em>Mean Absolute Error</em>
                  (also called the Average Absolute Deviation; see <a data-type="xref" href="#mae_equation">Equation
                    2-2</a>):</p>
                <div id="mae_equation" data-type="equation">
                  <h5><span class="label">Equation 2-2. </span>Mean Absolute Error</h5>
                  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <mrow>
                      <mtext>MAE</mtext>
                      <mrow>
                        <mo>(</mo>
                        <mi mathvariant="bold">X</mi>
                        <mo>,</mo>
                        <mi>h</mi>
                        <mo>)</mo>
                      </mrow>
                      <mo>=</mo>
                      <mfrac>
                        <mn>1</mn>
                        <mi>m</mi>
                      </mfrac>
                      <munderover>
                        <mo>∑</mo>
                        <mrow>
                          <mi>i</mi>
                          <mo>=</mo>
                          <mn>1</mn>
                        </mrow>
                        <mi>m</mi>
                      </munderover>
                      <mfenced separators="" open="|" close="|">
                        <mi>h</mi>
                        <mrow>
                          <mo>(</mo>
                          <msup>
                            <mi mathvariant="bold">x</mi>
                            <mrow>
                              <mo>(</mo>
                              <mi>i</mi>
                              <mo>)</mo>
                            </mrow>
                          </msup>
                          <mo>)</mo>
                        </mrow>
                        <mo>-</mo>
                        <msup>
                          <mi>y</mi>
                          <mrow>
                            <mo>(</mo>
                            <mi>i</mi>
                            <mo>)</mo>
                          </mrow>
                        </msup>
                      </mfenced>
                    </mrow>
                  </math>
                </div>

                <p>Both the RMSE and the MAE are ways to measure the distance between two vectors: the vector of
                  predictions and the vector of target values. Various distance measures, or <em>norms</em>, <a
                    data-type="indexterm" data-primary="norms" id="idm139656389355568" />are possible:</p>

                <ul>
                  <li>
                    <p>Computing the root of a sum of squares (RMSE) corresponds to the <em>Euclidean norm</em>: it <a
                        data-type="indexterm" data-primary="Euclidean norm" id="idm139656389352928" />is the notion of
                      distance you are familiar with. It <a data-type="indexterm" data-primary="ℓ 2 norm"
                        id="idm139656389352000" />is also called the ℓ<sub>2</sub> <em>norm</em>, noted ∥ ·
                      ∥<sub>2</sub> (or just ∥ · ∥).</p>
                  </li>
                  <li>
                    <p>Computing the sum of absolutes (MAE) corresponds to the ℓ<sub>1</sub> <em>norm</em>, <a
                        data-type="indexterm" data-primary="ℓ 1 norm" id="idm139656389347952" />noted ∥ · ∥<sub>1</sub>.
                      It is sometimes called <a data-type="indexterm" data-primary="Manhattan norm"
                        id="idm139656389346672" />the <em>Manhattan norm</em> because it measures the distance between
                      two points in a city if you can only travel along orthogonal city blocks.</p>
                  </li>
                  <li>
                    <p>More generally, <a data-type="indexterm" data-primary="ℓ k norm" id="idm139656389344560" />the
                      ℓ<sub><em>k</em></sub> <em>norm</em> of a vector <strong>v</strong> containing <em>n</em> elements
                      is defined as <math xmlns="http://www.w3.org/1998/Math/MathML">
                        <mrow>
                          <msub>
                            <mfenced open="∥" close="∥">
                              <mi>𝐯</mi>
                            </mfenced>
                            <mi>k</mi>
                          </msub>
                          <mo>=</mo>
                          <msup>
                            <mrow>
                              <mo>(</mo>
                              <msup>
                                <mfenced separators="" open="|" close="|">
                                  <msub>
                                    <mi>v</mi>
                                    <mn>0</mn>
                                  </msub>
                                </mfenced>
                                <mi>k</mi>
                              </msup>
                              <mo>+</mo>
                              <msup>
                                <mfenced separators="" open="|" close="|">
                                  <msub>
                                    <mi>v</mi>
                                    <mn>1</mn>
                                  </msub>
                                </mfenced>
                                <mi>k</mi>
                              </msup>
                              <mo>+</mo>
                              <mo>⋯</mo>
                              <mo>+</mo>
                              <msup>
                                <mfenced separators="" open="|" close="|">
                                  <msub>
                                    <mi>v</mi>
                                    <mi>n</mi>
                                  </msub>
                                </mfenced>
                                <mi>k</mi>
                              </msup>
                              <mo>)</mo>
                            </mrow>
                            <mfrac>
                              <mn>1</mn>
                              <mi>k</mi>
                            </mfrac>
                          </msup>
                        </mrow>
                      </math>. ℓ<sub>0</sub> just <a data-type="indexterm" data-primary="ℓ 0 norm"
                        id="idm139656389326352" />gives the number of non-zero elements in the vector, and ℓ<sub>∞</sub>
                      <a data-type="indexterm" data-primary="ℓ ∞ norm" id="idm139656389325024" />gives the maximum
                      absolute value in the vector.</p>
                  </li>
                  <li>
                    <p>The higher the norm index, the more it focuses on large values and neglects small ones. This is
                      why the RMSE is more sensitive to outliers than the MAE. But when outliers are exponentially rare
                      (like in a bell-shaped curve), the RMSE performs very well and is <a data-type="indexterm"
                        data-primary="performance measures" data-startref="pm2" id="idm139656389323248" /><a
                        data-type="indexterm" data-primary="Root Mean Square Error (RMSE)" data-startref="rmse2"
                        id="idm139656389322272" /><a data-type="indexterm" data-primary="Mean Absolute Error (MAE)"
                        data-startref="mae2" id="idm139656389321264" />generally preferred.</p>
                  </li>
                </ul>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Check the Assumptions">
              <div class="sect2" id="idm139656389319792">
                <h2>Check the Assumptions</h2>

                <p>Lastly, <a data-type="indexterm" data-primary="assumptions, checking" id="idm139656389318464" />it is
                  good practice to list and verify the assumptions that were made so far (by you or others); this can
                  catch serious issues early on. For example, the district prices that your system outputs are going to
                  be fed into a downstream Machine Learning system, and we assume that these prices are going to be used
                  as such. But what if the downstream system actually converts the prices into categories (e.g.,
                  “cheap,” “medium,” or “expensive”) and then uses those categories instead of the prices themselves? In
                  this case, getting the price perfectly right is not important at all; your system just needs to get
                  the category right. If that’s so, then the problem should have been framed as a classification task,
                  not a regression task. You don’t want to find this out after working on a regression system for
                  months.</p>

                <p>Fortunately, after talking with the team in charge of the downstream system, you are confident that
                  they do indeed need the actual prices, not just categories. Great! You’re all set, the lights are
                  green, and you can start coding now!</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Get the Data">
          <div class="sect1" id="idm139656389315856">
            <h1>Get the Data</h1>

            <p>It’s <a data-type="indexterm" data-primary="data" data-secondary="creating workspace for" id="d2cwf" /><a
                data-type="indexterm" data-primary="workspace directory" id="wd2" />time to get your hands dirty. Don’t
              hesitate to pick up your laptop and walk through the following code examples in a Jupyter notebook. The
              full Jupyter notebook is available at <a href="https://github.com/ageron/handson-ml2"><em
                  class="hyperlink">https://github.com/ageron/handson-ml2</em></a>.</p>








            <section data-type="sect2" data-pdf-bookmark="Create the Workspace">
              <div class="sect2" id="idm139656389310560">
                <h2>Create the Workspace</h2>

                <p>First you will need to have Python installed. It is probably already installed on your system. If
                  not, you can get it at <a href="https://www.python.org/"><em
                      class="hyperlink">https://www.python.org/</em></a>.<sup><a data-type="noteref"
                      id="idm139656389307280-marker" href="ch02.xhtml#idm139656389307280">5</a></sup></p>

                <p>Next you need to create a workspace directory for your Machine Learning code and datasets. Open a
                  terminal and type the following commands (after the <code>$</code> prompts):</p>

                <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ export ML_PATH="$HOME/ml"      # You can change the path if you prefer</code>
<code class="go">$ mkdir -p $ML_PATH</code></pre>

                <p>You will need a number of Python modules: <a data-type="indexterm" data-primary="Jupyter"
                    id="idm139656389282832" /><a data-type="indexterm" data-primary="NumPy" id="idm139656389282224" /><a
                    data-type="indexterm" data-primary="Pandas" id="idm139656389281584" /><a data-type="indexterm"
                    data-primary="Matplotlib" id="idm139656389303504" /><a data-type="indexterm"
                    data-primary="Scikit-Learn" id="idm139656389302832" />Jupyter, NumPy, Pandas, Matplotlib, and
                  Scikit-Learn. If you already have Jupyter running with all these modules installed, you can safely
                  skip to <a data-type="xref" href="#download_the_data">“Download the Data”</a>. If you don’t have them
                  yet, there are many ways to install them (and their dependencies). You can use your system’s packaging
                  system (e.g., apt-get on Ubuntu, or MacPorts or HomeBrew on macOS), install a Scientific Python
                  distribution such as Anaconda <a data-type="indexterm" data-primary="Anaconda"
                    id="idm139656389300800" />and use its packaging system, or just use Python’s own packaging system,
                  <a data-type="indexterm" data-primary="pip" id="idm139656389300000" /><a data-type="indexterm"
                    data-primary="Python" data-secondary="pip" id="idm139656389299328" />pip, which is included by
                  default with the Python binary installers (since Python 2.7.9).<sup><a data-type="noteref"
                      id="idm139656389298144-marker" href="ch02.xhtml#idm139656389298144">6</a></sup> You can check to
                  see if pip is installed by typing the following command:</p>

                <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ pip3 --version</code>
<code class="go">pip 18.0 from [...]/lib/python3.6/site-packages (python 3.6)</code></pre>

                <p>You should make sure you have a recent version of pip installed. To upgrade the pip module,
                  type:<sup><a data-type="noteref" id="idm139656389223232-marker"
                      href="ch02.xhtml#idm139656389223232">7</a></sup></p>

                <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ pip3 install --upgrade pip</code>
<code class="go">Collecting pip</code>
<code class="go">[...]</code>
<code class="go">Successfully installed pip-18.0</code></pre>
                <aside data-type="sidebar" epub:type="sidebar">
                  <div class="sidebar" id="idm139656389274192">
                    <h5>Creating an Isolated Environment</h5>
                    <p>If <a data-type="indexterm" data-primary="isolated environment" id="ie2" /><a
                        data-type="indexterm" data-primary="Python" data-secondary="isolated environment in"
                        id="p2iei" />you would like to work in an isolated environment (which is strongly recommended so
                      you can work on different projects without having conflicting library versions), install
                      virtualenv by running the following pip command:</p>

                    <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ pip3 install --user --upgrade virtualenv</code>
<code class="go">Collecting virtualenv</code>
<code class="go">[...]</code>
<code class="go">Successfully installed virtualenv</code></pre>

                    <p>Now you can create an isolated Python environment by typing:</p>

                    <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ cd $ML_PATH</code>
<code class="go">$ virtualenv env</code>
<code class="go">Using base prefix '[...]'</code>
<code class="go">New python executable in [...]/ml/env/bin/python3.6</code>
<code class="go">Also creating executable in [...]/ml/env/bin/python</code>
<code class="go">Installing setuptools, pip, wheel...done.</code></pre>

                    <p>Now every time you want to activate this environment, just open a terminal and type:</p>

                    <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ cd $ML_PATH</code>
<code class="go">$ source env/bin/activate</code></pre>

                    <p>While the environment is active, any package you install using pip will be installed in this
                      isolated environment, and Python will only have access to these packages (if you also want access
                      to the system’s site packages, you should create the environment using virtualenv’s
                      <code>--system-site-packages</code> option). Check out virtualenv’s documentation for more <a
                        data-type="indexterm" data-primary="isolated environment" data-startref="ie2"
                        id="idm139656389238496" /><a data-type="indexterm" data-primary="Python"
                        data-secondary="isolated environment in" data-startref="p2iei"
                        id="idm139656389237472" />information.</p>
                  </div>
                </aside>

                <p>Now you can install all the required modules and their dependencies using this simple pip command (if
                  you are not using a virtualenv, you will need administrator rights, or to add the <code>--user</code>
                  option):</p>

                <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ pip3 install --upgrade jupyter matplotlib numpy pandas scipy scikit-learn</code>
<code class="go">Collecting jupyter</code>
<code class="go">  Downloading jupyter-1.0.0-py2.py3-none-any.whl</code>
<code class="go">Collecting matplotlib</code>
<code class="go">  [...]</code></pre>

                <p>To check your installation, try to import every module like this:</p>

                <pre data-type="programlisting"
                  data-code-language="shell-session"><code class="go">$ python3 -c "import jupyter, matplotlib, numpy, pandas, scipy, sklearn"</code></pre>

                <p>There should be no output and no error. Now you can fire up <a data-type="indexterm"
                    data-primary="Jupyter" id="idm139656389270384" />Jupyter by typing:</p>

                <pre data-type="programlisting" data-code-language="shell-session"><code class="go">$ jupyter notebook</code>
<code class="go">[I 15:24 NotebookApp] Serving notebooks from local directory: [...]/ml</code>
<code class="go">[I 15:24 NotebookApp] 0 active kernels</code>
<code class="go">[I 15:24 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/</code>
<code class="go">[I 15:24 NotebookApp] Use Control-C to stop this server and shut down all</code>
<code class="go">kernels (twice to skip confirmation).</code></pre>

                <p>A Jupyter server is now running in your terminal, listening to port 8888. You can visit this server
                  by opening your web browser to <em>http://localhost:8888/</em> (this usually happens automatically
                  when the server starts). You should see your empty workspace directory (containing only the
                  <em>env</em> directory if you followed the preceding virtualenv instructions).</p>

                <p>Now create a new <a data-type="indexterm" data-primary="Python" data-secondary="notebooks in"
                    id="p2ni" />Python notebook by clicking on the New button and selecting the appropriate Python
                  version<sup><a data-type="noteref" id="idm139656389044480-marker"
                      href="ch02.xhtml#idm139656389044480">8</a></sup> (see <a data-type="xref"
                    href="#jupyter_empty_screenshot">Figure 2-3</a>).</p>

                <p>This does three things: first, it creates a new notebook file called <em>Untitled.ipynb</em> in your
                  workspace; second, it starts a Jupyter Python kernel to run this notebook; and third, it opens this
                  notebook in a new tab. You should start by renaming this notebook to “Housing” (this will
                  automatically rename the file to <em>Housing.ipynb</em>) by clicking Untitled and typing the new name.
                </p>

                <figure>
                  <div id="jupyter_empty_screenshot" class="figure">
                    <img src="mlst_0203.png" alt="mlst 0203" width="1425" height="712" />
                    <h6><span class="label">Figure 2-3. </span>Your workspace in Jupyter</h6>
                  </div>
                </figure>

                <p>A notebook contains a list of cells. Each cell can contain executable code or formatted text. Right
                  now the notebook contains only one empty code cell, labeled “In [1]:”. Try typing
                  <code><strong>print("Hello world!")</strong></code> in the cell, and click on the play button (see <a
                    data-type="xref" href="#jupyter_new_notebook_screenshot">Figure 2-4</a>) or press Shift-Enter. This
                  sends the current cell to this notebook’s Python kernel, which runs it and returns the output. The
                  result is displayed below the cell, and since we reached the end of the notebook, a new cell is
                  automatically created. Go through the User Interface Tour from Jupyter’s Help menu to learn the
                  basics.</p>

                <figure>
                  <div id="jupyter_new_notebook_screenshot" class="figure">
                    <img src="mlst_0204.png" alt="mlst 0204" width="1425" height="499" />
                    <h6><span class="label">Figure 2-4. </span>Hello world Python notebook</h6>
                  </div>
                </figure>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Download the Data">
              <div class="sect2" id="download_the_data">
                <h2>Download the Data</h2>

                <p>In <a data-type="indexterm" data-primary="data" data-secondary="creating workspace for"
                    data-startref="d2cwf" id="idm139656389039408" /><a data-type="indexterm"
                    data-primary="workspace directory" data-startref="wd2" id="idm139656389038128" /><a
                    data-type="indexterm" data-primary="Python" data-secondary="notebooks in" data-startref="p2ni"
                    id="idm139656389037184" /><a data-type="indexterm" data-primary="data" data-secondary="downloading"
                    id="d2d" />typical environments your data would be available in a relational database (or some other
                  common datastore) and spread across multiple tables/documents/files. To access it, you would first
                  need to get your credentials and access authorizations,<sup><a data-type="noteref"
                      id="idm139656389034368-marker" href="ch02.xhtml#idm139656389034368">9</a></sup> and familiarize
                  yourself with the data schema. In this project, however, things are much simpler: you will just
                  download a single compressed file, <em>housing.tgz</em>, which contains a comma-separated value (CSV)
                  file called <em>housing.csv</em> with all the data.</p>

                <p>You could use your web browser to download it, and run <code>tar xzf housing.tgz</code> to decompress
                  the file and extract the CSV file, but it is preferable to create a small function to do that. It is
                  useful in particular if data changes regularly, as it allows you to write a small script that you can
                  run whenever you need to fetch the latest data (or you can set up a scheduled job to do that
                  automatically at regular intervals). Automating the process of fetching the data is also useful if you
                  need to install the dataset on multiple machines.</p>

                <p>Here is the function to fetch the data:<sup><a data-type="noteref" id="idm139656389031136-marker"
                      href="ch02.xhtml#idm139656389031136">10</a></sup></p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">import</code> <code class="nn">os</code>
<code class="kn">import</code> <code class="nn">tarfile</code>
<code class="kn">from</code> <code class="nn">six.moves</code> <code class="kn">import</code> <code class="n">urllib</code>

<code class="n">DOWNLOAD_ROOT</code> <code class="o">=</code> <code class="s2">"https://raw.githubusercontent.com/ageron/handson-ml2/master/"</code>
<code class="n">HOUSING_PATH</code> <code class="o">=</code> <code class="n">os</code><code class="o">.</code><code class="n">path</code><code class="o">.</code><code class="n">join</code><code class="p">(</code><code class="s2">"datasets"</code><code class="p">,</code> <code class="s2">"housing"</code><code class="p">)</code>
<code class="n">HOUSING_URL</code> <code class="o">=</code> <code class="n">DOWNLOAD_ROOT</code> <code class="o">+</code> <code class="s2">"datasets/housing/housing.tgz"</code>

<code class="k">def</code> <code class="nf">fetch_housing_data</code><code class="p">(</code><code class="n">housing_url</code><code class="o">=</code><code class="n">HOUSING_URL</code><code class="p">,</code> <code class="n">housing_path</code><code class="o">=</code><code class="n">HOUSING_PATH</code><code class="p">):</code>
    <code class="k">if</code> <code class="ow">not</code> <code class="n">os</code><code class="o">.</code><code class="n">path</code><code class="o">.</code><code class="n">isdir</code><code class="p">(</code><code class="n">housing_path</code><code class="p">):</code>
        <code class="n">os</code><code class="o">.</code><code class="n">makedirs</code><code class="p">(</code><code class="n">housing_path</code><code class="p">)</code>
    <code class="n">tgz_path</code> <code class="o">=</code> <code class="n">os</code><code class="o">.</code><code class="n">path</code><code class="o">.</code><code class="n">join</code><code class="p">(</code><code class="n">housing_path</code><code class="p">,</code> <code class="s2">"housing.tgz"</code><code class="p">)</code>
    <code class="n">urllib</code><code class="o">.</code><code class="n">request</code><code class="o">.</code><code class="n">urlretrieve</code><code class="p">(</code><code class="n">housing_url</code><code class="p">,</code> <code class="n">tgz_path</code><code class="p">)</code>
    <code class="n">housing_tgz</code> <code class="o">=</code> <code class="n">tarfile</code><code class="o">.</code><code class="n">open</code><code class="p">(</code><code class="n">tgz_path</code><code class="p">)</code>
    <code class="n">housing_tgz</code><code class="o">.</code><code class="n">extractall</code><code class="p">(</code><code class="n">path</code><code class="o">=</code><code class="n">housing_path</code><code class="p">)</code>
    <code class="n">housing_tgz</code><code class="o">.</code><code class="n">close</code><code class="p">()</code></pre>

                <p>Now when you call <code>fetch_housing_data()</code>, it creates a <em>datasets/housing</em> directory
                  in your workspace, downloads the <em>housing.tgz</em> file, and extracts the <em>housing.csv</em> from
                  it in this directory.</p>

                <p>Now let’s load the data using <a data-type="indexterm" data-primary="Pandas"
                    id="idm139656388940672" />Pandas. Once again you should write a small function to load the data:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">import</code> <code class="nn">pandas</code> <code class="kn">as</code> <code class="nn">pd</code>

<code class="k">def</code> <code class="nf">load_housing_data</code><code class="p">(</code><code class="n">housing_path</code><code class="o">=</code><code class="n">HOUSING_PATH</code><code class="p">):</code>
    <code class="n">csv_path</code> <code class="o">=</code> <code class="n">os</code><code class="o">.</code><code class="n">path</code><code class="o">.</code><code class="n">join</code><code class="p">(</code><code class="n">housing_path</code><code class="p">,</code> <code class="s2">"housing.csv"</code><code class="p">)</code>
    <code class="k">return</code> <code class="n">pd</code><code class="o">.</code><code class="n">read_csv</code><code class="p">(</code><code class="n">csv_path</code><code class="p">)</code></pre>

                <p>This function returns a Pandas DataFrame object containing all the <a data-type="indexterm"
                    data-primary="data" data-secondary="downloading" data-startref="d2d" id="idm139656388938224" />data.
                </p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Take a Quick Look at the Data Structure">
              <div class="sect2" id="idm139656389047440">
                <h2>Take a Quick Look at the Data Structure</h2>

                <p>Let’s <a data-type="indexterm" data-primary="data structure" id="ds2" /><a data-type="indexterm"
                    data-primary="attributes" data-seealso="data structure" id="a2" />take a look at the top five rows
                  using the DataFrame’s <code>head()</code> method (see <a data-type="xref"
                    href="#housing_head_screenshot">Figure 2-5</a>).</p>

                <figure>
                  <div id="housing_head_screenshot" class="figure">
                    <img src="mlst_0205.png" alt="mlst 0205" width="1390" height="494" />
                    <h6><span class="label">Figure 2-5. </span>Top five rows in the dataset</h6>
                  </div>
                </figure>

                <p>Each row represents one district. There are 10 attributes (you can see the first 6 in the
                  screenshot): <code>longitude</code>, <code>latitude</code>, <code>housing_median_age</code>,
                  <code>total_rooms</code>, <code>total_bedrooms</code>, <code>population</code>,
                  <code>households</code>, <code>median_income</code>, <code>median_house_value</code>, and
                  <code>ocean_proximity</code>.</p>

                <p>The <code>info()</code> <a data-type="indexterm" data-primary="info()"
                    id="idm139656388898288" />method is useful to get a quick description of the data, in particular the
                  total number of rows, and each attribute’s type and number of non-null values (see <a data-type="xref"
                    href="#housing_info_screenshot">Figure 2-6</a>).</p>

                <figure>
                  <div id="housing_info_screenshot" class="figure">
                    <img src="mlst_0206.png" alt="mlst 0206" width="1306" height="579" />
                    <h6><span class="label">Figure 2-6. </span>Housing info</h6>
                  </div>
                </figure>

                <p>There are 20,640 instances in the dataset, which means that it is fairly small by Machine Learning
                  standards, but it’s perfect to get started. Notice that the <code>total_bedrooms</code> attribute has
                  only 20,433 non-null values, meaning that 207 districts are missing this feature. We will need to take
                  care of this later.</p>

                <p>All attributes are numerical, except the <code>ocean_proximity</code> field. Its type is
                  <code>object</code>, so it could hold any kind of Python object, but since you loaded this data from a
                  CSV file you know that it must be a text attribute. When you looked at the top five rows, you probably
                  noticed that the values in the <code>ocean_proximity</code> column were repetitive, which means that
                  it is probably a categorical attribute. You can find out what categories exist and how many districts
                  belong to each category by using the <code>value_counts()</code> <a data-type="indexterm"
                    data-primary="value_counts()" id="idm139656388890560" />method:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing</code><code class="p">[</code><code class="s">"ocean_proximity"</code><code class="p">]</code><code class="o">.</code><code class="n">value_counts</code><code class="p">()</code>
<code class="go">&lt;1H OCEAN     9136</code>
<code class="go">INLAND        6551</code>
<code class="go">NEAR OCEAN    2658</code>
<code class="go">NEAR BAY      2290</code>
<code class="go">ISLAND           5</code>
<code class="go">Name: ocean_proximity, dtype: int64</code></pre>

                <p>Let’s look at the other fields. The <code>describe()</code> <a data-type="indexterm"
                    data-primary="describe()" id="idm139656388845824" />method shows a summary of the numerical
                  attributes (<a data-type="xref" href="#housing_describe_screenshot">Figure 2-7</a>).</p>

                <figure>
                  <div id="housing_describe_screenshot" class="figure">
                    <img src="mlst_0207.png" alt="mlst 0207" width="1308" height="596" />
                    <h6><span class="label">Figure 2-7. </span>Summary of each numerical attribute</h6>
                  </div>
                </figure>

                <p class="pagebreak-before">The <code>count</code>, <code>mean</code>, <code>min</code>, and
                  <code>max</code> rows are self-explanatory. Note that the null values are ignored (so, for example,
                  <code>count</code> of <code>total_bedrooms</code> is 20,433, not 20,640). The <code>std</code> row
                  shows the <em>standard deviation</em>, which measures how dispersed the values are.<sup><a
                      data-type="noteref" id="idm139656388858672-marker"
                      href="ch02.xhtml#idm139656388858672">11</a></sup> The 25%, 50%, and 75% rows show the
                  corresponding <em>percentiles</em>: a <a data-type="indexterm" data-primary="percentiles"
                    id="idm139656388888912" />percentile indicates the value below which a given percentage of
                  observations in a group of observations falls. For example, 25% of the districts have a
                  <code>housing_median_age</code> lower than 18, while 50% are lower than 29 and 75% are lower than 37.
                  These are often called the 25<sup>th</sup> percentile (or 1<sup>st</sup> <em>quartile</em>), the
                  median, and the 75<sup>th</sup> percentile (or 3<sup>rd</sup> quartile).</p>

                <p>Another quick way to get a feel of the type of data you are dealing with is to plot a <a
                    data-type="indexterm" data-primary="histograms" id="h2" />histogram for each numerical attribute. A
                  histogram shows the number of instances (on the vertical axis) that have a given value range (on the
                  horizontal axis). You can either plot this one attribute at a time, or you can call the
                  <code>hist()</code> method on the whole dataset, and it will plot a histogram for each numerical
                  attribute (see <a data-type="xref" href="#attribute_histogram_plots">Figure 2-8</a>). For example, you
                  can see that slightly over 800 districts have a <code>median_house_value</code> equal to about
                  $100,000.</p>

                <pre data-type="programlisting" data-code-language="python"><code class="o">%</code><code class="n">matplotlib</code> <code class="n">inline</code>   <code class="c1"># only in a Jupyter notebook</code>
<code class="kn">import</code> <code class="nn">matplotlib.pyplot</code> <code class="kn">as</code> <code class="nn">plt</code>
<code class="n">housing</code><code class="o">.</code><code class="n">hist</code><code class="p">(</code><code class="n">bins</code><code class="o">=</code><code class="mi">50</code><code class="p">,</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">20</code><code class="p">,</code><code class="mi">15</code><code class="p">))</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>
                <div data-type="note" epub:type="note">
                  <h6>Note</h6>
                  <p>The <code>hist()</code> method relies on <a data-type="indexterm" data-primary="Matplotlib"
                      id="idm139656388630304" />Matplotlib, which in turn relies on a user-specified graphical backend
                    to draw on your screen. So before you can plot anything, you need to specify which backend
                    Matplotlib should use. The simplest option is to use <a data-type="indexterm" data-primary="Jupyter"
                      id="idm139656388629328" />Jupyter’s magic command <code>%matplotlib inline</code>. This tells
                    Jupyter to set up Matplotlib so it uses Jupyter’s own backend. Plots are then rendered within the
                    notebook itself. Note that calling <code>show()</code> is <a data-type="indexterm"
                      data-primary="show()" id="idm139656388627568" />optional in a Jupyter notebook, as Jupyter will
                    automatically display plots when a cell is executed.</p>
                </div>

                <figure>
                  <div id="attribute_histogram_plots" class="figure">
                    <img src="mlst_0208.png" alt="mlst 0208" width="5894" height="4390" />
                    <h6><span class="label">Figure 2-8. </span>A histogram for each numerical attribute</h6>
                  </div>
                </figure>

                <p>Notice a few things in these histograms:</p>
                <ol>
                  <li>
                    <p>First, the median income attribute does not look like it is expressed in US dollars (USD). After
                      checking with the team that collected the data, you are told that the data has been scaled and
                      capped at 15 (actually 15.0001) for higher median incomes, and at 0.5 (actually 0.4999) for lower
                      median incomes. The numbers represent roughly tens of thousands of dollars (e.g., 3 actually means
                      about $30,000). Working with <a data-type="indexterm" data-primary="preprocessed attributes"
                        id="idm139656388622720" /><a data-type="indexterm" data-primary="attributes"
                        data-secondary="preprocessed" id="idm139656388622016" />preprocessed attributes is common in
                      Machine Learning, and it is not necessarily a problem, but you should try to understand how the
                      data was computed.</p>
                  </li>
                  <li>
                    <p>The housing median age and the median house value were also capped. The latter may be a serious
                      problem since it is your <a data-type="indexterm" data-primary="attributes"
                        data-secondary="target" id="idm139656388619808" /><a data-type="indexterm"
                        data-primary="target attributes" id="idm139656388618832" />target attribute (your labels). Your
                      Machine Learning algorithms may learn that prices never go beyond that limit. You need to check
                      with your client team (the team that will use your system’s output) to see if this is a problem or
                      not. If they tell you that they need precise predictions even beyond $500,000, then you have
                      mainly two options:</p>
                    <ol>
                      <li>
                        <p>Collect proper labels for the districts whose labels were capped.</p>
                      </li>
                      <li>
                        <p>Remove those districts from the training set (and also from the test set, since your system
                          should not be evaluated poorly if it predicts values beyond $500,000).</p>
                      </li>

                    </ol>
                  </li>
                  <li>
                    <p>These attributes have very different scales. We will discuss this later in this chapter when we
                      explore feature scaling.</p>
                  </li>
                  <li>
                    <p>Finally, many histograms are <em>tail heavy</em>: <a data-type="indexterm"
                        data-primary="tail heavy" id="idm139656388613056" />they extend much farther to the right of the
                      median than to the left. This may make it a bit harder for some Machine Learning algorithms to
                      detect patterns. We will try transforming these attributes later on to have more bell-shaped
                      distributions.</p>
                  </li>

                </ol>

                <p>Hopefully you now have a better understanding of the kind of data you <a data-type="indexterm"
                    data-primary="data structure" data-startref="ds2" id="idm139656388611296" /><a data-type="indexterm"
                    data-primary="histograms" data-startref="h2" id="idm139656388610320" /><a data-type="indexterm"
                    data-primary="attributes" data-seealso="data structure" data-startref="a2"
                    id="idm139656388609376" />are dealing with.</p>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>Wait! Before you look at the data any further, you need to create a test set, put it aside, and
                    never look at it.</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Create a Test Set">
              <div class="sect2" id="create_a_test_set">
                <h2>Create a Test Set</h2>

                <p>It <a data-type="indexterm" data-primary="data" data-secondary="test-set creation" id="d2tsc" /><a
                    data-type="indexterm" data-primary="test set" id="tsod2" />may sound strange to voluntarily set
                  aside part of the data at this stage. After all, you have only taken a quick glance at the data, and
                  surely you should learn a whole lot more about it before you decide what algorithms to use, right?
                  This is true, but your brain is an amazing pattern detection system, which means that it is highly
                  prone to <a data-type="indexterm" data-primary="overfitting" id="idm139656388602032" />overfitting: if
                  you look at the test set, you may stumble upon some seemingly interesting pattern in the test data
                  that leads you to select a particular kind of Machine Learning model. When you estimate the
                  generalization error using the test set, your estimate will be too optimistic and you will launch a
                  system that will not perform as well as expected. This is <a data-type="indexterm"
                    data-primary="data snooping bias" id="idm139656388600848" />called <em>data snooping</em> bias.</p>

                <p>Creating a test set is theoretically quite simple: just pick some instances randomly, typically 20%
                  of the dataset, and set them aside:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">import</code> <code class="nn">numpy</code> <code class="kn">as</code> <code class="nn">np</code>

<code class="k">def</code> <code class="nf">split_train_test</code><code class="p">(</code><code class="n">data</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">):</code>
    <code class="n">shuffled_indices</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">random</code><code class="o">.</code><code class="n">permutation</code><code class="p">(</code><code class="nb">len</code><code class="p">(</code><code class="n">data</code><code class="p">))</code>
    <code class="n">test_set_size</code> <code class="o">=</code> <code class="nb">int</code><code class="p">(</code><code class="nb">len</code><code class="p">(</code><code class="n">data</code><code class="p">)</code> <code class="o">*</code> <code class="n">test_ratio</code><code class="p">)</code>
    <code class="n">test_indices</code> <code class="o">=</code> <code class="n">shuffled_indices</code><code class="p">[:</code><code class="n">test_set_size</code><code class="p">]</code>
    <code class="n">train_indices</code> <code class="o">=</code> <code class="n">shuffled_indices</code><code class="p">[</code><code class="n">test_set_size</code><code class="p">:]</code>
    <code class="k">return</code> <code class="n">data</code><code class="o">.</code><code class="n">iloc</code><code class="p">[</code><code class="n">train_indices</code><code class="p">],</code> <code class="n">data</code><code class="o">.</code><code class="n">iloc</code><code class="p">[</code><code class="n">test_indices</code><code class="p">]</code></pre>

                <p>You can then use this function like this:<sup><a data-type="noteref" id="idm139656388682624-marker"
                      href="ch02.xhtml#idm139656388682624">12</a></sup></p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">split_train_test</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="nb">len</code><code class="p">(</code><code class="n">train_set</code><code class="p">)</code>
<code class="go">16512</code>
<code class="gp">&gt;&gt;&gt; </code><code class="nb">len</code><code class="p">(</code><code class="n">test_set</code><code class="p">)</code>
<code class="go">4128</code></pre>

                <p>Well, this works, but it is not perfect: if you run the program again, it will generate a different
                  test set! Over time, you (or your Machine Learning algorithms) will get to see the whole dataset,
                  which is what you want to avoid.</p>

                <p>One solution is to save the test set on the first run and then load it in subsequent runs. Another
                  option is to set the random number generator’s seed (e.g., <code>np.random.seed(42)</code>)<sup><a
                      data-type="noteref" id="idm139656388572672-marker"
                      href="ch02.xhtml#idm139656388572672">13</a></sup> before calling
                  <code>np.random.permutation()</code>, so <a data-type="indexterm" data-primary="permutation()"
                    id="idm139656388571440" />that it always generates the same shuffled indices.</p>

                <p>But both these solutions will break next time you fetch an updated dataset. A common solution is to
                  use each instance’s identifier to decide whether or not it should go in the test set (assuming
                  instances have a unique and immutable identifier). For example, you could compute a hash of each
                  instance’s identifier and put that instance in the test set if the hash is lower or equal to 20% of
                  the maximum hash value. This ensures that the test set will remain consistent across multiple runs,
                  even if you refresh the dataset. The new test set will contain 20% of the new instances, but it will
                  not contain any instance that was previously in the training set. Here is a possible implementation:
                </p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">zlib</code> <code class="kn">import</code> <code class="n">crc32</code>

<code class="k">def</code> <code class="nf">test_set_check</code><code class="p">(</code><code class="n">identifier</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">crc32</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">int64</code><code class="p">(</code><code class="n">identifier</code><code class="p">))</code> <code class="o">&amp;</code> <code class="mh">0xffffffff</code> <code class="o">&lt;</code> <code class="n">test_ratio</code> <code class="o">*</code> <code class="mi">2</code><code class="o">**</code><code class="mi">32</code>

<code class="k">def</code> <code class="nf">split_train_test_by_id</code><code class="p">(</code><code class="n">data</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">,</code> <code class="n">id_column</code><code class="p">):</code>
    <code class="n">ids</code> <code class="o">=</code> <code class="n">data</code><code class="p">[</code><code class="n">id_column</code><code class="p">]</code>
    <code class="n">in_test_set</code> <code class="o">=</code> <code class="n">ids</code><code class="o">.</code><code class="n">apply</code><code class="p">(</code><code class="k">lambda</code> <code class="n">id_</code><code class="p">:</code> <code class="n">test_set_check</code><code class="p">(</code><code class="n">id_</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">))</code>
    <code class="k">return</code> <code class="n">data</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="o">~</code><code class="n">in_test_set</code><code class="p">],</code> <code class="n">data</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">in_test_set</code><code class="p">]</code></pre>

                <p>Unfortunately, the housing dataset does not have an identifier column. The simplest solution is to
                  use the row index as the ID:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing_with_id</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">reset_index</code><code class="p">()</code>   <code class="c1"># adds an `index` column</code>
<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">split_train_test_by_id</code><code class="p">(</code><code class="n">housing_with_id</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">,</code> <code class="s2">"index"</code><code class="p">)</code></pre>

                <p>If you use the row index as a unique identifier, you need to make sure that new data gets appended to
                  the end of the dataset, and no row ever gets deleted. If this is not possible, then you can try to use
                  the most stable features to build a unique identifier. For example, a district’s latitude and
                  longitude are guaranteed to be stable for a few million years, so you could combine them into an ID
                  like so:<sup><a data-type="noteref" id="idm139656388396304-marker"
                      href="ch02.xhtml#idm139656388396304">14</a></sup></p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing_with_id</code><code class="p">[</code><code class="s2">"id"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"longitude"</code><code class="p">]</code> <code class="o">*</code> <code class="mi">1000</code> <code class="o">+</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"latitude"</code><code class="p">]</code>
<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">split_train_test_by_id</code><code class="p">(</code><code class="n">housing_with_id</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">,</code> <code class="s2">"id"</code><code class="p">)</code></pre>

                <p>Scikit-Learn provides a few functions to split datasets into multiple subsets in various ways. The <a
                    data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.train_test_split()" id="idm139656388387312" />simplest
                  function is <code>train_test_split</code>, which does pretty much the same thing as the function
                  <code>split_train_test</code> defined earlier, with a couple of additional features. First there is a
                  <code>random_state</code> parameter that allows you to set the random generator seed as explained
                  previously, and second you can pass it multiple datasets with an identical number of rows, and it will
                  split them on the same indices (this is very useful, for example, if you have a separate DataFrame for
                  labels):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">train_test_split</code>

<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">train_test_split</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">test_size</code><code class="o">=</code><code class="mf">0.2</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code></pre>

                <p>So far we have considered purely random sampling methods. This is generally fine if your dataset is
                  large enough (especially relative to the number of attributes), but if it is not, you run the risk of
                  introducing a significant <a data-type="indexterm" data-primary="sampling bias"
                    id="idm139656388232656" />sampling bias. When a survey company decides to call 1,000 people to ask
                  them a few questions, they don’t just pick 1,000 people randomly in a phone book. They try to ensure
                  that these 1,000 people are representative of the whole population. For example, the US population is
                  composed of 51.3% female and 48.7% male, so a well-conducted survey in the US would try to maintain
                  this ratio in the sample: 513 female and 487 male. This is called <em>stratified sampling</em>: <a
                    data-type="indexterm" data-primary="stratified sampling" id="strats2" />the population is divided
                  into homogeneous subgroups called <em>strata</em>, and the right number of instances is sampled from
                  each stratum to guarantee that the test set is representative of the overall population. If they used
                  purely random sampling, there would be about 12% chance of sampling a skewed test set with either less
                  than 49% female or more than 54% female. Either way, the survey results would be significantly biased.
                </p>

                <p>Suppose you chatted with experts who told you that the median income is a very important attribute to
                  predict median housing prices. You may want to ensure that the test set is representative of the
                  various categories of incomes in the whole dataset. Since the median income is a continuous numerical
                  attribute, you first need to create an income category attribute. Let’s look at the median income
                  histogram more closely (back in <a data-type="xref" href="#attribute_histogram_plots">Figure 2-8</a>):
                  most median income values are clustered around 2 to 5 (i.e., $20,000–$50,000), but some median incomes
                  go far beyond 6 (i.e., $60,000). It is important to have a sufficient number of instances in your
                  dataset for each stratum, or else the estimate of the stratum’s importance may be biased. This means
                  that you should not have too many strata, and each stratum should be large enough. The following code
                  creates an income category attribute by dividing the median income by 1.5 (to limit the number of
                  income categories), and rounding up using <code>ceil</code> (to have discrete categories), and then
                  keeping only the categories lower than 5 and merging the other categories into category 5:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">ceil</code><code class="p">(</code><code class="n">housing</code><code class="p">[</code><code class="s2">"median_income"</code><code class="p">]</code> <code class="o">/</code> <code class="mf">1.5</code><code class="p">)</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code><code class="o">.</code><code class="n">where</code><code class="p">(</code><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code> <code class="o">&lt;</code> <code class="mi">5</code><code class="p">,</code> <code class="mf">5.0</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code></pre>

                <p>These income categories are represented in <a data-type="xref"
                    href="#housing_income_cat_hist_screenshot">Figure 2-9</a>:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code><code class="o">.</code><code class="n">hist</code><code class="p">()</code></pre>

                <figure class="smallerseventy">
                  <div id="housing_income_cat_hist_screenshot" class="figure">
                    <img src="mlst_0209.png" alt="mlst 0209" width="744" height="482" />
                    <h6><span class="label">Figure 2-9. </span>Histogram of income categories</h6>
                  </div>
                </figure>

                <p>Now you are ready to do <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.StratifiedShuffleSplit" id="idm139656388318016" />stratified
                  sampling based on the income category. For this you can use Scikit-Learn’s
                  <code>StratifiedShuffleSplit</code> class:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">StratifiedShuffleSplit</code>

<code class="n">split</code> <code class="o">=</code> <code class="n">StratifiedShuffleSplit</code><code class="p">(</code><code class="n">n_splits</code><code class="o">=</code><code class="mi">1</code><code class="p">,</code> <code class="n">test_size</code><code class="o">=</code><code class="mf">0.2</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code>
<code class="k">for</code> <code class="n">train_index</code><code class="p">,</code> <code class="n">test_index</code> <code class="ow">in</code> <code class="n">split</code><code class="o">.</code><code class="n">split</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]):</code>
    <code class="n">strat_train_set</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">train_index</code><code class="p">]</code>
    <code class="n">strat_test_set</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">test_index</code><code class="p">]</code></pre>

                <p>Let’s see if this worked as expected. You can start by looking at the income category proportions in
                  the test set:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">strat_test_set</code><code class="p">[</code><code class="s">"income_cat"</code><code class="p">]</code><code class="o">.</code><code class="n">value_counts</code><code class="p">()</code> <code class="o">/</code> <code class="nb">len</code><code class="p">(</code><code class="n">strat_test_set</code><code class="p">)</code>
<code class="go">3.0    0.350533</code>
<code class="go">2.0    0.318798</code>
<code class="go">4.0    0.176357</code>
<code class="go">5.0    0.114583</code>
<code class="go">1.0    0.039729</code>
<code class="go">Name: income_cat, dtype: float64</code></pre>

                <p>With similar code you can measure the income category proportions in the full dataset. <a
                    data-type="xref" href="#compare_sampling_errors_screenshot">Figure 2-10</a> compares the income
                  category proportions in the overall dataset, in the test set generated with stratified sampling, and
                  in a test set generated using purely random sampling. As you can see, the test set generated using
                  stratified sampling has income category proportions almost identical to those in the full dataset,
                  whereas the test set generated using purely random sampling is quite skewed.</p>

                <figure class="smallerseventy">
                  <div id="compare_sampling_errors_screenshot" class="figure">
                    <img src="mlst_0210.png" alt="mlst 0210" width="855" height="346" />
                    <h6><span class="label">Figure 2-10. </span>Sampling bias comparison of stratified versus purely
                      random sampling</h6>
                  </div>
                </figure>

                <p>Now you should remove the <code>income_cat</code> attribute so the data is back to its original
                  state:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="k">for</code> <code class="n">set_</code> <code class="ow">in</code> <code class="p">(</code><code class="n">strat_train_set</code><code class="p">,</code> <code class="n">strat_test_set</code><code class="p">):</code>
    <code class="n">set_</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"income_cat"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code></pre>

                <p>We spent quite a bit of time on test set generation for a good reason: this is an often neglected but
                  critical part of a Machine Learning project. Moreover, many of these ideas will be useful later when
                  we discuss cross-validation. Now it’s time to move on to the next stage: exploring the <a
                    data-type="indexterm" data-primary="data" data-secondary="test-set creation" data-startref="d2tsc"
                    id="idm139656388010688" /><a data-type="indexterm" data-primary="test set" data-startref="tsod2"
                    id="idm139656388009600" /><a data-type="indexterm" data-primary="stratified sampling"
                    data-startref="strats2" id="idm139656388008656" />data.</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Discover and Visualize the Data to Gain Insights">
          <div class="sect1" id="idm139656388605856">
            <h1>Discover and Visualize the Data to Gain Insights</h1>

            <p>So far you have only taken a quick glance at the data to get a general understanding of the kind of data
              you are manipulating. Now the goal is to go a little bit more in depth.</p>

            <p>First, make sure you have put the test set aside and you are only exploring the training set. Also, if
              the <a data-type="indexterm" data-primary="training set" id="idm139656387910832" />training set is very
              large, you may want to sample an exploration set, to make manipulations easy and fast. In our case, the
              set is quite small so you can just work directly on the full set. Let’s create a copy so you can play with
              it without harming the training set:</p>

            <pre data-type="programlisting"
              data-code-language="python"><code class="n">housing</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code></pre>








            <section data-type="sect2" data-pdf-bookmark="Visualizing Geographical Data">
              <div class="sect2" id="idm139656387907648">
                <h2>Visualizing Geographical Data</h2>

                <p>Since <a data-type="indexterm" data-primary="data visualization" id="dv2" />there is geographical
                  information (latitude and longitude), it is a good idea to create a scatterplot of all districts to
                  visualize the data (<a data-type="xref" href="#bad_visualization_plot">Figure 2-11</a>):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">)</code></pre>

                <figure class="smallerseventy">
                  <div id="bad_visualization_plot" class="figure">
                    <img src="mlst_0211.png" alt="mlst 0211" width="1700" height="1090" />
                    <h6><span class="label">Figure 2-11. </span>A geographical scatterplot of the data</h6>
                  </div>
                </figure>

                <p>This looks like California all right, but other than that it is hard to see any particular pattern.
                  Setting the <code>alpha</code> option to <code>0.1</code> makes it much easier to visualize the places
                  where there is a high density of data points (<a data-type="xref"
                    href="#better_visualization_plot">Figure 2-12</a>):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="n">alpha</code><code class="o">=</code><code class="mf">0.1</code><code class="p">)</code></pre>

                <figure class="smallerseventy">
                  <div id="better_visualization_plot" class="figure">
                    <img src="mlst_0212.png" alt="mlst 0212" width="1700" height="1090" />
                    <h6><span class="label">Figure 2-12. </span>A better visualization highlighting high-density areas
                    </h6>
                  </div>
                </figure>

                <p>Now that’s much better: you can clearly see the high-density areas, namely the Bay Area and around
                  Los Angeles and San Diego, plus a long line of fairly high density in the Central Valley, in
                  particular around Sacramento and Fresno.</p>

                <p>More generally, our brains are very good at spotting patterns on pictures, but you may need to play
                  around with visualization parameters to make the patterns stand out.</p>

                <p>Now let’s look at the housing prices (<a data-type="xref"
                    href="#housing_prices_scatterplot">Figure 2-13</a>). The radius of each circle represents the
                  district’s population (option <code>s</code>), and the color represents the price (option
                  <code>c</code>). We will use a predefined color map (option <code>cmap</code>) called
                  <code>jet</code>, which ranges from blue (low values) to red (high prices):<sup><a data-type="noteref"
                      id="idm139656387984560-marker" href="ch02.xhtml#idm139656387984560">15</a></sup></p>

                <pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="n">alpha</code><code class="o">=</code><code class="mf">0.4</code><code class="p">,</code>
    <code class="n">s</code><code class="o">=</code><code class="n">housing</code><code class="p">[</code><code class="s2">"population"</code><code class="p">]</code><code class="o">/</code><code class="mi">100</code><code class="p">,</code> <code class="n">label</code><code class="o">=</code><code class="s2">"population"</code><code class="p">,</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">10</code><code class="p">,</code><code class="mi">7</code><code class="p">),</code>
    <code class="n">c</code><code class="o">=</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">cmap</code><code class="o">=</code><code class="n">plt</code><code class="o">.</code><code class="n">get_cmap</code><code class="p">(</code><code class="s2">"jet"</code><code class="p">),</code> <code class="n">colorbar</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code>
<code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">legend</code><code class="p">()</code></pre>

                <figure>
                  <div id="housing_prices_scatterplot" class="figure">
                    <img src="mlst_0213.png" alt="mlst 0213" width="2864" height="2001" />
                    <h6><span class="label">Figure 2-13. </span>California housing prices</h6>
                  </div>
                </figure>

                <p class="pagebreak-before">This image tells you that the housing prices are very much related to the
                  location (e.g., close to the ocean) and to the population density, as you probably knew already. It
                  will probably be useful to use a clustering algorithm to detect the main clusters, and add new
                  features that measure the proximity to the cluster centers. The ocean proximity attribute may be
                  useful as well, although in Northern California the housing prices in coastal districts are not too
                  high, so it is not a <a data-type="indexterm" data-primary="data visualization" data-startref="dv2"
                    id="idm139656387843744" />simple rule.</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Looking for Correlations">
              <div class="sect2" id="idm139656387907056">
                <h2>Looking for Correlations</h2>

                <p>Since <a data-type="indexterm" data-primary="correlations, finding" id="cf2" /><a
                    data-type="indexterm" data-primary="data" data-secondary="finding correlations in" id="d2fci" />the
                  dataset is not too large, you can easily compute the <em>standard correlation coefficient</em> (also
                  called <em>Pearson’s r</em>) between <a data-type="indexterm"
                    data-primary="standard correlation coefficient" id="idm139656387837600" /><a data-type="indexterm"
                    data-primary="Pearson's r" id="idm139656387836896" /><a data-type="indexterm"
                    data-primary="correlation coefficient" id="cc2" />every pair of attributes using the
                  <code>corr()</code> method:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">corr_matrix</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">corr</code><code class="p">()</code></pre>

                <p>Now let’s look at how much each attribute correlates with the median house value:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code><code class="p">[</code><code class="s">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">sort_values</code><code class="p">(</code><code class="n">ascending</code><code class="o">=</code><code class="bp">False</code><code class="p">)</code>
<code class="go">median_house_value    1.000000</code>
<code class="go">median_income         0.687170</code>
<code class="go">total_rooms           0.135231</code>
<code class="go">housing_median_age    0.114220</code>
<code class="go">households            0.064702</code>
<code class="go">total_bedrooms        0.047865</code>
<code class="go">population           -0.026699</code>
<code class="go">longitude            -0.047279</code>
<code class="go">latitude             -0.142826</code>
<code class="go">Name: median_house_value, dtype: float64</code></pre>

                <p>The correlation coefficient ranges from –1 to 1. When it is close to 1, it means that there is a
                  strong positive correlation; for example, the median house value tends to go up when the median income
                  goes up. When the coefficient is close to –1, it means that there is a strong negative correlation;
                  you can see a small negative correlation between the latitude and the median house value (i.e., prices
                  have a slight tendency to go down when you go north). Finally, coefficients close to zero mean that
                  there is no linear correlation. <a data-type="xref"
                    href="#correlation_coefficient_plots">Figure 2-14</a> shows various plots along with the correlation
                  coefficient between their horizontal and vertical axes.</p>

                <figure>
                  <div id="correlation_coefficient_plots" class="figure">
                    <img src="mlst_0214.png" alt="mlst 0214" width="1210" height="527" />
                    <h6><span class="label">Figure 2-14. </span>Standard correlation coefficient of various datasets
                      (source: Wikipedia; public domain image)</h6>
                  </div>
                </figure>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>The correlation coefficient only measures linear correlations (“if <em>x</em> goes up, then
                    <em>y</em> generally goes up/down”). It may completely miss out on nonlinear relationships (e.g.,
                    “if <em>x</em> is close to zero then <em>y</em> generally goes up”). Note how all the plots of the
                    bottom row have a correlation coefficient equal to zero despite the fact that their axes are clearly
                    not independent: these are examples of nonlinear relationships. Also, the second row shows examples
                    where the correlation coefficient is equal to 1 or –1; notice that this has nothing to do with the
                    slope. For example, your height in inches has a correlation coefficient of 1 with your height in
                    feet or in nanometers.</p>
                </div>

                <p>Another way to check for correlation between attributes is to use <a data-type="indexterm"
                    data-primary="Pandas" data-secondary="scatter_matrix" id="p2sm" />Pandas’ <span
                    class="keep-together"><code>scatter_matrix</code></span> function, which plots every numerical
                  attribute against every other numerical attribute. Since there are now 11 numerical attributes, you
                  would get 11<sup>2</sup> = 121 plots, which would not fit on a page, so let’s just focus on a few
                  promising attributes that seem most correlated with the median housing value (<a data-type="xref"
                    href="#scatter_matrix_plot">Figure 2-15</a>):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">pandas.plotting</code> <code class="kn">import</code> <code class="n">scatter_matrix</code>

<code class="n">attributes</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="s2">"median_income"</code><code class="p">,</code> <code class="s2">"total_rooms"</code><code class="p">,</code>
              <code class="s2">"housing_median_age"</code><code class="p">]</code>
<code class="n">scatter_matrix</code><code class="p">(</code><code class="n">housing</code><code class="p">[</code><code class="n">attributes</code><code class="p">],</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">12</code><code class="p">,</code> <code class="mi">8</code><code class="p">))</code></pre>

                <figure>
                  <div id="scatter_matrix_plot" class="figure">
                    <img src="mlst_0215.png" alt="mlst 0215" width="3496" height="2331" />
                    <h6><span class="label">Figure 2-15. </span>Scatter matrix</h6>
                  </div>
                </figure>

                <p>The main diagonal (top left to bottom right) would be full of straight lines if Pandas plotted each
                  variable against itself, which would not be very useful. So instead Pandas displays a histogram of
                  each attribute (other options are available; see <a data-type="indexterm" data-primary="Pandas"
                    data-secondary="scatter_matrix" data-startref="p2sm" id="idm139656387539104" />Pandas’ documentation
                  for more details).</p>

                <p>The most promising attribute to predict the median house value is the median income, so let’s zoom in
                  on their correlation scatterplot (<a data-type="xref"
                    href="#income_vs_house_value_scatterplot">Figure 2-16</a>):</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"median_income"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"median_house_value"</code><code class="p">,</code>
             <code class="n">alpha</code><code class="o">=</code><code class="mf">0.1</code><code class="p">)</code></pre>

                <p>This plot reveals a few things. First, the correlation is indeed very strong; you can clearly see the
                  upward trend and the points are not too dispersed. Second, the price cap that we noticed earlier is
                  clearly visible as a horizontal line at $500,000. But this plot reveals other less obvious straight
                  lines: a horizontal line around $450,000, another around $350,000, perhaps one around $280,000, and a
                  few more below that. You may want to try removing the corresponding districts to prevent your
                  algorithms from learning to reproduce these <a data-type="indexterm" data-primary="data"
                    data-secondary="finding correlations in" data-startref="d2fci" id="idm139656387528224" /><a
                    data-type="indexterm" data-primary="correlations, finding" data-startref="cf2"
                    id="idm139656387527136" /><a data-type="indexterm" data-primary="correlation coefficient"
                    data-startref="cc2" id="idm139656387526192" />data quirks.</p>

                <figure class="smallereighty">
                  <div id="income_vs_house_value_scatterplot" class="figure">
                    <img src="mlst_0216.png" alt="mlst 0216" width="1705" height="1091" />
                    <h6><span class="label">Figure 2-16. </span>Median income versus median house value</h6>
                  </div>
                </figure>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Experimenting with Attribute Combinations">
              <div class="sect2" id="idm139656387842048">
                <h2>Experimenting with Attribute Combinations</h2>

                <p>Hopefully <a data-type="indexterm" data-primary="attributes" data-secondary="combinations of"
                    id="a2co" />the previous sections gave you an idea of a few ways you can explore the data and gain
                  insights. You identified a few data quirks that you may want to clean up before feeding the data to a
                  Machine Learning algorithm, and you found interesting correlations between attributes, in particular
                  with the target attribute. You also noticed that some attributes have a tail-heavy distribution, so
                  you may want to transform them (e.g., by computing their logarithm). Of course, your mileage will vary
                  considerably with each project, but the general ideas are similar.</p>

                <p>One last thing you may want to do before actually preparing the data for Machine Learning algorithms
                  is to try out various attribute combinations. For example, the total number of rooms in a district is
                  not very useful if you don’t know how many households there are. What you really want is the number of
                  rooms per household. Similarly, the total number of bedrooms by itself is not very useful: you
                  probably want to compare it to the number of rooms. And the population per household also seems like
                  an interesting attribute combination to look at. Let’s create these new attributes:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"rooms_per_household"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_rooms"</code><code class="p">]</code><code class="o">/</code><code class="n">housing</code><code class="p">[</code><code class="s2">"households"</code><code class="p">]</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"bedrooms_per_room"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code><code class="o">/</code><code class="n">housing</code><code class="p">[</code><code class="s2">"total_rooms"</code><code class="p">]</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"population_per_household"</code><code class="p">]</code><code class="o">=</code><code class="n">housing</code><code class="p">[</code><code class="s2">"population"</code><code class="p">]</code><code class="o">/</code><code class="n">housing</code><code class="p">[</code><code class="s2">"households"</code><code class="p">]</code></pre>

                <p>And now let’s look at the correlation matrix again:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">corr</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code><code class="p">[</code><code class="s">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">sort_values</code><code class="p">(</code><code class="n">ascending</code><code class="o">=</code><code class="bp">False</code><code class="p">)</code>
<code class="go">median_house_value          1.000000</code>
<code class="go">median_income               0.687160</code>
<code class="go">rooms_per_household         0.146285</code>
<code class="go">total_rooms                 0.135097</code>
<code class="go">housing_median_age          0.114110</code>
<code class="go">households                  0.064506</code>
<code class="go">total_bedrooms              0.047689</code>
<code class="go">population_per_household   -0.021985</code>
<code class="go">population                 -0.026920</code>
<code class="go">longitude                  -0.047432</code>
<code class="go">latitude                   -0.142724</code>
<code class="go">bedrooms_per_room          -0.259984</code>
<code class="go">Name: median_house_value, dtype: float64</code></pre>

                <p>Hey, not bad! The new <code>bedrooms_per_room</code> attribute is much more correlated with the
                  median house value than the total number of rooms or bedrooms. Apparently houses with a lower
                  bedroom/room ratio tend to be more expensive. The number of rooms per household is also more
                  informative than the total number of rooms in a district—obviously the larger the houses, the more
                  expensive they are.</p>

                <p>This round of exploration does not have to be absolutely thorough; the point is to start off on the
                  right foot and quickly gain insights that will help you get a first reasonably good prototype. But
                  this is an iterative process: once you get a prototype up and running, you can analyze its output to
                  gain more insights and come back to this exploration <a data-type="indexterm"
                    data-primary="attributes" data-secondary="combinations of" data-startref="a2co"
                    id="idm139656387331248" />step.</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Prepare the Data for Machine Learning Algorithms">
          <div class="sect1" id="idm139656387329808">
            <h1>Prepare the Data for Machine Learning Algorithms</h1>

            <p>It’s <a data-type="indexterm" data-primary="data"
                data-secondary="preparing for Machine Learning algorithms" id="d2pfmla" /><a data-type="indexterm"
                data-primary="algorithms" data-secondary="preparing data for" id="a2pdf" />time to prepare the data for
              your Machine Learning algorithms. Instead of just doing this manually, you should write functions to do
              that, for several good reasons:</p>

            <ul>
              <li>
                <p>This will allow you to reproduce these transformations easily on any dataset (e.g., the next time you
                  get a fresh dataset).</p>
              </li>
              <li>
                <p>You will gradually build a library of transformation functions that you can reuse in future projects.
                </p>
              </li>
              <li>
                <p>You can use these functions in your live system to transform the new data before feeding it to your
                  algorithms.</p>
              </li>
              <li>
                <p>This will make it possible for you to easily try various transformations and see which combination of
                  transformations works best.</p>
              </li>
            </ul>

            <p>But first let’s revert to a clean <a data-type="indexterm" data-primary="training set"
                id="idm139656387320304" />training set (by copying <code>strat_train_set</code> once again), and let’s
              separate the predictors and the labels since we don’t necessarily want to apply the same transformations
              to the predictors and the target values (note that <code>drop()</code> <a data-type="indexterm"
                data-primary="drop()" id="idm139656387318464" />creates a copy of the data and does not affect
              <code>strat_train_set</code>):</p>

            <pre data-type="programlisting"
              data-code-language="python"><code class="n">housing</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="n">housing_labels</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code></pre>








            <section data-type="sect2" data-pdf-bookmark="Data Cleaning">
              <div class="sect2" id="idm139656387298976">
                <h2>Data Cleaning</h2>

                <p>Most <a data-type="indexterm" data-primary="data cleaning" id="dc2" />Machine Learning algorithms
                  cannot work with missing features, so let’s create a few functions to take care of them. You noticed
                  earlier that the <code>total_bedrooms</code> attribute has some missing values, so let’s fix this. You
                  have three options:</p>

                <ul>
                  <li>
                    <p>Get rid of the corresponding districts.</p>
                  </li>
                  <li>
                    <p>Get rid of the whole attribute.</p>
                  </li>
                  <li>
                    <p>Set the values to some value (zero, the mean, the median, etc.).</p>
                  </li>
                </ul>

                <p>You can accomplish these easily using <a data-type="indexterm" data-primary="DataFrame"
                    id="idm139656387289296" />DataFrame’s <code>dropna()</code>, <code>drop()</code>, <a
                    data-type="indexterm" data-primary="dropna()" id="idm139656387287600" /><a data-type="indexterm"
                    data-primary="fillna()" id="idm139656387272880" />and <code>fillna()</code> methods:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">dropna</code><code class="p">(</code><code class="n">subset</code><code class="o">=</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">])</code>    <code class="c1"># option 1</code>
<code class="n">housing</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"total_bedrooms"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>       <code class="c1"># option 2</code>
<code class="n">median</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code><code class="o">.</code><code class="n">median</code><code class="p">()</code>  <code class="c1"># option 3</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code><code class="o">.</code><code class="n">fillna</code><code class="p">(</code><code class="n">median</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code></pre>

                <p>If you choose option 3, you should compute the median value on the training set, and use it to fill
                  the missing values in the training set, but also don’t forget to save the median value that you have
                  computed. You will need it later to replace missing values in the test set when you want to evaluate
                  your system, and also once the system goes live to replace missing values in new data.</p>

                <p>Scikit-Learn <a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="imputer"
                    id="sl2i" /><a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.impute.SimpleImputer" id="idm139656387410192" />provides a handy class to
                  take care of missing values: <code>SimpleImputer</code>. Here is how to use it. First, you need to
                  create a <code>SimpleImputer</code> instance, specifying that you want to replace each attribute’s
                  missing values with the median of that attribute:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.impute</code> <code class="kn">import</code> <code class="n">SimpleImputer</code>

<code class="n">imputer</code> <code class="o">=</code> <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">)</code></pre>

                <p>Since the median can only be computed on numerical attributes, we need to create a copy of the data
                  without the text attribute <code>ocean_proximity</code>:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing_num</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"ocean_proximity"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code></pre>

                <p>Now you can fit the <code>imputer</code> instance to the training data using the <code>fit()</code>
                  <a data-type="indexterm" data-primary="fit()" id="idm139656387235456" />method:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">imputer</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>

                <p>The <code>imputer</code> has simply computed the median of each attribute and stored the result in
                  its <code>statistics_</code> instance variable. Only the <code>total_bedrooms</code> attribute had
                  missing values, but we cannot be sure that there won’t be any missing values in new data after the
                  system goes live, so it is safer to apply the <code>imputer</code> to all the numerical attributes:
                </p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">imputer</code><code class="o">.</code><code class="n">statistics_</code>
<code class="go">array([ -118.51 , 34.26 , 29. , 2119.5 , 433. , 1164. , 408. , 3.5409])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_num</code><code class="o">.</code><code class="n">median</code><code class="p">()</code><code class="o">.</code><code class="n">values</code>
<code class="go">array([ -118.51 , 34.26 , 29. , 2119.5 , 433. , 1164. , 408. , 3.5409])</code></pre>

                <p>Now you can use this “trained” <code>imputer</code> to transform the training set by replacing
                  missing values by the learned medians:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">X</code> <code class="o">=</code> <code class="n">imputer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>

                <p>The result is a plain NumPy array containing the transformed features. If you want to put it back
                  into a Pandas DataFrame, it’s simple:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">housing_tr</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">columns</code><code class="o">=</code><code class="n">housing_num</code><code class="o">.</code><code class="n">columns</code><code class="p">)</code></pre>
                <aside data-type="sidebar" epub:type="sidebar">
                  <div class="sidebar" id="scikit_learn_design">
                    <h5>Scikit-Learn Design</h5>
                    <p>Scikit-Learn’s <a data-type="indexterm" data-primary="Scikit-Learn"
                        data-secondary="design principles" id="sl2dp" />API is remarkably well designed. The <a
                        href="https://homl.info/11">main design principles</a> are:<sup><a data-type="noteref"
                          id="idm139656387215840-marker" href="ch02.xhtml#idm139656387215840">16</a></sup></p>

                    <ul>
                      <li>
                        <p><strong>Consistency</strong>. All objects share a consistent and simple interface:</p>

                        <ul>
                          <li>
                            <p><em>Estimators</em>. Any <a data-type="indexterm" data-primary="estimators"
                                id="idm139656387003424" />object that can estimate some parameters based on a dataset is
                              called an <em>estimator</em> (e.g., an <code>imputer</code> is an estimator). The
                              estimation itself is performed by the <code>fit()</code> method, and it takes only a
                              dataset as a parameter (or two for supervised learning algorithms; the second dataset
                              contains the labels). Any other parameter needed to guide the estimation process is
                              considered a hyperparameter (such as an <code>imputer</code>’s <code>strategy</code>), and
                              it must be set as an instance variable (generally via a constructor parameter).</p>
                          </li>
                          <li>
                            <p><em>Transformers</em>. Some <a data-type="indexterm" data-primary="transformers"
                                id="idm139656386998784" />estimators (such as an <code>imputer</code>) can also
                              transform a dataset; these are called <em>transformers</em>. Once again, the API is quite
                              simple: the transformation is performed by the <code>transform()</code> <a
                                data-type="indexterm" data-primary="transform()" id="idm139656387082432" />method with
                              the dataset to transform as a parameter. It returns the transformed dataset. This
                              transformation generally relies on the learned parameters, as is the case for an
                              <code>imputer</code>. All transformers also have a convenience method called
                              <code>fit_transform()</code> <a data-type="indexterm" data-primary="fit_transform()"
                                id="idm139656387080576" />that is equivalent to calling <code>fit()</code> and then
                              <code>transform()</code> (but sometimes <code>fit_transform()</code> is optimized and runs
                              much faster).</p>
                          </li>
                          <li>
                            <p><em>Predictors</em>. Finally, <a data-type="indexterm" data-primary="predictors"
                                id="idm139656387077472" />some estimators are capable of making predictions given a
                              dataset; they are called <em>predictors</em>. For example, the
                              <code>LinearRegression</code> model <a data-type="indexterm" data-primary="Scikit-Learn"
                                data-secondary="sklearn.linear_model.LinearRegression" id="idm139656387075776" />in the
                              previous chapter was a predictor: it predicted life satisfaction given a country’s GDP per
                              capita. A predictor has a <code>predict()</code> <a data-type="indexterm"
                                data-primary="predict()" id="idm139656387074144" />method that takes a dataset of new
                              instances and returns a dataset of corresponding predictions. It also has a
                              <code>score()</code> <a data-type="indexterm" data-primary="score()"
                                id="idm139656387072768" />method that measures the quality of the predictions given a
                              test set (and the corresponding labels in the case of supervised learning
                              algorithms).<sup><a data-type="noteref" id="idm139656387071744-marker"
                                  href="ch02.xhtml#idm139656387071744">17</a></sup></p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p><strong>Inspection</strong>. All the estimator’s hyperparameters are accessible directly via
                          public instance variables (e.g., <code>imputer.strategy</code>), and all the estimator’s
                          learned parameters are also accessible via public instance variables with an underscore suffix
                          (e.g., <code>imputer.statistics_</code>).</p>
                      </li>
                      <li>
                        <p><strong>Nonproliferation of classes</strong>. Datasets are represented as NumPy arrays
                          or SciPy sparse matrices, instead of homemade classes. Hyperparameters are just regular Python
                          strings or numbers.</p>
                      </li>
                      <li>
                        <p><strong>Composition</strong>. Existing building blocks are reused as much as possible. For
                          example, it is easy to create a <code>Pipeline</code> estimator from an arbitrary sequence of
                          transformers followed by a final estimator, as we will see.</p>
                      </li>
                      <li>
                        <p><strong>Sensible defaults</strong>. Scikit-Learn provides reasonable default values for most
                          parameters, making it easy to create a baseline <a data-type="indexterm"
                            data-primary="Scikit-Learn" data-secondary="design principles" data-startref="sl2dp"
                            id="idm139656387064480" />working system quickly.</p>
                      </li>
                    </ul>
                  </div>
                </aside>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Handling Text and Categorical Attributes">
              <div class="sect2" id="idm139656387295504">
                <h2>Handling Text and Categorical Attributes</h2>

                <p>Earlier <a data-type="indexterm" data-primary="data cleaning" data-startref="dc2"
                    id="idm139656387061184" /><a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="imputer" data-startref="sl2i" id="idm139656387060176" /><a data-type="indexterm"
                    data-primary="text attributes" id="ta2" /><a data-type="indexterm"
                    data-primary="categorical attributes" id="ca2" />we left out the categorical attribute
                  <code>ocean_proximity</code> because it is a text attribute so we cannot compute its median:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[[</code><code class="s">"ocean_proximity"</code><code class="p">]]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat</code><code class="o">.</code><code class="n">head</code><code class="p">(</code><code class="mi">10</code><code class="p">)</code>
<code class="go">      ocean_proximity</code>
<code class="go">17606       &lt;1H OCEAN</code>
<code class="go">18632       &lt;1H OCEAN</code>
<code class="go">14650      NEAR OCEAN</code>
<code class="go">3230           INLAND</code>
<code class="go">3555        &lt;1H OCEAN</code>
<code class="go">19480          INLAND</code>
<code class="go">8879        &lt;1H OCEAN</code>
<code class="go">13685          INLAND</code>
<code class="go">4937        &lt;1H OCEAN</code>
<code class="go">4861        &lt;1H OCEAN</code></pre>

                <p>Most Machine Learning algorithms prefer to work with numbers anyway, so let’s convert these
                  categories from text to numbers. For this, we can use Scikit-Learn’s <code>OrdinalEncoder</code>
                  class<sup><a data-type="noteref" id="idm139656387037104-marker"
                      href="ch02.xhtml#idm139656387037104">18</a></sup>:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">OrdinalEncoder</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">ordinal_encoder</code> <code class="o">=</code> <code class="n">OrdinalEncoder</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_encoded</code> <code class="o">=</code> <code class="n">ordinal_encoder</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_cat</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_encoded</code><code class="p">[:</code><code class="mi">10</code><code class="p">]</code>
<code class="go">array([[0.],</code>
<code class="go">       [0.],</code>
<code class="go">       [4.],</code>
<code class="go">       [1.],</code>
<code class="go">       [0.],</code>
<code class="go">       [1.],</code>
<code class="go">       [0.],</code>
<code class="go">       [1.],</code>
<code class="go">       [0.],</code>
<code class="go">       [0.]])</code></pre>

                <p>You can get the list of categories using the <code>categories_</code> instance variable. It is a list
                  containing a 1D array of categories for each categorical attribute (in this case, a list containing a
                  single array since there is just one categorical attribute):</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">ordinal_encoder</code><code class="o">.</code><code class="n">categories_</code>
<code class="go">[array(['&lt;1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],</code>
<code class="go">       dtype=object)]</code></pre>

                <p>One issue with this representation is that ML algorithms will assume that two nearby values are more
                  similar than two distant values. This may be fine in some cases (e.g., for ordered categories such as
                  “bad”, “average”, “good”, “excellent”), but it is obviously not the case for the
                  <code>ocean_proximity</code> column (for example, categories 0 and 4 are clearly more similar than
                  categories 0 and 1). To fix this issue, a common solution is to create one binary attribute per
                  category: one attribute equal to 1 when the category is “&lt;1H OCEAN” (and 0 otherwise), another
                  attribute equal to 1 when the category is “INLAND” (and 0 otherwise), and so on. This is called
                  <em>one-hot encoding</em>, <a data-type="indexterm" data-primary="one-hot encoding"
                    id="idm139656385657984" />because only one attribute will be equal to 1 (hot), while the others will
                  be 0 (cold). The new attributes are sometimes called <em>dummy</em> attributes. Scikit-Learn provides
                  a <code>OneHotEncoder</code> <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.preprocessing.OneHotEncoder" id="idm139656385650608" />class to convert
                  categorical values into one-hot vectors<sup><a data-type="noteref" id="idm139656385649504-marker"
                      href="ch02.xhtml#idm139656385649504">19</a></sup>:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">OneHotEncoder</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code> <code class="o">=</code> <code class="n">OneHotEncoder</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_1hot</code> <code class="o">=</code> <code class="n">cat_encoder</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_cat</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_1hot</code>
<code class="go">&lt;16512x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;'</code>
<code class="go">  with 16512 stored elements in Compressed Sparse Row format&gt;</code></pre>

                <p>Notice that the output is a SciPy <em>sparse matrix</em>, <a data-type="indexterm"
                    data-primary="sparse matrix" id="idm139656385503616" />instead of a <a data-type="indexterm"
                    data-primary="NumPy arrays" id="idm139656385502880" />NumPy array. This is very useful when you have
                  categorical attributes with thousands of categories. After one-hot encoding we get a matrix with
                  thousands of columns, and the matrix is full of zeros except for a single 1 per row. Using up tons of
                  memory mostly to store zeros would be very wasteful, so instead a sparse matrix only stores the
                  location of the nonzero elements. You can use it mostly like a normal 2D array,<sup><a
                      data-type="noteref" id="idm139656385501616-marker"
                      href="ch02.xhtml#idm139656385501616">20</a></sup> but if you really want to convert it to a
                  (dense) NumPy array, just call the <code>toarray()</code> <a data-type="indexterm"
                    data-primary="toarray()" id="idm139656385500576" />method:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_1hot</code><code class="o">.</code><code class="n">toarray</code><code class="p">()</code>
<code class="go">array([[1., 0., 0., 0., 0.],</code>
<code class="go">       [1., 0., 0., 0., 0.],</code>
<code class="go">       [0., 0., 0., 0., 1.],</code>
<code class="go">       ...,</code>
<code class="go">       [0., 1., 0., 0., 0.],</code>
<code class="go">       [1., 0., 0., 0., 0.],</code>
<code class="go">       [0., 0., 0., 1., 0.]])</code></pre>

                <p>Once again, you can get the list of categories using the encoder’s <code>categories_</code> instance
                  variable:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">categories_</code>
<code class="go">[array(['&lt;1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],</code>
<code class="go">       dtype=object)]</code></pre>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>If a categorical attribute has a large number of possible categories (e.g., country code,
                    profession, species, etc.), then one-hot encoding will result in a large number of input features.
                    This may slow down training and degrade performance. If this happens, you may want to replace the
                    categorical input with useful numerical features related to the categories: for example, you could
                    replace the <code>ocean_proximity</code> feature with the distance to the ocean (similarly, a
                    country code could be replaced with the country’s population and GDP per capita). Alternatively, you
                    could replace each category with a learnable low dimensional vector called an <em>embedding</em>.
                    Each category’s representation would be learned during training: this is called <em>representation
                      learning</em> (see Chapter 15 for more details).</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Custom Transformers">
              <div class="sect2" id="idm139656387062384">
                <h2>Custom Transformers</h2>

                <p>Although <a data-type="indexterm" data-primary="transformers, custom" id="t2c" /><a
                    data-type="indexterm" data-primary="custom transformers" id="ct2" />Scikit-Learn provides many
                  useful transformers, you will need to write your own for tasks such as custom cleanup operations or
                  combining specific attributes. You will want your transformer to work seamlessly with Scikit-Learn
                  functionalities (such as pipelines), and since Scikit-Learn relies on duck typing (not inheritance),
                  all you need is to create a class and implement three methods: <code>fit()</code> (returning
                  <code>self</code>), <code>transform()</code>, and <code>fit_transform()</code>. You can get the last
                  one for free by simply adding <code>TransformerMixin</code> <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.base.TransformerMixin"
                    id="idm139656385485616" />as a base class. Also, if you add <code>BaseEstimator</code> as a <a
                    data-type="indexterm" data-primary="Scikit-Learn" data-secondary="sklearn.base.BaseEstimator"
                    id="idm139656385484128" />base class (and avoid <code>*args</code> and <code>**kargs</code> in your
                  constructor) you will get two extra methods (<code>get_params()</code> and <code>set_params()</code>)
                  that will be useful for automatic hyperparameter tuning. For example, here is a small transformer
                  class that adds the combined attributes we discussed earlier:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.base</code> <code class="kn">import</code> <code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code>

<code class="n">rooms_ix</code><code class="p">,</code> <code class="n">bedrooms_ix</code><code class="p">,</code> <code class="n">population_ix</code><code class="p">,</code> <code class="n">households_ix</code> <code class="o">=</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">6</code>

<code class="k">class</code> <code class="nc">CombinedAttributesAdder</code><code class="p">(</code><code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code><code class="p">):</code>
    <code class="k">def</code> <code class="nf-Magic">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">add_bedrooms_per_room</code> <code class="o">=</code> <code class="bp">True</code><code class="p">):</code> <code class="c1"># no *args or **kargs</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">add_bedrooms_per_room</code> <code class="o">=</code> <code class="n">add_bedrooms_per_room</code>
    <code class="k">def</code> <code class="nf">fit</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="k">return</code> <code class="bp">self</code>  <code class="c1"># nothing else to do</code>
    <code class="k">def</code> <code class="nf">transform</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="n">rooms_per_household</code> <code class="o">=</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">rooms_ix</code><code class="p">]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">households_ix</code><code class="p">]</code>
        <code class="n">population_per_household</code> <code class="o">=</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">population_ix</code><code class="p">]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">households_ix</code><code class="p">]</code>
        <code class="k">if</code> <code class="bp">self</code><code class="o">.</code><code class="n">add_bedrooms_per_room</code><code class="p">:</code>
            <code class="n">bedrooms_per_room</code> <code class="o">=</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">bedrooms_ix</code><code class="p">]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="n">rooms_ix</code><code class="p">]</code>
            <code class="k">return</code> <code class="n">np</code><code class="o">.</code><code class="n">c_</code><code class="p">[</code><code class="n">X</code><code class="p">,</code> <code class="n">rooms_per_household</code><code class="p">,</code> <code class="n">population_per_household</code><code class="p">,</code>
                         <code class="n">bedrooms_per_room</code><code class="p">]</code>
        <code class="k">else</code><code class="p">:</code>
            <code class="k">return</code> <code class="n">np</code><code class="o">.</code><code class="n">c_</code><code class="p">[</code><code class="n">X</code><code class="p">,</code> <code class="n">rooms_per_household</code><code class="p">,</code> <code class="n">population_per_household</code><code class="p">]</code>

<code class="n">attr_adder</code> <code class="o">=</code> <code class="n">CombinedAttributesAdder</code><code class="p">(</code><code class="n">add_bedrooms_per_room</code><code class="o">=</code><code class="bp">False</code><code class="p">)</code>
<code class="n">housing_extra_attribs</code> <code class="o">=</code> <code class="n">attr_adder</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing</code><code class="o">.</code><code class="n">values</code><code class="p">)</code></pre>

                <p>In this example the transformer has one hyperparameter, <code>add_bedrooms_per_room</code>, set to
                  <code>True</code> by default (it is often helpful to provide sensible defaults). This <a
                    data-type="indexterm" data-primary="hyperparameters" id="idm139656385572672" />hyperparameter will
                  allow you to easily find out whether adding this attribute helps the Machine Learning algorithms or
                  not. More generally, you can add a hyperparameter to gate any data preparation step that you are not
                  100% sure about. The more you automate these data preparation steps, the more combinations you can
                  automatically try out, making it much more likely that you will find a great <a data-type="indexterm"
                    data-primary="transformers, custom" data-startref="t2c" id="idm139656385571456" /><a
                    data-type="indexterm" data-primary="custom transformers" data-startref="ct2"
                    id="idm139656385349744" />combination (and saving you a lot of time).</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Feature Scaling">
              <div class="sect2" id="idm139656385348416">
                <h2>Feature Scaling</h2>

                <p>One <a data-type="indexterm" data-primary="feature scaling" id="idm139656385346880" />of the most
                  important transformations you need to apply to your data is <em>feature scaling</em>. With few
                  exceptions, Machine Learning algorithms don’t perform well when the input numerical attributes have
                  very different scales. This is the case for the housing data: the total number of rooms ranges from
                  about 6 to 39,320, while the median incomes only range from 0 to 15. Note that scaling the target
                  values is generally not required.</p>

                <p>There are two common ways to get all attributes to have the same scale: <em>min-max scaling</em> <a
                    data-type="indexterm" data-primary="min-max scaling" id="idm139656385344432" /><a
                    data-type="indexterm" data-primary="standardization" id="idm139656385343696" />and
                  <em>standardization</em>.</p>

                <p>Min-max scaling <a data-type="indexterm" data-primary="normalization" id="idm139656385341808" />(many
                  people call this <em>normalization</em>) is quite simple: values are shifted and rescaled so that they
                  end up ranging from 0 to 1. We do this by subtracting the min value and dividing by the max minus the
                  min. <a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="MinMaxScaler"
                    id="idm139656385340336" />Scikit-Learn provides a transformer called <code>MinMaxScaler</code> for
                  this. It has a <code>feature_range</code> hyperparameter that lets you change the range if you don’t
                  want 0–1 for some reason.</p>

                <p>Standardization is quite different: first it subtracts the mean value (so standardized values always
                  have a zero mean), and then it divides by the standard deviation so that the resulting distribution
                  has unit variance. Unlike min-max scaling, standardization does not bound values to a specific range,
                  which may be a problem for some algorithms (e.g., neural networks often expect an input value ranging
                  from 0 to 1). However, standardization is much less affected by outliers. For example, suppose a
                  district had a median income equal to 100 (by mistake). Min-max scaling would then crush all the other
                  values from 0–15 down to 0–0.15, whereas standardization would not be much affected. Scikit-Learn
                  provides a transformer called <code>StandardScaler</code> <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.preprocessing.StandardScaler"
                    id="sklppsscha2" />for standardization.</p>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>As with all the transformations, it is important to fit the scalers to the training data only, not
                    to the full dataset (including the test set). Only then can you use them to transform the training
                    set and the test set (and new data).</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Transformation Pipelines">
              <div class="sect2" id="idm139656385333888">
                <h2>Transformation Pipelines</h2>

                <p>As <a data-type="indexterm" data-primary="transformation pipelines" id="tp2" /><a
                    data-type="indexterm" data-primary="Scikit-Learn" data-secondary="Pipeline constructor"
                    id="sl2p" /><a data-type="indexterm" data-primary="Pipeline constructor" id="pc2" />you can see,
                  there are many data transformation steps that need to be executed in the right order. Fortunately,
                  Scikit-Learn provides the <code>Pipeline</code> class to help with such sequences of transformations.
                  Here is a small pipeline for the <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.pipeline.Pipeline" id="idm139656385320704" />numerical attributes:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.pipeline</code> <code class="kn">import</code> <code class="n">Pipeline</code>
<code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">StandardScaler</code>

<code class="n">num_pipeline</code> <code class="o">=</code> <code class="n">Pipeline</code><code class="p">([</code>
        <code class="p">(</code><code class="s1">'imputer'</code><code class="p">,</code> <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">)),</code>
        <code class="p">(</code><code class="s1">'attribs_adder'</code><code class="p">,</code> <code class="n">CombinedAttributesAdder</code><code class="p">()),</code>
        <code class="p">(</code><code class="s1">'std_scaler'</code><code class="p">,</code> <code class="n">StandardScaler</code><code class="p">()),</code>
    <code class="p">])</code>

<code class="n">housing_num_tr</code> <code class="o">=</code> <code class="n">num_pipeline</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>

                <p>The <code>Pipeline</code> constructor takes a list of name/estimator pairs defining a sequence of
                  steps. All but the last estimator must be transformers (i.e., they must have a
                  <code>fit_transform()</code> method). The names can be anything you like (as long as they are unique
                  and don’t contain double underscores “<code>__</code>”): they will come in handy later for
                  hyperparameter tuning.</p>

                <p>When you call the <a data-type="indexterm" data-primary="fit()" id="idm139656385274608" /><a
                    data-type="indexterm" data-primary="fit_transform()" id="idm139656385273872" />pipeline’s
                  <code>fit()</code> method, it calls <code>fit_transform()</code> sequentially on all transformers,
                  passing the output of each call as the parameter to the next call, until it reaches the final
                  estimator, for which it just calls the <code>fit()</code> method.</p>

                <p>The pipeline exposes the same methods as the final estimator. In this example, the last estimator is
                  <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.preprocessing.StandardScaler" data-startref="sklppsscha2"
                    id="idm139656385270816" /><a data-type="indexterm" data-primary="StandardScaler"
                    id="idm139656385269600" />a <code>StandardScaler</code>, which is a transformer, so the pipeline has
                  <a data-type="indexterm" data-primary="transform()" id="idm139656385268384" />a
                  <code>transform()</code> method that applies all the transforms to the data in sequence (it also has a
                  <code>fit_transform</code> method that we could have used instead of calling <code>fit()</code> and
                  then <code>transform()</code>).</p>

                <p>So far, we have handled the categorical columns and the numerical columns separately. It would be
                  more convenient to have a single transformer able to handle all columns, applying the appropriate
                  transformations to each column. In version 0.20, Scikit-Learn introduced the
                  <code>ColumnTransformer</code> for this purpose, and the good news is that it works great with Pandas
                  DataFrames. Let’s use it to apply all the transformations to the housing data:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.compose</code> <code class="kn">import</code> <code class="n">ColumnTransformer</code>

<code class="n">num_attribs</code> <code class="o">=</code> <code class="nb">list</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code>
<code class="n">cat_attribs</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"ocean_proximity"</code><code class="p">]</code>

<code class="n">full_pipeline</code> <code class="o">=</code> <code class="n">ColumnTransformer</code><code class="p">([</code>
        <code class="p">(</code><code class="s2">"num"</code><code class="p">,</code> <code class="n">num_pipeline</code><code class="p">,</code> <code class="n">num_attribs</code><code class="p">),</code>
        <code class="p">(</code><code class="s2">"cat"</code><code class="p">,</code> <code class="n">OneHotEncoder</code><code class="p">(),</code> <code class="n">cat_attribs</code><code class="p">),</code>
    <code class="p">])</code>

<code class="n">housing_prepared</code> <code class="o">=</code> <code class="n">full_pipeline</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing</code><code class="p">)</code></pre>

                <p>Here is how this works: first we import the <code>ColumnTransformer</code> class, next we get the
                  list of numerical column names and the list of categorical column names, and we construct a
                  <code>ColumnTransformer</code>. The constructor requires a list of tuples, where each tuple contains a
                  name<sup><a data-type="noteref" id="idm139656385213632-marker"
                      href="ch02.xhtml#idm139656385213632">21</a></sup>, a transformer and a list of names (or indices)
                  of columns that the transformer should be applied to. In this example, we specify that the numerical
                  columns should be transformed using the <code>num_pipeline</code> that we defined earlier, and the
                  categorical columns should be transformed using a <code>OneHotEncoder</code>. Finally, we apply this
                  <code>ColumnTransformer</code> to the housing data: it applies each transformer to the appropriate
                  columns and concatenates the outputs along the second axis (the transformers must return the same
                  number of rows).</p>

                <p>Note that the <code>OneHotEncoder</code> returns a sparse matrix, while the <code>num_pipeline</code>
                  returns a dense matrix. When there is such a mix of sparse and dense matrices, the
                  <code>ColumnTransformer</code> estimates the density of the final matrix (i.e., the ratio of non-zero
                  cells), and it returns a sparse matrix if the density is lower than a given threshold (by default,
                  <code>sparse_threshold=0.3</code>). In this example, it returns a dense matrix. And that’s it! We have
                  a preprocessing pipeline that takes the full housing data and applies the appropriate transformations
                  to each column.</p>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>Instead of a transformer, you can specify the string <code>"drop"</code> if you want the columns to
                    be dropped. Or you can specify <code>"passthrough"</code> if you want the columns to be left
                    untouched. By default, the remaining columns (i.e., the ones that were not listed) will be dropped,
                    but you can set the <code>remainder</code> hyperparameter to any transformer (or to
                    <code>"passthrough"</code>) if you want these columns to be handled differently.</p>
                </div>

                <p>If you are using Scikit-Learn 0.19 or earlier, you can use a third-party library such as
                  <code>sklearn-pandas</code>, or roll out your own custom transformer to get the same functionality as
                  the <code>ColumnTransformer</code>. Alternatively, you can use the <code>FeatureUnion</code> class
                  which can also apply different transformers and concatenate their outputs, but you cannot specify
                  different columns for each transformer, they all apply to the whole data. It is possible to work
                  around this limitation using a custom transformer for column selection (see the Jupyter notebook for
                  an example).</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Select and Train a Model">
          <div class="sect1" id="idm139656387329312">
            <h1>Select and Train a Model</h1>

            <p>At last! <a data-type="indexterm" data-primary="transformation pipelines" data-startref="tp2"
                id="idm139656385202528" /><a data-type="indexterm" data-primary="Scikit-Learn"
                data-secondary="Pipeline constructor" data-startref="sl2p" id="idm139656385201552" /><a
                data-type="indexterm" data-primary="Pipeline constructor" data-startref="pc2"
                id="idm139656385200336" /><a data-type="indexterm" data-primary="data"
                data-secondary="preparing for Machine Learning algorithms" data-startref="d2pfmla"
                id="idm139656385199392" /><a data-type="indexterm" data-primary="algorithms"
                data-secondary="preparing data for" data-startref="a2pdf" id="idm139656385198144" />You framed the
              problem, you got the data and explored it, you sampled a training set and a test set, and you wrote
              transformation pipelines to clean up and prepare your data for Machine Learning algorithms automatically.
              You are now ready to select and train a Machine Learning model.</p>








            <section data-type="sect2" data-pdf-bookmark="Training and Evaluating on the Training Set">
              <div class="sect2" id="idm139656385196368">
                <h2>Training and Evaluating on the Training Set</h2>

                <p>The <a data-type="indexterm" data-primary="training set" id="ts2" />good news is that thanks to all
                  these previous steps, things are now going to be much simpler than you might think. Let’s first train
                  a <a data-type="indexterm" data-primary="Linear Regression" id="idm139656385193408" /><a
                    data-type="indexterm" data-primary="regression models" data-secondary="linear"
                    id="idm139656385192736" /><a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.linear_model.LinearRegression" id="idm139656385191792" />Linear Regression
                  model, like we did in the previous chapter:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LinearRegression</code>

<code class="n">lin_reg</code> <code class="o">=</code> <code class="n">LinearRegression</code><code class="p">()</code>
<code class="n">lin_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

                <p>Done! You now have a working Linear Regression model. Let’s try it out on a few instances from the
                  training set:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">some_data</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">iloc</code><code class="p">[:</code><code class="mi">5</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">some_labels</code> <code class="o">=</code> <code class="n">housing_labels</code><code class="o">.</code><code class="n">iloc</code><code class="p">[:</code><code class="mi">5</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">some_data_prepared</code> <code class="o">=</code> <code class="n">full_pipeline</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">some_data</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">print</code><code class="p">(</code><code class="s">"Predictions:"</code><code class="p">,</code> <code class="n">lin_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">some_data_prepared</code><code class="p">))</code>
<code class="go">Predictions: [ 210644.6045  317768.8069  210956.4333  59218.9888  189747.5584]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">print</code><code class="p">(</code><code class="s">"Labels:"</code><code class="p">,</code> <code class="nb">list</code><code class="p">(</code><code class="n">some_labels</code><code class="p">))</code>
<code class="go">Labels: [286600.0, 340600.0, 196900.0, 46300.0, 254500.0]</code></pre>

                <p>It works, although the predictions are not exactly accurate (e.g., the first prediction is off by
                  close to 40%!). Let’s measure this regression model’s RMSE on the whole training set using
                  Scikit-Learn’s <code>mean_squared_error</code> <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.metrics.mean_squared_error()" id="sklmmsech2" />function:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.metrics</code> <code class="kn">import</code> <code class="n">mean_squared_error</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_predictions</code> <code class="o">=</code> <code class="n">lin_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_mse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">housing_labels</code><code class="p">,</code> <code class="n">housing_predictions</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_rmse</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">lin_mse</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_rmse</code>
<code class="go">68628.19819848922</code></pre>

                <p>Okay, this is better than nothing but clearly not a great score: most districts’
                  <code>median_housing_values</code> range between $120,000 and $265,000, so a typical prediction error
                  of $68,628 is not very satisfying. This is an example of a model <a data-type="indexterm"
                    data-primary="underfitting" id="idm139656384793040" />underfitting the training data. When this
                  happens it can mean that the features do not provide enough information to make good predictions, or
                  that the model is not powerful enough. As we saw in the previous chapter, the main ways to fix
                  underfitting are to select a more powerful model, to feed the training algorithm with better features,
                  or to reduce the constraints on the model. This model is not regularized, so this rules out the last
                  option. You could try to add more features (e.g., the log of the population), but first let’s try a
                  more complex model to see how it does.</p>

                <p>Let’s train a <code>DecisionTreeRegressor</code>. This is a powerful model, capable of finding
                  complex nonlinear relationships in the <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.tree.DecisionTreeRegressor" id="idm139656384791024" /><a
                    data-type="indexterm" data-primary="Decision Trees" id="dt2" />data (Decision Trees are presented in
                  more detail in <a data-type="xref" href="ch06.xhtml#trees_chapter">Chapter 6</a>). The code should
                  look familiar by now:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.tree</code> <code class="kn">import</code> <code class="n">DecisionTreeRegressor</code>

<code class="n">tree_reg</code> <code class="o">=</code> <code class="n">DecisionTreeRegressor</code><code class="p">()</code>
<code class="n">tree_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

                <p>Now that the model is trained, let’s evaluate it on the training <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.metrics.mean_squared_error()"
                    data-startref="sklmmsech2" id="idm139656384741968" />set:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_predictions</code> <code class="o">=</code> <code class="n">tree_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tree_mse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">housing_labels</code><code class="p">,</code> <code class="n">housing_predictions</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tree_rmse</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">tree_mse</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tree_rmse</code>
<code class="go">0.0</code></pre>

                <p>Wait, what!? No error at all? Could this model really be absolutely perfect? Of course, it is much
                  more likely that the model has badly overfit the data. How can you be sure? As we saw earlier, you
                  don’t want to touch the test set until you are ready to launch a model you are confident about, so you
                  need to use part of the training set for training, and part for <a data-type="indexterm"
                    data-primary="training set" data-startref="ts2" id="idm139656384891328" /><a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.model_selection.train_test_split()"
                    id="idm139656384890480" />model validation.</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Better Evaluation Using Cross-Validation">
              <div class="sect2" id="idm139656385195776">
                <h2>Better Evaluation Using Cross-Validation</h2>

                <p>One <a data-type="indexterm" data-primary="cross-validation" id="cv2" />way to evaluate the Decision
                  Tree model would be to use the <code>train_test_split</code> function to split the training set into a
                  smaller training set and a validation set, then train your models against the smaller training set and
                  evaluate them against the validation set. It’s a bit of work, but nothing too difficult and it would
                  work fairly well.</p>

                <p>A great alternative is to use <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="cross-validation" id="sl2cv" /><a data-type="indexterm"
                    data-primary="K-fold cross-validation" id="kfcv2" />Scikit-Learn’s <em>K-fold cross-validation</em>
                  feature. The following code randomly splits the training set into 10 distinct subsets called
                  <em>folds</em>, <a data-type="indexterm" data-primary="folds" id="idm139656384881968" />then it trains
                  and evaluates the Decision Tree model 10 times, picking a different fold for evaluation every time and
                  training on the other 9 folds. The result is an array containing the <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.model_selection.cross_val_score()"
                    id="sklmscvsch2" />10 evaluation scores:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">cross_val_score</code>
<code class="n">scores</code> <code class="o">=</code> <code class="n">cross_val_score</code><code class="p">(</code><code class="n">tree_reg</code><code class="p">,</code> <code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">,</code>
                         <code class="n">scoring</code><code class="o">=</code><code class="s2">"neg_mean_squared_error"</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">10</code><code class="p">)</code>
<code class="n">tree_rmse_scores</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="o">-</code><code class="n">scores</code><code class="p">)</code></pre>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>Scikit-Learn’s cross-validation features expect a utility function (greater is better) rather than
                    a cost function (lower is better), so the scoring function is actually the opposite of the MSE
                    (i.e., a negative value), which is why the preceding code computes <code>-scores</code> before
                    calculating the square root.</p>
                </div>

                <p>Let’s look at the results:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="k">def</code> <code class="nf">display_scores</code><code class="p">(</code><code class="n">scores</code><code class="p">):</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="s">"Scores:"</code><code class="p">,</code> <code class="n">scores</code><code class="p">)</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="s">"Mean:"</code><code class="p">,</code> <code class="n">scores</code><code class="o">.</code><code class="n">mean</code><code class="p">())</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="s">"Standard deviation:"</code><code class="p">,</code> <code class="n">scores</code><code class="o">.</code><code class="n">std</code><code class="p">())</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">display_scores</code><code class="p">(</code><code class="n">tree_rmse_scores</code><code class="p">)</code>
<code class="go">Scores: [70194.33680785 66855.16363941 72432.58244769 70758.73896782</code>
<code class="go"> 71115.88230639 75585.14172901 70262.86139133 70273.6325285</code>
<code class="go"> 75366.87952553 71231.65726027]</code>
<code class="go">Mean: 71407.68766037929</code>
<code class="go">Standard deviation: 2439.4345041191004</code></pre>

                <p>Now the Decision Tree doesn’t look as good as it did earlier. In fact, it seems to perform worse than
                  the Linear Regression model! Notice that cross-validation allows you to get not only an estimate of
                  the performance of your model, but also a measure of how precise this estimate is (i.e., its standard
                  deviation). The Decision Tree has a score of approximately 71,407, generally ±2,439. You would not
                  have this information if you just used one validation set. But cross-validation comes at the cost of
                  training the model several times, so it is not always possible.</p>

                <p>Let’s compute the same scores for the Linear Regression model just to be <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.model_selection.cross_val_score()"
                    data-startref="sklmscvsch2" id="idm139656384569024" />sure:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">lin_scores</code> <code class="o">=</code> <code class="n">cross_val_score</code><code class="p">(</code><code class="n">lin_reg</code><code class="p">,</code> <code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">,</code>
<code class="gp">... </code>                             <code class="n">scoring</code><code class="o">=</code><code class="s">"neg_mean_squared_error"</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">10</code><code class="p">)</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_rmse_scores</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="o">-</code><code class="n">lin_scores</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">display_scores</code><code class="p">(</code><code class="n">lin_rmse_scores</code><code class="p">)</code>
<code class="go">Scores: [66782.73843989 66960.118071   70347.95244419 74739.57052552</code>
<code class="go"> 68031.13388938 71193.84183426 64969.63056405 68281.61137997</code>
<code class="go"> 71552.91566558 67665.10082067]</code>
<code class="go">Mean: 69052.46136345083</code>
<code class="go">Standard deviation: 2731.674001798348</code></pre>

                <p>That’s right: the Decision Tree model is overfitting so badly that it performs worse than <a
                    data-type="indexterm" data-primary="Decision Trees" data-startref="dt2"
                    id="idm139656384533536" />the Linear Regression model.</p>

                <p>Let’s try one last model now: the <code>RandomForestRegressor</code>. As we will see in <a
                    data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>, <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.ensemble.RandomForestRegressor"
                    id="idm139656384485408" /><a data-type="indexterm" data-primary="Random Forests" id="rf2" />Random
                  Forests work by training many Decision Trees on random subsets of the features, then averaging out
                  their predictions. Building a model on top of many other models is <a data-type="indexterm"
                    data-primary="Ensemble Learning" id="idm139656384483104" />called <em>Ensemble Learning</em>, and it
                  is often a great way to push ML algorithms even further. We will skip most of the code since it is
                  essentially the same as for the other models:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">RandomForestRegressor</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">forest_reg</code> <code class="o">=</code> <code class="n">RandomForestRegressor</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">forest_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="p">[</code><code class="o">...</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">forest_rmse</code>
<code class="go">18603.515021376355</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">display_scores</code><code class="p">(</code><code class="n">forest_rmse_scores</code><code class="p">)</code>
<code class="go">Scores: [49519.80364233 47461.9115823  50029.02762854 52325.28068953</code>
<code class="go"> 49308.39426421 53446.37892622 48634.8036574  47585.73832311</code>
<code class="go"> 53490.10699751 50021.5852922 ]</code>
<code class="go">Mean: 50182.303100336096</code>
<code class="go">Standard deviation: 2097.0810550985693</code></pre>

                <p>Wow, this is much better: Random Forests look very promising. However, note that the score on the
                  training set is still much lower than on the validation sets, meaning that the model is still
                  overfitting the training set. Possible solutions for overfitting are to simplify the model, constrain
                  it (i.e., regularize it), or get a lot more training data. However, before you dive much deeper in
                  Random Forests, you should try out many other models from various categories of Machine Learning
                  algorithms (several Support Vector Machines with different kernels, possibly a neural network, etc.),
                  without spending too much time tweaking the hyperparameters. The goal is to shortlist a few (two to
                  five) promising models.</p>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>You should save every model you experiment with, so you can come back easily to any model you want.
                    Make sure you save both the hyperparameters and the trained parameters, as well as the
                    cross-validation scores and perhaps the actual predictions as well. This will allow you to easily
                    compare scores across model types, and compare the types of errors they make. You can easily save
                    Scikit-Learn models by using <a data-type="indexterm" data-primary="Python" data-secondary="pickle"
                      id="idm139656384412624" />Python’s <code>pickle</code> module, or <a data-type="indexterm"
                      data-primary="Scikit-Learn" data-secondary="sklearn.externals.joblib"
                      id="idm139656384411136" />using <code>sklearn.externals.joblib</code>, which is more efficient at
                    serializing <a data-type="indexterm" data-primary="cross-validation" data-startref="cv2"
                      id="idm139656384409616" /><a data-type="indexterm" data-primary="Scikit-Learn"
                      data-secondary="cross-validation" data-startref="sl2cv" id="idm139656384408672" /><a
                      data-type="indexterm" data-primary="K-fold cross-validation" data-startref="kfcv2"
                      id="idm139656384407456" />large NumPy arrays:</p>

                  <pre data-type="programlisting"
                    data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.externals</code> <code class="kn">import</code> <code class="n">joblib</code>

<code class="n">joblib</code><code class="o">.</code><code class="n">dump</code><code class="p">(</code><code class="n">my_model</code><code class="p">,</code> <code class="s2">"my_model.pkl"</code><code class="p">)</code>
<code class="c1"># and later...</code>
<code class="n">my_model_loaded</code> <code class="o">=</code> <code class="n">joblib</code><code class="o">.</code><code class="n">load</code><code class="p">(</code><code class="s2">"my_model.pkl"</code><code class="p">)</code></pre>
                </div>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Fine-Tune Your Model">
          <div class="sect1" id="idm139656384888752">
            <h1>Fine-Tune Your Model</h1>

            <p>Let’s <a data-type="indexterm" data-primary="grid search" id="gs2" />assume that you now have a shortlist
              of promising models. You now need to fine-tune them. Let’s look at a few ways you can do that.</p>








            <section data-type="sect2" data-pdf-bookmark="Grid Search">
              <div class="sect2" id="idm139656384395152">
                <h2>Grid Search</h2>

                <p>One way to do that would be to fiddle with the <a data-type="indexterm"
                    data-primary="hyperparameters" id="hp2" />hyperparameters manually, until you find a great
                  combination of hyperparameter values. This would be very tedious work, and you may not have time to
                  explore many combinations.</p>

                <p>Instead you should get <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.GridSearchCV" id="sklmsgscvch2" /><a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.ensemble.RandomForestRegressor"
                    id="sklerfrfch2" />Scikit-Learn’s <code>GridSearchCV</code> to search for you. All you need to do is
                  tell it which hyperparameters you want it to experiment with, and what values to try out, and it will
                  evaluate all the possible combinations of hyperparameter values, using cross-validation. For example,
                  the following code searches for the best combination of hyperparameter values <a data-type="indexterm"
                    data-primary="Random Forests" data-startref="rf2" id="idm139656384378256" />for the
                  <code>RandomForestRegressor</code>:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">GridSearchCV</code>

<code class="n">param_grid</code> <code class="o">=</code> <code class="p">[</code>
    <code class="p">{</code><code class="s1">'n_estimators'</code><code class="p">:</code> <code class="p">[</code><code class="mi">3</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">30</code><code class="p">],</code> <code class="s1">'max_features'</code><code class="p">:</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">8</code><code class="p">]},</code>
    <code class="p">{</code><code class="s1">'bootstrap'</code><code class="p">:</code> <code class="p">[</code><code class="bp">False</code><code class="p">],</code> <code class="s1">'n_estimators'</code><code class="p">:</code> <code class="p">[</code><code class="mi">3</code><code class="p">,</code> <code class="mi">10</code><code class="p">],</code> <code class="s1">'max_features'</code><code class="p">:</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">]},</code>
  <code class="p">]</code>

<code class="n">forest_reg</code> <code class="o">=</code> <code class="n">RandomForestRegressor</code><code class="p">()</code>

<code class="n">grid_search</code> <code class="o">=</code> <code class="n">GridSearchCV</code><code class="p">(</code><code class="n">forest_reg</code><code class="p">,</code> <code class="n">param_grid</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">5</code><code class="p">,</code>
                           <code class="n">scoring</code><code class="o">=</code><code class="s1">'neg_mean_squared_error'</code><code class="p">,</code>
                           <code class="n">return_train_score</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>

<code class="n">grid_search</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_prepared</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>When you have no idea what value a hyperparameter should have, a simple approach is to try out
                    consecutive powers of 10 (or a smaller number if you want a more fine-grained search, as shown in
                    this example with the <code>n_estimators</code> hyperparameter).</p>
                </div>

                <p>This <code>param_grid</code> tells Scikit-Learn to first evaluate all 3 × 4 = 12 combinations of
                  <code>n_estimators</code> and <code>max_features</code> hyperparameter values specified in the first
                  <code>dict</code> (don’t worry about what these hyperparameters mean for now; they will be explained
                  in <a data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>), then try all 2 × 3 = 6
                  combinations of hyperparameter values in the second <code>dict</code>, but this time with the
                  <code>bootstrap</code> <a data-type="indexterm" data-primary="bootstrapping"
                    id="idm139656384284944" />hyperparameter set to <code>False</code> instead of <code>True</code>
                  (which is the default value for this hyperparameter).</p>

                <p>All in all, the grid search will explore 12 + 6 = 18 combinations of
                  <code>RandomForestRegressor</code> hyperparameter values, and it will train each model five times
                  (since we are using five-fold cross validation). In other words, all in all, there will be 18 × 5 = 90
                  rounds of training! It may take quite a long time, but when it is done you can get the best
                  combination of parameters like this:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">grid_search</code><code class="o">.</code><code class="n">best_params_</code>
<code class="go">{'max_features': 8, 'n_estimators': 30}</code></pre>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>Since 8 and 30 are the maximum values that were evaluated, you should probably try searching again
                    with higher values, since the score may continue to improve.</p>
                </div>

                <p>You can also get the best estimator directly:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">grid_search</code><code class="o">.</code><code class="n">best_estimator_</code>
<code class="go">RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,</code>
<code class="go">           max_features=8, max_leaf_nodes=None, min_impurity_decrease=0.0,</code>
<code class="go">           min_impurity_split=None, min_samples_leaf=1,</code>
<code class="go">           min_samples_split=2, min_weight_fraction_leaf=0.0,</code>
<code class="go">           n_estimators=30, n_jobs=None, oob_score=False, random_state=None,</code>
<code class="go">           verbose=0, warm_start=False)</code></pre>
                <div data-type="note" epub:type="note">
                  <h6>Note</h6>
                  <p>If <code>GridSearchCV</code> is initialized with <code>refit=True</code> (which is the default),
                    then once it finds the best estimator using cross-validation, it retrains it on the whole training
                    set. This is usually a good idea since feeding it more data will likely improve its performance.</p>
                </div>

                <p>And of course the evaluation scores are also available:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cvres</code> <code class="o">=</code> <code class="n">grid_search</code><code class="o">.</code><code class="n">cv_results_</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">for</code> <code class="n">mean_score</code><code class="p">,</code> <code class="n">params</code> <code class="ow">in</code> <code class="nb">zip</code><code class="p">(</code><code class="n">cvres</code><code class="p">[</code><code class="s">"mean_test_score"</code><code class="p">],</code> <code class="n">cvres</code><code class="p">[</code><code class="s">"params"</code><code class="p">]):</code>
<code class="gp">... </code>    <code class="k">print</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="o">-</code><code class="n">mean_score</code><code class="p">),</code> <code class="n">params</code><code class="p">)</code>
<code class="gp">...</code>
<code class="go">63669.05791727153 {'max_features': 2, 'n_estimators': 3}</code>
<code class="go">55627.16171305252 {'max_features': 2, 'n_estimators': 10}</code>
<code class="go">53384.57867637289 {'max_features': 2, 'n_estimators': 30}</code>
<code class="go">60965.99185930139 {'max_features': 4, 'n_estimators': 3}</code>
<code class="go">52740.98248528835 {'max_features': 4, 'n_estimators': 10}</code>
<code class="go">50377.344409590376 {'max_features': 4, 'n_estimators': 30}</code>
<code class="go">58663.84733372485 {'max_features': 6, 'n_estimators': 3}</code>
<code class="go">52006.15355973719 {'max_features': 6, 'n_estimators': 10}</code>
<code class="go">50146.465964159885 {'max_features': 6, 'n_estimators': 30}</code>
<code class="go">57869.25504027614 {'max_features': 8, 'n_estimators': 3}</code>
<code class="go">51711.09443660957 {'max_features': 8, 'n_estimators': 10}</code>
<code class="go">49682.25345942335 {'max_features': 8, 'n_estimators': 30}</code>
<code class="go">62895.088889905004 {'bootstrap': False, 'max_features': 2, 'n_estimators': 3}</code>
<code class="go">54658.14484390074 {'bootstrap': False, 'max_features': 2, 'n_estimators': 10}</code>
<code class="go">59470.399594730654 {'bootstrap': False, 'max_features': 3, 'n_estimators': 3}</code>
<code class="go">52725.01091081235 {'bootstrap': False, 'max_features': 3, 'n_estimators': 10}</code>
<code class="go">57490.612956065226 {'bootstrap': False, 'max_features': 4, 'n_estimators': 3}</code>
<code class="go">51009.51445842374 {'bootstrap': False, 'max_features': 4, 'n_estimators': 10}</code></pre>

                <p>In this example, we obtain the best solution by setting the <code>max_features</code> hyperparameter
                  to <code>8</code>, and the <code>n_estimators</code> hyperparameter to <code>30</code>. The RMSE score
                  for this combination is 49,682, which is slightly better than the score you got earlier using the
                  default hyperparameter values (which was 50,182). Congratulations, you have successfully fine-tuned
                  your best model!</p>
                <div data-type="tip">
                  <h6>Tip</h6>
                  <p>Don’t forget that you can treat some of the data preparation steps as hyperparameters. For example,
                    the grid search will automatically find out whether or not to add a feature you were not sure about
                    (e.g., using the <code>add_bedrooms_per_room</code> hyperparameter of your
                    <code>CombinedAttributesAdder</code> transformer). It may similarly be used to automatically find
                    the best way to handle outliers, missing features, feature selection, <a data-type="indexterm"
                      data-primary="feature selection" id="idm139656384213856" />and <a data-type="indexterm"
                      data-primary="grid search" data-startref="gs2" id="idm139656384213024" /><a data-type="indexterm"
                      data-primary="hyperparameters" data-startref="hp2" id="idm139656384212048" />more.</p>
                </div>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Randomized Search">
              <div class="sect2" id="idm139656384394560">
                <h2>Randomized Search</h2>

                <p>The <a data-type="indexterm" data-primary="randomized search" id="idm139656384209328" />grid search
                  approach <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.GridSearchCV" data-startref="sklmsgscvch2"
                    id="idm139656384208464" />is fine when you are exploring relatively few combinations, like in the
                  previous example, but when the hyperparameter <em>search space</em> <a data-type="indexterm"
                    data-primary="search space" id="idm139656384206608" />is large, it is often preferable to use
                  <code>RandomizedSearchCV</code> instead. This class can be used in much the same way as the
                  <code>GridSearchCV</code> class, but instead of trying out all possible combinations, it evaluates a
                  given number of random combinations by selecting a random value for each hyperparameter at every
                  iteration. This approach has two main benefits:</p>

                <ul>
                  <li>
                    <p>If you let the randomized search run for, say, 1,000 iterations, this approach will explore 1,000
                      different values for each hyperparameter (instead of just a few values per hyperparameter with the
                      grid search approach).</p>
                  </li>
                  <li>
                    <p>You have more control over the computing budget you want to allocate to hyperparameter search,
                      simply by setting the number of iterations.</p>
                  </li>
                </ul>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Ensemble Methods">
              <div class="sect2" id="idm139656384100912">
                <h2>Ensemble Methods</h2>

                <p>Another <a data-type="indexterm" data-primary="Ensemble Learning" id="idm139656384099584" />way to
                  fine-tune your system is to try to combine the models that perform best. The group (or “ensemble”)
                  will often perform better than the best individual model (just like Random Forests perform better than
                  the individual Decision Trees they rely on), especially if the individual models make very different
                  types of errors. We will cover this topic in more detail in <a data-type="xref"
                    href="ch07.xhtml#ensembles_chapter">Chapter 7</a>.</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Analyze the Best Models and Their Errors">
              <div class="sect2" id="idm139656384097280">
                <h2>Analyze the Best Models and Their Errors</h2>

                <p>You <a data-type="indexterm" data-primary="models" data-secondary="analyzing" id="ma2" />will often
                  gain good insights on the problem by inspecting the best models. For example, the
                  <code>RandomForestRegressor</code> <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.ensemble.RandomForestRegressor" data-startref="sklerfrfch2"
                    id="idm139656384093840" />can indicate the relative importance of each attribute for making accurate
                  predictions:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">feature_importances</code> <code class="o">=</code> <code class="n">grid_search</code><code class="o">.</code><code class="n">best_estimator_</code><code class="o">.</code><code class="n">feature_importances_</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">feature_importances</code>
<code class="go">array([7.33442355e-02, 6.29090705e-02, 4.11437985e-02, 1.46726854e-02,</code>
<code class="go">       1.41064835e-02, 1.48742809e-02, 1.42575993e-02, 3.66158981e-01,</code>
<code class="go">       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,</code>
<code class="go">       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03])</code></pre>

                <p>Let’s display these importance scores next to their corresponding attribute names:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">extra_attribs</code> <code class="o">=</code> <code class="p">[</code><code class="s">"rooms_per_hhold"</code><code class="p">,</code> <code class="s">"pop_per_hhold"</code><code class="p">,</code> <code class="s">"bedrooms_per_room"</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code> <code class="o">=</code> <code class="n">full_pipeline</code><code class="o">.</code><code class="n">named_transformers_</code><code class="p">[</code><code class="s">"cat"</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cat_one_hot_attribs</code> <code class="o">=</code> <code class="nb">list</code><code class="p">(</code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">categories_</code><code class="p">[</code><code class="mi">0</code><code class="p">])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">attributes</code> <code class="o">=</code> <code class="n">num_attribs</code> <code class="o">+</code> <code class="n">extra_attribs</code> <code class="o">+</code> <code class="n">cat_one_hot_attribs</code>
<code class="gp">&gt;&gt;&gt; </code><code class="nb">sorted</code><code class="p">(</code><code class="nb">zip</code><code class="p">(</code><code class="n">feature_importances</code><code class="p">,</code> <code class="n">attributes</code><code class="p">),</code> <code class="n">reverse</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
<code class="go">[(0.3661589806181342, 'median_income'),</code>
<code class="go"> (0.1647809935615905, 'INLAND'),</code>
<code class="go"> (0.10879295677551573, 'pop_per_hhold'),</code>
<code class="go"> (0.07334423551601242, 'longitude'),</code>
<code class="go"> (0.0629090704826203, 'latitude'),</code>
<code class="go"> (0.05641917918195401, 'rooms_per_hhold'),</code>
<code class="go"> (0.05335107734767581, 'bedrooms_per_room'),</code>
<code class="go"> (0.041143798478729635, 'housing_median_age'),</code>
<code class="go"> (0.014874280890402767, 'population'),</code>
<code class="go"> (0.014672685420543237, 'total_rooms'),</code>
<code class="go"> (0.014257599323407807, 'households'),</code>
<code class="go"> (0.014106483453584102, 'total_bedrooms'),</code>
<code class="go"> (0.010311488326303787, '&lt;1H OCEAN'),</code>
<code class="go"> (0.002856474637320158, 'NEAR OCEAN'),</code>
<code class="go"> (0.00196041559947807, 'NEAR BAY'),</code>
<code class="go"> (6.028038672736599e-05, 'ISLAND')]</code></pre>

                <p>With this information, you may want to try dropping some of the less useful features (e.g.,
                  apparently only one <code>ocean_proximity</code> category is really useful, so you could try dropping
                  the others).</p>

                <p>You should also look at the specific errors that your system makes, then try to understand why it
                  makes them and what could fix the problem (adding extra features or, on the contrary, <a
                    data-type="indexterm" data-primary="models" data-secondary="analyzing" data-startref="ma2"
                    id="idm139656384046896" />getting rid of uninformative ones, cleaning up outliers, etc.).</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Evaluate Your System on the Test Set">
              <div class="sect2" id="idm139656384096944">
                <h2>Evaluate Your System on the Test Set</h2>

                <p>After <a data-type="indexterm" data-primary="models" data-secondary="evaluating on test set"
                    id="m2eots" />tweaking your models for a while, you eventually have a system that performs
                  sufficiently well. Now is the time to evaluate the final model on the test set. There is nothing
                  special about this process; just get the predictors and the labels from your test set, run your
                  <code>full_pipeline</code> to transform the data (call <code>transform()</code>, <em>not</em>
                  <code>fit_transform()</code>, you do not want to fit the test set!), and evaluate the final model on
                  the test set:</p>

                <pre data-type="programlisting"
                  data-code-language="python"><code class="n">final_model</code> <code class="o">=</code> <code class="n">grid_search</code><code class="o">.</code><code class="n">best_estimator_</code>

<code class="n">X_test</code> <code class="o">=</code> <code class="n">strat_test_set</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="n">y_test</code> <code class="o">=</code> <code class="n">strat_test_set</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code>

<code class="n">X_test_prepared</code> <code class="o">=</code> <code class="n">full_pipeline</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code>

<code class="n">final_predictions</code> <code class="o">=</code> <code class="n">final_model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test_prepared</code><code class="p">)</code>

<code class="n">final_mse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">y_test</code><code class="p">,</code> <code class="n">final_predictions</code><code class="p">)</code>
<code class="n">final_rmse</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">final_mse</code><code class="p">)</code>   <code class="c1"># =&gt; evaluates to 47,730.2</code></pre>

                <p>In some cases, such a point estimate of the generalization error will not be quite enough to convince
                  you to launch: what if it is just 0.1% better than the model currently in production? You might want
                  to have an idea of how precise this estimate is. For this, you can compute a 95% <a
                    data-type="indexterm" data-primary="confidence interval" id="idm139656383946608" /><em>confidence
                    interval</em> for the generalization error using <code>scipy.stats.t.interval()</code>:</p>

                <pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">scipy</code> <code class="kn">import</code> <code class="n">stats</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">confidence</code> <code class="o">=</code> <code class="mf">0.95</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">squared_errors</code> <code class="o">=</code> <code class="p">(</code><code class="n">final_predictions</code> <code class="o">-</code> <code class="n">y_test</code><code class="p">)</code> <code class="o">**</code> <code class="mi">2</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">stats</code><code class="o">.</code><code class="n">t</code><code class="o">.</code><code class="n">interval</code><code class="p">(</code><code class="n">confidence</code><code class="p">,</code> <code class="nb">len</code><code class="p">(</code><code class="n">squared_errors</code><code class="p">)</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code>
<code class="gp">... </code>                         <code class="n">loc</code><code class="o">=</code><code class="n">squared_errors</code><code class="o">.</code><code class="n">mean</code><code class="p">(),</code>
<code class="gp">... </code>                         <code class="n">scale</code><code class="o">=</code><code class="n">stats</code><code class="o">.</code><code class="n">sem</code><code class="p">(</code><code class="n">squared_errors</code><code class="p">)))</code>
<code class="gp">...</code>
<code class="go">array([45685.10470776, 49691.25001878])</code></pre>

                <p>The <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.metrics.mean_squared_error()" id="idm139656383833264" />performance will
                  usually be slightly worse than what you measured using cross-validation if you did a lot of
                  hyperparameter tuning (because your system ends up fine-tuned to perform well on the validation data,
                  and will likely not perform as well on unknown datasets). It is not the case in this example, but when
                  this happens you must resist the temptation to tweak the <a data-type="indexterm"
                    data-primary="hyperparameters" id="idm139656383882816" />hyperparameters to make the numbers look
                  good on the test set; the improvements would be unlikely to generalize to new data.</p>

                <p>Now comes the project prelaunch phase: you need to present your solution (highlighting what you have
                  learned, what worked and what did not, what assumptions were made, and what your system’s limitations
                  are), document everything, and create nice presentations with clear visualizations and
                  easy-to-remember <a data-type="indexterm" data-primary="models"
                    data-secondary="evaluating on test set" data-startref="m2eots" id="idm139656383881232" />statements
                  (e.g., “the median income is the number one predictor of housing prices”). In this California housing
                  example, the final performance of the system is not better than the experts’, but it may still be a
                  good idea to launch it, especially if this frees up some time for the experts so they can work on more
                  interesting and productive tasks.</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Launch, Monitor, and Maintain Your System">
          <div class="sect1" id="idm139656383879360">
            <h1>Launch, Monitor, and Maintain Your System</h1>

            <p>Perfect, you got approval to launch! You need to get your solution ready for production, in particular by
              plugging the production input data sources into your system and writing tests.</p>

            <p>You also need to write monitoring code to check your system’s live performance at regular intervals and
              trigger alerts when it drops. This is important to catch not only sudden breakage, but also performance
              degradation. This is quite common because models tend to “rot” as data evolves over time, unless the
              models are regularly trained on fresh data.</p>

            <p>Evaluating your system’s performance will require sampling the system’s predictions and evaluating them.
              This will generally require a human analysis. These analysts may be field experts, or workers on a
              crowdsourcing platform (such as Amazon Mechanical Turk or CrowdFlower). Either way, you need to plug the
              human evaluation pipeline into your system.</p>

            <p>You should also make sure you evaluate the system’s input data quality. Sometimes performance will
              degrade slightly because of a poor quality signal (e.g., a malfunctioning sensor sending random values, or
              another team’s output becoming stale), but it may take a while before your system’s performance degrades
              enough to trigger an alert. If you monitor your system’s inputs, you may catch this earlier. Monitoring
              the inputs is particularly important for online learning systems.</p>

            <p>Finally, you will generally want to train your models on a regular basis using fresh data. You should
              automate this process as much as possible. If you don’t, you are very likely to refresh your model only
              every six months (at best), and your system’s performance may fluctuate severely over time. If your system
              is an online learning system, you should make sure you save snapshots of its state at regular intervals so
              you can easily roll back to a previously working state.</p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Try It Out!">
          <div class="sect1" id="idm139656383874112">
            <h1>Try It Out!</h1>

            <p>Hopefully this chapter gave you a good idea of what a Machine Learning project looks like, and showed you
              some of the tools you can use to train a great system. As you can see, much of the work is in the data
              preparation step, building monitoring tools, setting up human evaluation pipelines, and automating regular
              model training. The Machine Learning algorithms are also important, of course, but it is probably
              preferable to be comfortable with the overall process and know three or four algorithms well rather than
              to spend all your time exploring advanced algorithms and not enough time on the overall process.</p>

            <p>So, if you have not already done so, now is a good time to pick up a laptop, select a dataset that you
              are interested in, and try to go through the whole process from A to Z. A good place to start is on a
              competition website such as <a href="http://kaggle.com/"><em
                  class="hyperlink">http://kaggle.com/</em></a>: you will have a dataset to play with, a clear goal, and
              people to share the experience with.</p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Exercises">
          <div class="sect1" id="idm139656383870000">
            <h1>Exercises</h1>

            <p>Using this chapter’s housing dataset:</p>
            <ol>
              <li>
                <p>Try a Support Vector Machine regressor (<code>sklearn.svm.SVR</code>), <a data-type="indexterm"
                    data-primary="Scikit-Learn" data-secondary="sklearn.svm.SVR" id="idm139656383866816" />with various
                  hyperparameters such as <code>kernel="linear"</code> (with various values for the <code>C</code>
                  hyperparameter) or <code>kernel="rbf"</code> (with various values for the <code>C</code> and
                  <code>gamma</code> hyperparameters). Don’t worry about what these hyperparameters mean for now. How
                  does the best <code>SVR</code> predictor perform?</p>
              </li>
              <li>
                <p>Try replacing <code>GridSearchCV</code> <a data-type="indexterm" data-primary="Scikit-Learn"
                    data-secondary="sklearn.model_selection.GridSearchCV" id="idm139656383861824" />with
                  <code>RandomizedSearchCV</code>.</p>
              </li>
              <li>
                <p>Try adding a transformer in the preparation pipeline to select only the most important attributes.
                </p>
              </li>
              <li>
                <p>Try creating a single pipeline that does the full data preparation plus the final prediction.</p>
              </li>
              <li>
                <p>Automatically explore some preparation options using <code>GridSearchCV</code>.</p>
              </li>

            </ol>

            <p>Solutions <a data-type="indexterm" data-primary="Machine Learning" data-secondary="process example"
                data-startref="mlpe2" id="idm139656383708544" />to these exercises are available in the online Jupyter
              notebooks at <a href="https://github.com/ageron/handson-ml2"><em
                  class="hyperlink">https://github.com/ageron/handson-ml2</em></a>.</p>
          </div>
        </section>







        <div data-type="footnotes">
          <p data-type="footnote" id="idm139656389571952"><sup><a
                href="ch02.xhtml#idm139656389571952-marker">1</a></sup> The example project is completely fictitious;
            the goal is just to illustrate the main steps of a Machine Learning project, not to learn anything about the
            real estate business.</p>
          <p data-type="footnote" id="idm139656389542256"><sup><a
                href="ch02.xhtml#idm139656389542256-marker">2</a></sup> The original dataset appeared in R. Kelley Pace
            and Ronald Barry, “Sparse Spatial Autoregressions,” <em>Statistics &amp; Probability Letters</em> 33, no. 3
            (1997): 291–297.</p>
          <p data-type="footnote" id="idm139656389526864"><sup><a
                href="ch02.xhtml#idm139656389526864-marker">3</a></sup> A piece of information fed to a Machine Learning
            system is often called a <em>signal</em> in reference to Shannon’s information theory: you want a high
            signal/noise ratio.</p>
          <p data-type="footnote" id="idm139656389441280"><sup><a
                href="ch02.xhtml#idm139656389441280-marker">4</a></sup> Recall that the transpose operator flips a
            column vector into a row vector (and vice versa).</p>
          <p data-type="footnote" id="idm139656389307280"><sup><a
                href="ch02.xhtml#idm139656389307280-marker">5</a></sup> The latest version of Python 3 is recommended.
            Python 2.7+ may work too, but it is now deprecated, all major scientific libraries are dropping support for
            it, so you should migrate to Python 3 as soon as possible.</p>
          <p data-type="footnote" id="idm139656389298144"><sup><a
                href="ch02.xhtml#idm139656389298144-marker">6</a></sup> We will show the installation steps using pip in
            a bash shell on a Linux or macOS system. You may need to adapt these commands to your own system. On
            Windows, we recommend installing Anaconda instead.</p>
          <p data-type="footnote" id="idm139656389223232"><sup><a
                href="ch02.xhtml#idm139656389223232-marker">7</a></sup> You may need to have administrator rights to run
            this command; if so, try prefixing it with <code>sudo</code>.</p>
          <p data-type="footnote" id="idm139656389044480"><sup><a
                href="ch02.xhtml#idm139656389044480-marker">8</a></sup> Note that Jupyter can handle multiple versions
            of Python, and even many other languages such as R or Octave.</p>
          <p data-type="footnote" id="idm139656389034368"><sup><a
                href="ch02.xhtml#idm139656389034368-marker">9</a></sup> You might also need to check legal constraints,
            such as private fields that should never be copied to unsafe datastores.</p>
          <p data-type="footnote" id="idm139656389031136"><sup><a
                href="ch02.xhtml#idm139656389031136-marker">10</a></sup> In a real project you would save this code in a
            Python file, but for now you can just write it in your Jupyter notebook.</p>
          <p data-type="footnote" id="idm139656388858672"><sup><a
                href="ch02.xhtml#idm139656388858672-marker">11</a></sup> The standard deviation is generally denoted σ
            (the Greek letter sigma), and it is the square root of the <em>variance</em>, which is the average of the
            squared deviation from the mean. When a feature has a bell-shaped <em>normal distribution</em> (also called
            a <em>Gaussian distribution</em>), which is very common, the “68-95-99.7” rule applies: about 68% of the
            values fall within 1σ of the mean, 95% within 2σ, and 99.7% within 3σ.</p>
          <p data-type="footnote" id="idm139656388682624"><sup><a
                href="ch02.xhtml#idm139656388682624-marker">12</a></sup> In this book, when a code example contains a
            mix of code and outputs, as is the case here, it is formatted like in the Python interpreter, for better
            readability: the code lines are prefixed with <code>&gt;&gt;&gt;</code> (or <code>...</code> for indented
            blocks), and the outputs have no prefix.</p>
          <p data-type="footnote" id="idm139656388572672"><sup><a
                href="ch02.xhtml#idm139656388572672-marker">13</a></sup> You will often see people set the random seed
            to 42. This number has no special property, other than to be The Answer to the Ultimate Question of Life,
            the Universe, and Everything.</p>
          <p data-type="footnote" id="idm139656388396304"><sup><a
                href="ch02.xhtml#idm139656388396304-marker">14</a></sup> The location information is actually quite
            coarse, and as a result many districts will have the exact same ID, so they will end up in the same set
            (test or train). This introduces some unfortunate sampling bias.</p>
          <p data-type="footnote" id="idm139656387984560"><sup><a
                href="ch02.xhtml#idm139656387984560-marker">15</a></sup> If you are reading this in grayscale, grab a
            red pen and scribble over most of the coastline from the Bay Area down to San Diego (as you might expect).
            You can add a patch of yellow around Sacramento as well.</p>
          <p data-type="footnote" id="idm139656387215840"><sup><a
                href="ch02.xhtml#idm139656387215840-marker">16</a></sup> For more details on the design principles, see
            “API design for machine learning software: experiences from the scikit-learn project,” L. Buitinck, G.
            Louppe, M. Blondel, F. Pedregosa, A. Müller, et al. (2013).</p>
          <p data-type="footnote" id="idm139656387071744"><sup><a
                href="ch02.xhtml#idm139656387071744-marker">17</a></sup> Some predictors also provide methods to measure
            the confidence of their predictions.</p>
          <p data-type="footnote" id="idm139656387037104"><sup><a
                href="ch02.xhtml#idm139656387037104-marker">18</a></sup> This class is available since Scikit-Learn
            0.20. If you use an earlier version, please consider upgrading, or use Pandas’
            <code>Series.factorize()</code> method.</p>
          <p data-type="footnote" id="idm139656385649504"><sup><a
                href="ch02.xhtml#idm139656385649504-marker">19</a></sup> Before Scikit-Learn 0.20, it could only encode
            integer categorical values, but since 0.20 it can also handle other types of inputs, including text
            categorical inputs.</p>
          <p data-type="footnote" id="idm139656385501616"><sup><a
                href="ch02.xhtml#idm139656385501616-marker">20</a></sup> See SciPy’s documentation for more details.</p>
          <p data-type="footnote" id="idm139656385213632"><sup><a
                href="ch02.xhtml#idm139656385213632-marker">21</a></sup> Just like for pipelines, the name can be
            anything as long as it does not contain double underscores.</p>
        </div>
      </div>
    </section>
  </div>



</body>

</html>