<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd"
  xmlns:epub="http://www.idpf.org/2007/ops">

<head>
  <link href="Style00.css" rel="stylesheet" type="text/css" />
  <link href="Style01.css" rel="stylesheet" type="text/css" />
  <link href="Style02.css" rel="stylesheet" type="text/css" />
  <link href="Style03.css" rel="stylesheet" type="text/css" />
  <style type="text/css" title="ibis-book">
    @charset "utf-8";

    #sbo-rt-content html,
    #sbo-rt-content div,
    #sbo-rt-content div,
    #sbo-rt-content span,
    #sbo-rt-content applet,
    #sbo-rt-content object,
    #sbo-rt-content iframe,
    #sbo-rt-content h1,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5,
    #sbo-rt-content h6,
    #sbo-rt-content p,
    #sbo-rt-content blockquote,
    #sbo-rt-content pre,
    #sbo-rt-content a,
    #sbo-rt-content abbr,
    #sbo-rt-content acronym,
    #sbo-rt-content address,
    #sbo-rt-content big,
    #sbo-rt-content cite,
    #sbo-rt-content code,
    #sbo-rt-content del,
    #sbo-rt-content dfn,
    #sbo-rt-content em,
    #sbo-rt-content img,
    #sbo-rt-content ins,
    #sbo-rt-content kbd,
    #sbo-rt-content q,
    #sbo-rt-content s,
    #sbo-rt-content samp,
    #sbo-rt-content small,
    #sbo-rt-content strike,
    #sbo-rt-content strong,
    #sbo-rt-content sub,
    #sbo-rt-content sup,
    #sbo-rt-content tt,
    #sbo-rt-content var,
    #sbo-rt-content b,
    #sbo-rt-content u,
    #sbo-rt-content i,
    #sbo-rt-content center,
    #sbo-rt-content dl,
    #sbo-rt-content dt,
    #sbo-rt-content dd,
    #sbo-rt-content ol,
    #sbo-rt-content ul,
    #sbo-rt-content li,
    #sbo-rt-content fieldset,
    #sbo-rt-content form,
    #sbo-rt-content label,
    #sbo-rt-content legend,
    #sbo-rt-content table,
    #sbo-rt-content caption,
    #sbo-rt-content tdiv,
    #sbo-rt-content tfoot,
    #sbo-rt-content thead,
    #sbo-rt-content tr,
    #sbo-rt-content th,
    #sbo-rt-content td,
    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content canvas,
    #sbo-rt-content details,
    #sbo-rt-content embed,
    #sbo-rt-content figure,
    #sbo-rt-content figcaption,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content output,
    #sbo-rt-content ruby,
    #sbo-rt-content section,
    #sbo-rt-content summary,
    #sbo-rt-content time,
    #sbo-rt-content mark,
    #sbo-rt-content audio,
    #sbo-rt-content video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline
    }

    #sbo-rt-content article,
    #sbo-rt-content aside,
    #sbo-rt-content details,
    #sbo-rt-content figcaption,
    #sbo-rt-content figure,
    #sbo-rt-content footer,
    #sbo-rt-content header,
    #sbo-rt-content hgroup,
    #sbo-rt-content menu,
    #sbo-rt-content nav,
    #sbo-rt-content section {
      display: block
    }

    #sbo-rt-content div {
      line-height: 1
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style: none
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content q {
      quotes: none
    }

    #sbo-rt-content blockquote:before,
    #sbo-rt-content blockquote:after,
    #sbo-rt-content q:before,
    #sbo-rt-content q:after {
      content: none
    }

    #sbo-rt-content table {
      border-collapse: collapse;
      border-spacing: 0
    }

    @page {
      margin: 5px !important
    }

    #sbo-rt-content p {
      margin: 10px 0 0;
      line-height: 125%;
      text-align: left
    }

    #sbo-rt-content p.byline {
      text-align: left;
      margin: -33px auto 35px;
      font-style: italic;
      font-weight: bold
    }

    #sbo-rt-content div.preface p+p.byline {
      margin: 1em 0 0 !important
    }

    #sbo-rt-content div.preface p.byline+p.byline {
      margin: 0 !important
    }

    #sbo-rt-content div.sect1&gt;

    p.byline {
      margin: -.25em 0 1em
    }

    #sbo-rt-content div.sect1&gt;

    p.byline+p.byline {
      margin-top: -1em
    }

    #sbo-rt-content em {
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content em strong,
    #sbo-rt-content strong em {
      font-weight: bold;
      font-style: italic;
      font-family: inherit
    }

    #sbo-rt-content strong,
    #sbo-rt-content span.bold {
      font-weight: bold
    }

    #sbo-rt-content em.replaceable {
      font-style: italic
    }

    #sbo-rt-content strong.userinput {
      font-weight: bold;
      font-style: normal
    }

    #sbo-rt-content span.bolditalic {
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content a.ulink,
    #sbo-rt-content a.xref,
    #sbo-rt-content a.email,
    #sbo-rt-content a.link,
    #sbo-rt-content a {
      text-decoration: none;
      color: #8e0012
    }

    #sbo-rt-content span.lineannotation {
      font-style: italic;
      color: #a62a2a;
      font-family: serif
    }

    #sbo-rt-content span.underline {
      text-decoration: underline
    }

    #sbo-rt-content span.strikethrough {
      text-decoration: line-through
    }

    #sbo-rt-content span.smallcaps {
      font-variant: small-caps
    }

    #sbo-rt-content span.cursor {
      background: #000;
      color: #fff
    }

    #sbo-rt-content span.smaller {
      font-size: 75%
    }

    #sbo-rt-content .boxedtext,
    #sbo-rt-content .keycap {
      border-style: solid;
      border-width: 1px;
      border-color: #000;
      padding: 1px
    }

    #sbo-rt-content span.gray50 {
      color: #7F7F7F;
    }

    #sbo-rt-content h1,
    #sbo-rt-content div.toc-title,
    #sbo-rt-content h2,
    #sbo-rt-content h3,
    #sbo-rt-content h4,
    #sbo-rt-content h5 {
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      font-weight: bold;
      text-align: left;
      page-break-after: avoid !important;
      font-family: sans-serif, "DejaVuSans"
    }

    #sbo-rt-content div.toc-title {
      font-size: 1.5em;
      margin-top: 20px !important;
      margin-bottom: 30px !important
    }

    #sbo-rt-content section[data-type="sect1"] h1 {
      font-size: 1.3em;
      color: #8e0012;
      margin: 40px 0 8px 0
    }

    #sbo-rt-content section[data-type="sect2"] h2 {
      font-size: 1.1em;
      margin: 30px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect3"] h3 {
      font-size: 1em;
      color: #555;
      margin: 20px 0 8px 0 !important
    }

    #sbo-rt-content section[data-type="sect4"] h4 {
      font-size: 1em;
      font-weight: normal;
      font-style: italic;
      margin: 15px 0 6px 0 !important
    }

    #sbo-rt-content section[data-type="chapter"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="preface"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="appendix"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="glossary"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="bibliography"]&gt;
    div&gt;
    h1,
    #sbo-rt-content section[data-type="index"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      line-height: 1;
      margin-bottom: 50px;
      color: #000;
      padding-bottom: 10px;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content span.label,
    #sbo-rt-content span.keep-together {
      font-size: inherit;
      font-weight: inherit
    }

    #sbo-rt-content div[data-type="part"] h1 {
      font-size: 2em;
      text-align: center;
      margin-top: 0 !important;
      margin-bottom: 50px;
      padding: 50px 0 10px 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content img.width-ninety {
      width: 90%
    }

    #sbo-rt-content img {
      max-width: 95%;
      margin: 0 auto;
      padding: 0
    }

    #sbo-rt-content div.figure {
      background-color: transparent;
      text-align: center !important;
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content figure {
      margin: 15px 0 15px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.figure h6,
    #sbo-rt-content figure h6,
    #sbo-rt-content figure figcaption {
      font-size: .9rem !important;
      text-align: center;
      font-weight: normal !important;
      font-style: italic;
      font-family: serif !important;
      text-transform: none !important;
      letter-spacing: normal !important;
      color: #000 !important;
      padding-top: 10px !important;
      page-break-before: avoid
    }

    #sbo-rt-content div.informalfigure {
      text-align: center !important;
      padding: 5px 0 !important
    }

    #sbo-rt-content div.sidebar {
      margin: 15px 0 10px 0 !important;
      border: 1px solid #DCDCDC;
      background-color: #F7F7F7;
      padding: 15px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content aside[data-type="sidebar"] {
      margin: 15px 0 10px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar-title,
    #sbo-rt-content aside[data-type="sidebar"] h5 {
      font-weight: bold;
      font-size: 1em;
      font-family: sans-serif;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sidebar ol,
    #sbo-rt-content div.sidebar ul,
    #sbo-rt-content aside[data-type="sidebar"] ol,
    #sbo-rt-content aside[data-type="sidebar"] ul {
      margin-left: 1.25em !important
    }

    #sbo-rt-content div.sidebar div.figure p.title,
    #sbo-rt-content aside[data-type="sidebar"] figcaption,
    #sbo-rt-content div.sidebar div.informalfigure div.caption {
      font-size: 90%;
      text-align: center;
      font-weight: normal;
      font-style: italic;
      font-family: serif !important;
      color: #000;
      padding: 5px !important;
      page-break-before: avoid;
      page-break-after: avoid
    }

    #sbo-rt-content div.sidebar div.tip,
    #sbo-rt-content div.sidebar div[data-type="tip"],
    #sbo-rt-content div.sidebar div.note,
    #sbo-rt-content div.sidebar div[data-type="note"],
    #sbo-rt-content div.sidebar div.warning,
    #sbo-rt-content div.sidebar div[data-type="warning"],
    #sbo-rt-content div.sidebar div[data-type="caution"],
    #sbo-rt-content div.sidebar div[data-type="important"] {
      margin: 20px auto 20px auto !important;
      font-size: 90%;
      width: 85%
    }

    #sbo-rt-content aside[data-type="sidebar"] p.byline {
      font-size: 90%;
      font-weight: bold;
      font-style: italic;
      text-align: center;
      text-indent: 0;
      margin: 5px auto 6px;
      page-break-after: avoid
    }

    #sbo-rt-content pre {
      white-space: pre-wrap;
      font-family: "Ubuntu Mono", monospace;
      margin: 25px 0 25px 20px;
      font-size: 85%;
      display: block;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content div.note pre.programlisting,
    #sbo-rt-content div.tip pre.programlisting,
    #sbo-rt-content div.warning pre.programlisting,
    #sbo-rt-content div.caution pre.programlisting,
    #sbo-rt-content div.important pre.programlisting {
      margin-bottom: 0
    }

    #sbo-rt-content code {
      font-family: "Ubuntu Mono", monospace;
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none;
      overflow-wrap: break-word
    }

    #sbo-rt-content code strong em,
    #sbo-rt-content code em strong,
    #sbo-rt-content pre em strong,
    #sbo-rt-content pre strong em,
    #sbo-rt-content strong code em code,
    #sbo-rt-content em code strong code,
    #sbo-rt-content span.bolditalic code {
      font-weight: bold;
      font-style: italic;
      font-family: "Ubuntu Mono BoldItal", monospace
    }

    #sbo-rt-content code em,
    #sbo-rt-content em code,
    #sbo-rt-content pre em,
    #sbo-rt-content em.replaceable {
      font-family: "Ubuntu Mono Ital", monospace;
      font-style: italic
    }

    #sbo-rt-content code strong,
    #sbo-rt-content strong code,
    #sbo-rt-content pre strong,
    #sbo-rt-content strong.userinput {
      font-family: "Ubuntu Mono Bold", monospace;
      font-weight: bold
    }

    #sbo-rt-content div[data-type="example"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div[data-type="example"] h1,
    #sbo-rt-content div[data-type="example"] h2,
    #sbo-rt-content div[data-type="example"] h3,
    #sbo-rt-content div[data-type="example"] h4,
    #sbo-rt-content div[data-type="example"] h5,
    #sbo-rt-content div[data-type="example"] h6 {
      font-style: italic;
      font-weight: normal;
      text-align: left !important;
      text-transform: none !important;
      font-family: serif !important;
      margin: 10px 0 5px 0 !important;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content li pre.example {
      padding: 10px 0 !important
    }

    #sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],
    #sbo-rt-content div[data-type="example"] pre[data-type="screen"] {
      margin: 0
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h1 {
      font-size: 2em;
      margin: 50px 0 10px 0 !important;
      line-height: 1;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] h2,
    #sbo-rt-content section[data-type="titlepage"] p.subtitle,
    #sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"] {
      font-size: 1.3em;
      font-weight: normal;
      text-align: center;
      margin-top: .5em;
      color: #555
    }

    #sbo-rt-content section[data-type="titlepage"]&gt;
    div&gt;

    h2[data-type="author"],
    #sbo-rt-content section[data-type="titlepage"] p.author {
      font-size: 1.3em;
      font-family: serif !important;
      font-weight: bold;
      margin: 50px 0 !important;
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"] p.edition {
      text-align: center;
      text-transform: uppercase;
      margin-top: 2em
    }

    #sbo-rt-content section[data-type="titlepage"] {
      text-align: center
    }

    #sbo-rt-content section[data-type="titlepage"]:after {
      content: url(css_assets/titlepage_footer_ebook.png);
      margin: 0 auto;
      max-width: 80%
    }

    #sbo-rt-content div.book div.titlepage div.publishername {
      margin-top: 60%;
      margin-bottom: 20px;
      text-align: center;
      font-size: 1.25em
    }

    #sbo-rt-content div.book div.titlepage div.locations p {
      margin: 0;
      text-align: center
    }

    #sbo-rt-content div.book div.titlepage div.locations p.cities {
      font-size: 80%;
      text-align: center;
      margin-top: 5px
    }

    #sbo-rt-content section.preface[title="Dedication"]&gt;

    div.titlepage h2.title {
      text-align: center;
      text-transform: uppercase;
      font-size: 1.5em;
      margin-top: 50px;
      margin-bottom: 50px
    }

    #sbo-rt-content ul.stafflist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.stafflist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content ul.printings li {
      list-style-type: none
    }

    #sbo-rt-content section.preface[title="Dedication"] p {
      font-style: italic;
      text-align: center
    }

    #sbo-rt-content div.colophon h1.title {
      font-size: 1.3em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon h2.subtitle {
      margin: 0 !important;
      color: #000;
      font-family: serif !important;
      font-size: 1em;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.author h3.author {
      font-size: 1.1em;
      font-family: serif !important;
      margin: 10px 0 0 !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h4,
    #sbo-rt-content div.colophon div.editor h3.editor {
      color: #000;
      font-size: .8em;
      margin: 15px 0 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.editor h3.editor {
      font-size: .8em;
      margin: 0 !important;
      font-family: serif !important;
      font-weight: normal
    }

    #sbo-rt-content div.colophon div.publisher {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon div.publisher p,
    #sbo-rt-content div.colophon div.publisher span.publishername {
      margin: 0;
      font-size: .8em
    }

    #sbo-rt-content div.legalnotice p,
    #sbo-rt-content div.timestamp p {
      font-size: .8em
    }

    #sbo-rt-content div.timestamp p {
      margin-top: 10px
    }

    #sbo-rt-content div.colophon[title="About the Author"] h1.title,
    #sbo-rt-content div.colophon[title="Colophon"] h1.title {
      font-size: 1.5em;
      margin: 0 !important;
      font-family: sans-serif !important
    }

    #sbo-rt-content section.chapter div.titlepage div.author {
      margin: 10px 0 10px 0
    }

    #sbo-rt-content section.chapter div.titlepage div.author div.affiliation {
      font-style: italic
    }

    #sbo-rt-content div.attribution {
      margin: 5px 0 0 50px !important
    }

    #sbo-rt-content h3.author span.orgname {
      display: none
    }

    #sbo-rt-content div.epigraph {
      margin: 10px 0 10px 20px !important;
      page-break-inside: avoid;
      font-size: 90%
    }

    #sbo-rt-content div.epigraph p {
      font-style: italic
    }

    #sbo-rt-content blockquote,
    #sbo-rt-content div.blockquote {
      margin: 10px !important;
      page-break-inside: avoid;
      font-size: 95%
    }

    #sbo-rt-content blockquote p,
    #sbo-rt-content div.blockquote p {
      font-style: italic;
      margin: .75em 0 0 !important
    }

    #sbo-rt-content blockquote div.attribution,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      margin: 5px 0 10px 30px !important;
      text-align: right;
      width: 80%
    }

    #sbo-rt-content blockquote div.attribution p,
    #sbo-rt-content blockquote p[data-type="attribution"] {
      font-style: normal;
      margin-top: 5px
    }

    #sbo-rt-content blockquote div.attribution p:before,
    #sbo-rt-content blockquote p[data-type="attribution"]:before {
      font-style: normal;
      content: "—";
      -webkit-hyphens: none;
      hyphens: none;
      adobe-hyphenate: none
    }

    #sbo-rt-content p.right {
      text-align: right;
      margin: 0
    }

    #sbo-rt-content div[data-type="footnotes"] {
      border-top: 1px solid black;
      margin-top: 2em
    }

    #sbo-rt-content sub,
    #sbo-rt-content sup {
      font-size: 75%;
      line-height: 0;
      position: relative
    }

    #sbo-rt-content sup {
      top: -.5em
    }

    #sbo-rt-content sub {
      bottom: -.25em
    }

    #sbo-rt-content p[data-type="footnote"] {
      font-size: 90% !important;
      line-height: 1.2em !important;
      margin-left: 2.5em !important;
      text-indent: -2.3em !important
    }

    #sbo-rt-content p[data-type="footnote"] sup {
      display: inline-block !important;
      position: static !important;
      width: 2em !important;
      text-align: right !important;
      font-size: 100% !important;
      padding-right: .5em !important
    }

    #sbo-rt-content p[data-type="footnote"] a[href$="-marker"] {
      font-family: sans-serif !important;
      font-size: 90% !important;
      color: #8e0012 !important
    }

    #sbo-rt-content a[data-type="noteref"] {
      font-family: sans-serif !important;
      color: #8e0012;
      margin-left: 0;
      padding-left: 0
    }

    #sbo-rt-content div.refentry p.refname {
      font-size: 1em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold;
      margin-bottom: 5px;
      overflow: auto;
      width: 100%
    }

    #sbo-rt-content div.refentry {
      width: 100%;
      display: block;
      margin-top: 2em
    }

    #sbo-rt-content div.refsynopsisdiv {
      display: block;
      clear: both
    }

    #sbo-rt-content div.refentry header {
      page-break-inside: avoid !important;
      display: block;
      break-inside: avoid !important;
      padding-top: 0;
      border-bottom: 1px solid #000
    }

    #sbo-rt-content div.refsect1 h6 {
      font-size: .9em;
      font-family: sans-serif, "DejaVuSans";
      font-weight: bold
    }

    #sbo-rt-content div.refsect1 {
      margin-top: 3em
    }

    #sbo-rt-content dt {
      padding-top: 10px !important;
      padding-bottom: 0 !important
    }

    #sbo-rt-content dd {
      margin-left: 1.5em !important;
      margin-bottom: .25em
    }

    #sbo-rt-content dd ol,
    #sbo-rt-content dd ul {
      padding-left: 1em
    }

    #sbo-rt-content dd li {
      margin-top: 0;
      margin-bottom: 0
    }

    #sbo-rt-content dd,
    #sbo-rt-content li {
      text-align: left
    }

    #sbo-rt-content ul,
    #sbo-rt-content ul&gt;
    li,
    #sbo-rt-content ol ul,
    #sbo-rt-content ol ul&gt;
    li,
    #sbo-rt-content ul ol ul,
    #sbo-rt-content ul ol ul&gt;

    li {
      list-style-type: disc
    }

    #sbo-rt-content ul ul,
    #sbo-rt-content ul ul&gt;

    li {
      list-style-type: square
    }

    #sbo-rt-content ul ul ul,
    #sbo-rt-content ul ul ul&gt;

    li {
      list-style-type: circle
    }

    #sbo-rt-content ol,
    #sbo-rt-content ol&gt;
    li,
    #sbo-rt-content ol ul ol,
    #sbo-rt-content ol ul ol&gt;
    li,
    #sbo-rt-content ul ol,
    #sbo-rt-content ul ol&gt;

    li {
      list-style-type: decimal
    }

    #sbo-rt-content ol ol,
    #sbo-rt-content ol ol&gt;

    li {
      list-style-type: lower-alpha
    }

    #sbo-rt-content ol ol ol,
    #sbo-rt-content ol ol ol&gt;

    li {
      list-style-type: lower-roman
    }

    #sbo-rt-content ol,
    #sbo-rt-content ul {
      list-style-position: outside;
      margin: 15px 0 15px 1.25em;
      padding-left: 2.25em
    }

    #sbo-rt-content ol li,
    #sbo-rt-content ul li {
      margin: .5em 0 .65em;
      line-height: 125%
    }

    #sbo-rt-content div.orderedlistalpha {
      list-style-type: upper-alpha
    }

    #sbo-rt-content table.simplelist,
    #sbo-rt-content ul.simplelist {
      margin: 15px 0 15px 20px !important
    }

    #sbo-rt-content ul.simplelist li {
      list-style-type: none;
      padding: 5px 0
    }

    #sbo-rt-content table.simplelist td {
      border: none
    }

    #sbo-rt-content table.simplelist tr {
      border-bottom: none
    }

    #sbo-rt-content table.simplelist tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content dl.calloutlist p:first-child {
      margin-top: -25px !important
    }

    #sbo-rt-content dl.calloutlist dd {
      padding-left: 0;
      margin-top: -25px
    }

    #sbo-rt-content dl.calloutlist img,
    #sbo-rt-content a.co img {
      padding: 0
    }

    #sbo-rt-content div.toc ol {
      margin-top: 8px !important;
      margin-bottom: 8px !important;
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol ol {
      margin-left: 30px !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.toc ol li {
      list-style-type: none
    }

    #sbo-rt-content div.toc a {
      color: #8e0012
    }

    #sbo-rt-content div.toc ol a {
      font-size: 1em;
      font-weight: bold
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;

    ol a {
      font-weight: bold;
      font-size: 1em
    }

    #sbo-rt-content div.toc ol&gt;
    li&gt;
    ol&gt;
    li&gt;

    ol a {
      text-decoration: none;
      font-weight: normal;
      font-size: 1em
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"],
    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      margin: 30px !important;
      font-size: 90%;
      padding: 10px 8px 20px 8px !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.tip ol,
    #sbo-rt-content div.tip ul,
    #sbo-rt-content div[data-type="tip"] ol,
    #sbo-rt-content div[data-type="tip"] ul,
    #sbo-rt-content div.note ol,
    #sbo-rt-content div.note ul,
    #sbo-rt-content div[data-type="note"] ol,
    #sbo-rt-content div[data-type="note"] ul,
    #sbo-rt-content div.warning ol,
    #sbo-rt-content div.warning ul,
    #sbo-rt-content div[data-type="warning"] ol,
    #sbo-rt-content div[data-type="warning"] ul,
    #sbo-rt-content div[data-type="caution"] ol,
    #sbo-rt-content div[data-type="caution"] ul,
    #sbo-rt-content div[data-type="important"] ol,
    #sbo-rt-content div[data-type="important"] ul {
      margin-left: 1.5em !important
    }

    #sbo-rt-content div.tip,
    #sbo-rt-content div[data-type="tip"],
    #sbo-rt-content div.note,
    #sbo-rt-content div[data-type="note"] {
      border: 1px solid #BEBEBE;
      background-color: transparent
    }

    #sbo-rt-content div.warning,
    #sbo-rt-content div[data-type="warning"],
    #sbo-rt-content div[data-type="caution"],
    #sbo-rt-content div[data-type="important"] {
      border: 1px solid #BC8F8F
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="note"] h1,
    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1,
    #sbo-rt-content div[data-type="important"] h6 {
      font-weight: bold;
      font-size: 110%;
      font-family: sans-serif !important;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
      margin: 4px 0 6px !important
    }

    #sbo-rt-content div[data-type="tip"] figure h6,
    #sbo-rt-content div[data-type="note"] figure h6,
    #sbo-rt-content div[data-type="warning"] figure h6,
    #sbo-rt-content div[data-type="caution"] figure h6,
    #sbo-rt-content div[data-type="important"] figure h6 {
      font-family: serif !important
    }

    #sbo-rt-content div.tip h3,
    #sbo-rt-content div[data-type="tip"] h6,
    #sbo-rt-content div.note h3,
    #sbo-rt-content div[data-type="note"] h6,
    #sbo-rt-content div[data-type="tip"] h1,
    #sbo-rt-content div[data-type="note"] h1 {
      color: #737373
    }

    #sbo-rt-content div.warning h3,
    #sbo-rt-content div[data-type="warning"] h6,
    #sbo-rt-content div[data-type="caution"] h6,
    #sbo-rt-content div[data-type="important"] h6,
    #sbo-rt-content div[data-type="warning"] h1,
    #sbo-rt-content div[data-type="caution"] h1,
    #sbo-rt-content div[data-type="important"] h1 {
      color: #C67171
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,
    #sbo-rt-content div.safarienabled {
      background-color: transparent;
      margin: 8px 0 0 !important;
      border: 0 solid #BEBEBE;
      font-size: 100%;
      padding: 0 !important;
      page-break-inside: avoid
    }

    #sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,
    #sbo-rt-content div.safarienabled h6 {
      display: none
    }

    #sbo-rt-content div.table,
    #sbo-rt-content table {
      margin: 15px 0 30px 0 !important;
      max-width: 95%;
      border: none !important;
      background: none;
      display: table !important
    }

    #sbo-rt-content div.table,
    #sbo-rt-content div.informaltable,
    #sbo-rt-content table {
      page-break-inside: avoid
    }

    #sbo-rt-content tr,
    #sbo-rt-content tr td {
      border-bottom: 1px solid #c3c3c3
    }

    #sbo-rt-content thead td,
    #sbo-rt-content thead th {
      border-bottom: #9d9d9d 1px solid !important;
      border-top: #9d9d9d 1px solid !important
    }

    #sbo-rt-content tr:nth-of-type(even) {
      background-color: #f1f6fc
    }

    #sbo-rt-content thead {
      font-family: sans-serif;
      font-weight: bold
    }

    #sbo-rt-content td,
    #sbo-rt-content th {
      display: table-cell;
      padding: .3em;
      text-align: left;
      vertical-align: middle;
      font-size: 80%
    }

    #sbo-rt-content div.informaltable table {
      margin: 10px auto !important
    }

    #sbo-rt-content div.informaltable table tr {
      border-bottom: none
    }

    #sbo-rt-content div.informaltable table tr:nth-of-type(even) {
      background-color: transparent
    }

    #sbo-rt-content div.informaltable td,
    #sbo-rt-content div.informaltable th {
      border: #9d9d9d 1px solid
    }

    #sbo-rt-content div.table-title,
    #sbo-rt-content table caption {
      font-weight: normal;
      font-style: italic;
      font-family: serif;
      font-size: 1em;
      margin: 10px 0 10px 0 !important;
      padding: 0;
      page-break-after: avoid;
      text-align: left !important
    }

    #sbo-rt-content table code {
      font-size: smaller
    }

    #sbo-rt-content table.border tbody&gt;
    tr:last-child&gt;

    td {
      border-bottom: transparent
    }

    #sbo-rt-content div.equation,
    #sbo-rt-content div[data-type="equation"] {
      margin: 10px 0 15px 0 !important
    }

    #sbo-rt-content div.equation-title,
    #sbo-rt-content div[data-type="equation"] h5 {
      font-style: italic;
      font-weight: normal;
      font-family: serif !important;
      font-size: 90%;
      margin: 20px 0 10px 0 !important;
      page-break-after: avoid
    }

    #sbo-rt-content div.equation-contents {
      margin-left: 20px
    }

    #sbo-rt-content div[data-type="equation"] math {
      font-size: calc(.35em + 1vw)
    }

    #sbo-rt-content span.inlinemediaobject {
      height: .85em;
      display: inline-block;
      margin-bottom: .2em
    }

    #sbo-rt-content span.inlinemediaobject img {
      margin: 0;
      height: .85em
    }

    #sbo-rt-content div.informalequation {
      margin: 20px 0 20px 20px;
      width: 75%
    }

    #sbo-rt-content div.informalequation img {
      width: 75%
    }

    #sbo-rt-content div.index {
      text-indent: 0
    }

    #sbo-rt-content div.index h3 {
      padding: .25em;
      margin-top: 1em !important;
      background-color: #F0F0F0
    }

    #sbo-rt-content div.index li {
      line-height: 130%;
      list-style-type: none
    }

    #sbo-rt-content div.index a.indexterm {
      color: #8e0012 !important
    }

    #sbo-rt-content div.index ul {
      margin-left: 0 !important;
      padding-left: 0 !important
    }

    #sbo-rt-content div.index ul ul {
      margin-left: 1em !important;
      margin-top: 0 !important
    }

    #sbo-rt-content code.boolean,
    #sbo-rt-content .navy {
      color: rgb(0, 0, 128);
    }

    #sbo-rt-content code.character,
    #sbo-rt-content .olive {
      color: rgb(128, 128, 0);
    }

    #sbo-rt-content code.comment,
    #sbo-rt-content .blue {
      color: rgb(0, 0, 255);
    }

    #sbo-rt-content code.conditional,
    #sbo-rt-content .limegreen {
      color: rgb(50, 205, 50);
    }

    #sbo-rt-content code.constant,
    #sbo-rt-content .darkorange {
      color: rgb(255, 140, 0);
    }

    #sbo-rt-content code.debug,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.define,
    #sbo-rt-content .darkgoldenrod,
    #sbo-rt-content .gold {
      color: rgb(184, 134, 11);
    }

    #sbo-rt-content code.delimiter,
    #sbo-rt-content .dimgray {
      color: rgb(105, 105, 105);
    }

    #sbo-rt-content code.error,
    #sbo-rt-content .red {
      color: rgb(255, 0, 0);
    }

    #sbo-rt-content code.exception,
    #sbo-rt-content .salmon {
      color: rgb(250, 128, 11);
    }

    #sbo-rt-content code.float,
    #sbo-rt-content .steelblue {
      color: rgb(70, 130, 180);
    }

    #sbo-rt-content pre code.function,
    #sbo-rt-content .green {
      color: rgb(0, 128, 0);
    }

    #sbo-rt-content code.identifier,
    #sbo-rt-content .royalblue {
      color: rgb(65, 105, 225);
    }

    #sbo-rt-content code.ignore,
    #sbo-rt-content .gray {
      color: rgb(128, 128, 128);
    }

    #sbo-rt-content code.include,
    #sbo-rt-content .purple {
      color: rgb(128, 0, 128);
    }

    #sbo-rt-content code.keyword,
    #sbo-rt-content .sienna {
      color: rgb(160, 82, 45);
    }

    #sbo-rt-content code.label,
    #sbo-rt-content .deeppink {
      color: rgb(255, 20, 147);
    }

    #sbo-rt-content code.macro,
    #sbo-rt-content .orangered {
      color: rgb(255, 69, 0);
    }

    #sbo-rt-content code.number,
    #sbo-rt-content .brown {
      color: rgb(165, 42, 42);
    }

    #sbo-rt-content code.operator,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.preCondit,
    #sbo-rt-content .teal {
      color: rgb(0, 128, 128);
    }

    #sbo-rt-content code.preProc,
    #sbo-rt-content .fuschia {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.repeat,
    #sbo-rt-content .indigo {
      color: rgb(75, 0, 130);
    }

    #sbo-rt-content code.special,
    #sbo-rt-content .saddlebrown {
      color: rgb(139, 69, 19);
    }

    #sbo-rt-content code.specialchar,
    #sbo-rt-content .magenta {
      color: rgb(255, 0, 255);
    }

    #sbo-rt-content code.specialcomment,
    #sbo-rt-content .seagreen {
      color: rgb(46, 139, 87);
    }

    #sbo-rt-content code.statement,
    #sbo-rt-content .forestgreen {
      color: rgb(34, 139, 34);
    }

    #sbo-rt-content code.storageclass,
    #sbo-rt-content .plum {
      color: rgb(221, 160, 221);
    }

    #sbo-rt-content code.string,
    #sbo-rt-content .darkred {
      color: rgb(139, 0, 0);
    }

    #sbo-rt-content code.structure,
    #sbo-rt-content .chocolate {
      color: rgb(210, 106, 30);
    }

    #sbo-rt-content code.tag,
    #sbo-rt-content .darkcyan {
      color: rgb(0, 139, 139);
    }

    #sbo-rt-content code.todo,
    #sbo-rt-content .black {
      color: #000;
    }

    #sbo-rt-content code.type,
    #sbo-rt-content .mediumslateblue {
      color: rgb(123, 104, 238);
    }

    #sbo-rt-content code.typedef,
    #sbo-rt-content .darkgreen {
      color: rgb(0, 100, 0);
    }

    #sbo-rt-content code.underlined {
      text-decoration: underline;
    }

    #sbo-rt-content pre code.hll {
      background-color: #ffc
    }

    #sbo-rt-content pre code.c {
      color: #09F;
      font-style: italic
    }

    #sbo-rt-content pre code.err {
      color: #A00
    }

    #sbo-rt-content pre code.k {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.o {
      color: #555
    }

    #sbo-rt-content pre code.cm {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cp {
      color: #099
    }

    #sbo-rt-content pre code.c1 {
      color: #35586C;
      font-style: italic
    }

    #sbo-rt-content pre code.cs {
      color: #35586C;
      font-weight: bold;
      font-style: italic
    }

    #sbo-rt-content pre code.gd {
      background-color: #FCC
    }

    #sbo-rt-content pre code.ge {
      font-style: italic
    }

    #sbo-rt-content pre code.gr {
      color: #F00
    }

    #sbo-rt-content pre code.gh {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gi {
      background-color: #CFC
    }

    #sbo-rt-content pre code.go {
      color: #000
    }

    #sbo-rt-content pre code.gp {
      color: #009;
      font-weight: bold
    }

    #sbo-rt-content pre code.gs {
      font-weight: bold
    }

    #sbo-rt-content pre code.gu {
      color: #030;
      font-weight: bold
    }

    #sbo-rt-content pre code.gt {
      color: #9C6
    }

    #sbo-rt-content pre code.kc {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kd {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kn {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kp {
      color: #069
    }

    #sbo-rt-content pre code.kr {
      color: #069;
      font-weight: bold
    }

    #sbo-rt-content pre code.kt {
      color: #078;
      font-weight: bold
    }

    #sbo-rt-content pre code.m {
      color: #F60
    }

    #sbo-rt-content pre code.s {
      color: #C30
    }

    #sbo-rt-content pre code.na {
      color: #309
    }

    #sbo-rt-content pre code.nb {
      color: #366
    }

    #sbo-rt-content pre code.nc {
      color: #0A8;
      font-weight: bold
    }

    #sbo-rt-content pre code.no {
      color: #360
    }

    #sbo-rt-content pre code.nd {
      color: #99F
    }

    #sbo-rt-content pre code.ni {
      color: #999;
      font-weight: bold
    }

    #sbo-rt-content pre code.ne {
      color: #C00;
      font-weight: bold
    }

    #sbo-rt-content pre code.nf {
      color: #C0F
    }

    #sbo-rt-content pre code.nl {
      color: #99F
    }

    #sbo-rt-content pre code.nn {
      color: #0CF;
      font-weight: bold
    }

    #sbo-rt-content pre code.nt {
      color: #309;
      font-weight: bold
    }

    #sbo-rt-content pre code.nv {
      color: #033
    }

    #sbo-rt-content pre code.ow {
      color: #000;
      font-weight: bold
    }

    #sbo-rt-content pre code.w {
      color: #bbb
    }

    #sbo-rt-content pre code.mf {
      color: #F60
    }

    #sbo-rt-content pre code.mh {
      color: #F60
    }

    #sbo-rt-content pre code.mi {
      color: #F60
    }

    #sbo-rt-content pre code.mo {
      color: #F60
    }

    #sbo-rt-content pre code.sb {
      color: #C30
    }

    #sbo-rt-content pre code.sc {
      color: #C30
    }

    #sbo-rt-content pre code.sd {
      color: #C30;
      font-style: italic
    }

    #sbo-rt-content pre code.s2 {
      color: #C30
    }

    #sbo-rt-content pre code.se {
      color: #C30;
      font-weight: bold
    }

    #sbo-rt-content pre code.sh {
      color: #C30
    }

    #sbo-rt-content pre code.si {
      color: #A00
    }

    #sbo-rt-content pre code.sx {
      color: #C30
    }

    #sbo-rt-content pre code.sr {
      color: #3AA
    }

    #sbo-rt-content pre code.s1 {
      color: #C30
    }

    #sbo-rt-content pre code.ss {
      color: #A60
    }

    #sbo-rt-content pre code.bp {
      color: #366
    }

    #sbo-rt-content pre code.vc {
      color: #033
    }

    #sbo-rt-content pre code.vg {
      color: #033
    }

    #sbo-rt-content pre code.vi {
      color: #033
    }

    #sbo-rt-content pre code.il {
      color: #F60
    }

    #sbo-rt-content pre code.g {
      color: #050
    }

    #sbo-rt-content pre code.l {
      color: #C60
    }

    #sbo-rt-content pre code.l {
      color: #F90
    }

    #sbo-rt-content pre code.n {
      color: #008
    }

    #sbo-rt-content pre code.nx {
      color: #008
    }

    #sbo-rt-content pre code.py {
      color: #96F
    }

    #sbo-rt-content pre code.p {
      color: #000
    }

    #sbo-rt-content pre code.x {
      color: #F06
    }

    #sbo-rt-content div.blockquote_sampler_toc {
      width: 95%;
      margin: 5px 5px 5px 10px !important
    }

    #sbo-rt-content div {
      font-family: serif;
      text-align: left
    }

    #sbo-rt-content .gray-background,
    #sbo-rt-content .reverse-video {
      background: #2E2E2E;
      color: #FFF
    }

    #sbo-rt-content .light-gray-background {
      background: #A0A0A0
    }

    #sbo-rt-content .preserve-whitespace {
      white-space: pre-wrap
    }

    #sbo-rt-content span.gray {
      color: #4C4C4C
    }

    #sbo-rt-content .width-10 {
      width: 10vw !important
    }

    #sbo-rt-content .width-20 {
      width: 20vw !important
    }

    #sbo-rt-content .width-30 {
      width: 30vw !important
    }

    #sbo-rt-content .width-40 {
      width: 40vw !important
    }

    #sbo-rt-content .width-50 {
      width: 50vw !important
    }

    #sbo-rt-content .width-60 {
      width: 60vw !important
    }

    #sbo-rt-content .width-70 {
      width: 70vw !important
    }

    #sbo-rt-content .width-80 {
      width: 80vw !important
    }

    #sbo-rt-content .width-90 {
      width: 90vw !important
    }

    #sbo-rt-content .width-full,
    #sbo-rt-content .width-100 {
      width: 100vw !important
    }

    #sbo-rt-content div[data-type="equation"].fifty-percent img {
      width: 50%
    }
  </style>
  <style type="text/css" id="font-styles">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-size: &lt;
      %=font_size %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="font-family">
    #sbo-rt-content,
    #sbo-rt-content p,
    #sbo-rt-content div {
      font-family: &lt;
      %=font_family %&gt;
      !important;
    }
  </style>
  <style type="text/css" id="column-width">
    #sbo-rt-content {
      max-width: &lt;
      %=column_width %&gt;
      % !important;
      margin: 0 auto !important;
    }
  </style>

  <style type="text/css">
    body {
      background-color: #fbfbfb !important;
      margin: 1em;
    }

    #sbo-rt-content * {
      text-indent: 0pt !important;
    }

    #sbo-rt-content .bq {
      margin-right: 1em !important;
    }

    #sbo-rt-content * {
      word-wrap: break-word !important;
      word-break: break-word !important;
    }

    #sbo-rt-content table,
    #sbo-rt-content pre {
      overflow-x: unset !important;
      overflow: unset !important;
      overflow-y: unset !important;
      white-space: pre-wrap !important;
    }
  </style>
</head>

<body>
  <div id="sbo-rt-content">
    <section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 1. The Machine Learning Landscape">
      <div class="chapter" id="landscape_chapter">
        <h1><span class="label">Chapter 1. </span>The Machine Learning Landscape</h1>


        <p>When <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="overview"
            id="idm139656398792240" />most people hear “Machine Learning,” they picture a robot: a dependable butler or
          a deadly Terminator depending on who you ask. But Machine Learning is not just a futuristic fantasy, it’s
          already here. In fact, it has been around for decades in some specialized applications, such as <em>Optical
            Character Recognition</em> (OCR). <a data-type="indexterm"
            data-primary="Optical Character Recognition (OCR)" id="idm139656392422688" />But the first ML application
          that really became mainstream, improving the lives of hundreds of millions of people, took over the world back
          in the 1990s: it was <a data-type="indexterm" data-primary="spam filters" id="sf1" />the <em>spam filter</em>.
          Not exactly a self-aware Skynet, but it does technically qualify as Machine Learning (it has actually learned
          so well that you seldom need to flag an email as spam anymore). It was followed by hundreds of ML applications
          that now quietly power hundreds of products and features that you use regularly, from better recommendations
          to voice search.</p>

        <p>Where does Machine Learning start and where does it end? What exactly does it mean for a machine to
          <em>learn</em> something? If I download a copy of Wikipedia, has my computer really “learned” something? Is it
          suddenly smarter? In this chapter we will start by clarifying what Machine Learning is and why you may want to
          use it.</p>

        <p>Then, before we set out to explore the Machine Learning continent, we will take a look at the map and learn
          about the main regions and the most notable landmarks: supervised versus unsupervised learning, online versus
          batch learning, instance-based versus model-based learning. Then we will look at the workflow of a typical ML
          project, discuss the main challenges you may face, and cover how to evaluate and fine-tune a Machine Learning
          system.</p>

        <p>This chapter introduces a lot of fundamental concepts (and jargon) that every data scientist should know by
          heart. It will be a high-level overview (the only chapter without much code), all rather simple, but you
          should make sure everything is crystal-clear to you before continuing to the rest of the book. So grab a
          coffee and let’s get started!</p>
        <div data-type="tip">
          <h6>Tip</h6>
          <p>If you already know all the Machine Learning basics, you may want to skip directly to <a data-type="xref"
              href="ch02.xhtml#project_chapter">Chapter 2</a>. If you are not sure, try to answer all the questions
            listed at the end of the chapter before moving on.</p>
        </div>






        <section data-type="sect1" data-pdf-bookmark="What Is Machine Learning?">
          <div class="sect1" id="what_is_machine_learning">
            <h1>What Is Machine Learning?</h1>

            <p>Machine Learning <a data-type="indexterm" data-primary="Machine Learning basics"
                data-secondary="definition" id="idm139656386265152" />is the science (and art) of programming computers
              so they can <em>learn from data</em>.</p>

            <p>Here is a slightly more general definition:</p>
            <blockquote>
              <p>[Machine Learning is the] field of study that gives computers the ability to learn without being
                explicitly programmed.</p>
              <p data-type="attribution">Arthur Samuel, <cite>1959</cite></p>
            </blockquote>

            <p>And a more engineering-oriented one:</p>
            <blockquote>
              <p>A computer program is said to learn from experience E with respect to some task T and some performance
                measure P, if its performance on T, as measured by P, improves with experience E.</p>
              <p data-type="attribution">Tom Mitchell, <cite>1997</cite></p>
            </blockquote>

            <p>For <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="spam filter example"
                id="mlb1sfe" />example, your spam filter is a Machine Learning program that can learn to flag spam given
              examples of spam emails (e.g., flagged by users) and examples of regular (nonspam, also called “ham”)
              emails. The examples that the system uses to learn are called the <em>training set</em>. <a
                data-type="indexterm" data-primary="training set" id="idm139656392650240" /><a data-type="indexterm"
                data-primary="training instance" id="idm139656392649392" />Each training example is called a
              <em>training instance</em> (or <em>sample</em>). In this case, the task T is to flag spam for new emails,
              the experience E is the <em>training data</em>, <a data-type="indexterm" data-primary="training data"
                id="idm139656385784400" />and the performance measure P needs to be defined; for example, you can use
              the ratio of correctly classified emails. This particular performance measure is called <em>accuracy</em>
              <a data-type="indexterm" data-primary="accuracy" id="idm139656385782560" />and it is often used in
              classification tasks.</p>

            <p>If you just download a copy of Wikipedia, your computer has a lot more data, but it is not suddenly
              better at any task. Thus, it is not Machine Learning.</p>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Why Use Machine Learning?">
          <div class="sect1" id="idm139656385868736">
            <h1>Why Use Machine Learning?</h1>

            <p>Consider <a data-type="indexterm" data-primary="Machine Learning basics"
                data-secondary="reasons for using" id="mlb1rfu" />how you would write a spam filter using traditional
              programming techniques (<a data-type="xref" href="#traditional_approach_diagram">Figure 1-1</a>):</p>
            <ol>
              <li>
                <p>First you would look at what spam typically looks like. You might notice that some words or phrases
                  (such as “4U,” “credit card,” “free,” and “amazing”) tend to come up a lot in the subject. Perhaps you
                  would also notice a few other patterns in the sender’s name, the email’s body, and so on.</p>
              </li>
              <li>
                <p>You would write a detection algorithm for each of the patterns that you noticed, and your program
                  would flag emails as spam if a number of these patterns are detected.</p>
              </li>
              <li>
                <p>You would test your program, and repeat steps 1 and 2 until it is good enough.</p>
              </li>

            </ol>

            <figure class="smallerseventy">
              <div id="traditional_approach_diagram" class="figure">
                <img src="mlst_0101.png" alt="mlst 0101" width="1718" height="989" />
                <h6><span class="label">Figure 1-1. </span>The traditional approach</h6>
              </div>
            </figure>

            <p>Since the problem is not trivial, your program will likely become a long list of complex rules—pretty
              hard to maintain.</p>

            <p>In contrast, a spam filter based on Machine Learning techniques automatically learns which words and
              phrases are good predictors of spam by detecting unusually frequent patterns of words in the spam examples
              compared to the ham examples (<a data-type="xref" href="#ml_approach_diagram">Figure 1-2</a>). The program
              is much shorter, easier to maintain, and most likely more accurate.</p>

            <figure class="smallerseventy">
              <div id="ml_approach_diagram" class="figure">
                <img src="mlst_0102.png" alt="mlst 0102" width="1735" height="1058" />
                <h6><span class="label">Figure 1-2. </span>Machine Learning approach</h6>
              </div>
            </figure>

            <p>Moreover, if spammers notice that all their emails containing “4U” are blocked, they might start writing
              “For U” instead. A spam filter using traditional programming techniques would need to be updated to flag
              “For U” emails. If spammers keep working around your spam filter, you will need to keep writing new rules
              forever.</p>

            <p>In contrast, a spam filter based on Machine Learning techniques automatically notices that “For U” has
              become unusually frequent in spam flagged by users, and it starts flagging them without your intervention
              (<a data-type="xref" href="#adapting_to_change_diagram">Figure 1-3</a>).</p>

            <figure class="smallerseventy">
              <div id="adapting_to_change_diagram" class="figure">
                <img src="mlst_0103.png" alt="mlst 0103" width="1718" height="758" />
                <h6><span class="label">Figure 1-3. </span>Automatically adapting to change</h6>
              </div>
            </figure>

            <p>Another <a data-type="indexterm" data-primary="Machine Learning basics"
                data-secondary="spam filter example" data-startref="mlb1sfe" id="idm139656386260688" /><a
                data-type="indexterm" data-primary="spam filters" data-startref="sf1" id="idm139656386259408" />area
              where Machine Learning shines is for problems that either are too complex for traditional approaches or
              have no known algorithm. For example, consider <a data-type="indexterm" data-primary="speech recognition"
                id="idm139656386337728" />speech recognition: say you want to start simple and write a program capable
              of distinguishing the words “one” and “two.” You might notice that the word “two” starts with a high-pitch
              sound (“T”), so you could hardcode an algorithm that measures high-pitch sound intensity and use that to
              distinguish ones and twos. Obviously this technique will not scale to thousands of words spoken by
              millions of very different people in noisy environments and in dozens of languages. The best solution (at
              least today) is to write an algorithm that learns by itself, given many example recordings for each word.
            </p>

            <p>Finally, Machine Learning can help humans learn (<a data-type="xref"
                href="#data_mining_diagram">Figure 1-4</a>): ML algorithms can be inspected to see what they have
              learned (although for some algorithms this can be tricky). For instance, once the spam filter has been
              trained on enough spam, it can easily be inspected to reveal the list of words and combinations of words
              that it believes are the best predictors of spam. Sometimes this will reveal unsuspected correlations or
              new trends, and thereby lead to a better understanding of the problem.</p>

            <p>Applying <a data-type="indexterm" data-primary="data mining" id="idm139656386334288" />ML techniques to
              dig into large amounts of data can help discover patterns that were not immediately apparent. This is
              called <em>data mining</em>.</p>

            <figure class="smallerseventy">
              <div id="data_mining_diagram" class="figure">
                <img src="mlst_0104.png" alt="mlst 0104" width="2121" height="1248" />
                <h6><span class="label">Figure 1-4. </span>Machine Learning can help humans learn</h6>
              </div>
            </figure>

            <p>To summarize, Machine Learning is great for:</p>

            <ul>
              <li>
                <p>Problems for which existing solutions require a lot of hand-tuning or long
                  lists of rules: one Machine Learning algorithm can often simplify code and perform better.</p>
              </li>
              <li>
                <p>Complex problems for which there is no good solution at all using a traditional approach: the best
                  Machine Learning techniques can find a solution.</p>
              </li>
              <li>
                <p>Fluctuating environments: a Machine Learning system can adapt to new data.</p>
              </li>
              <li>
                <p>Getting insights about complex problems and large amounts <a data-type="indexterm"
                    data-primary="Machine Learning basics" data-secondary="reasons for using" data-startref="mlb1rfu"
                    id="idm139656386295280" />of data.</p>
              </li>
            </ul>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Types of Machine Learning Systems">
          <div class="sect1" id="idm139656385868176">
            <h1>Types of Machine Learning Systems</h1>

            <p>There <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="types of systems"
                id="mlb1tos" />are so many different types of Machine Learning systems that it is useful to classify
              them in broad categories based on:</p>

            <ul>
              <li>
                <p>Whether or not they are trained with human supervision (supervised, unsupervised, semisupervised, and
                  Reinforcement Learning)</p>
              </li>
              <li>
                <p>Whether or not they can learn incrementally on the fly (online versus batch learning)</p>
              </li>
              <li>
                <p>Whether they work by simply comparing new data points to known data points, or instead detect
                  patterns in the training data and build a predictive model, much like scientists do (instance-based
                  versus model-based learning)</p>
              </li>
            </ul>

            <p>These criteria are not exclusive; you can combine them in any way you like. For example, a
              state-of-the-art spam filter may learn on the fly using a deep neural network model trained using examples
              of spam and ham; this makes it an online, model-based, supervised learning system.</p>

            <p>Let’s look at each of these criteria a bit more closely.</p>








            <section data-type="sect2" data-pdf-bookmark="Supervised/Unsupervised Learning">
              <div class="sect2" id="idm139656386283504">
                <h2>Supervised/Unsupervised Learning</h2>

                <p>Machine <a data-type="indexterm" data-primary="supervised learning" id="sl1" /><a
                    data-type="indexterm" data-primary="Machine Learning basics" data-secondary="types of systems"
                    data-tertiary="supervised/unsupervised learning" id="mlb1tossul" />Learning systems can be
                  classified according to the amount and type of supervision they get during training. There are four
                  major categories: supervised learning, unsupervised learning, semisupervised learning, and
                  Reinforcement Learning.</p>










                <section data-type="sect3" data-pdf-bookmark="Supervised learning">
                  <div class="sect3" id="idm139656385769760">
                    <h3>Supervised learning</h3>

                    <p>In <em>supervised learning</em>, the training data you feed to the algorithm includes the desired
                      solutions, <a data-type="indexterm" data-primary="labels" id="idm139656385767616" />called
                      <em>labels</em> (<a data-type="xref" href="#supervised_learning_diagram">Figure 1-5</a>).</p>

                    <figure>
                      <div id="supervised_learning_diagram" class="figure">
                        <img src="mlst_0105.png" alt="mlst 0105" width="2693" height="863" />
                        <h6><span class="label">Figure 1-5. </span>A labeled training set for supervised learning (e.g.,
                          spam classification)</h6>
                      </div>
                    </figure>

                    <p>A typical supervised learning task <a data-type="indexterm"
                        data-primary="classification versus regression" id="idm139656386331568" />is
                      <em>classification</em>. The <a data-type="indexterm" data-primary="spam filters"
                        id="idm139656386330272" />spam filter is a good example of this: it is trained with many example
                      emails along with their <em>class</em> (spam or ham), and it must learn how to classify new
                      emails.</p>

                    <p>Another typical task is to predict a <em>target</em> numeric value, such as the price of a car,
                      given a set of <em>features</em> (mileage, age, brand, etc.) called <em>predictors</em>. <a
                        data-type="indexterm" data-primary="predictors" id="idm139656386326944" />This sort of task is
                      <a data-type="indexterm" data-primary="regression" id="idm139656386326080" />called
                      <em>regression</em> (<a data-type="xref" href="#regression_diagram">Figure 1-6</a>).<sup><a
                          data-type="noteref" id="idm139656386323968-marker"
                          href="ch01.xhtml#idm139656386323968">1</a></sup> To train the system, you need to give it many
                      examples of cars, including both their predictors and their labels (i.e., their prices).</p>
                    <div data-type="note" epub:type="note">
                      <h6>Note</h6>
                      <p>In Machine Learning <a data-type="indexterm" data-primary="Machine Learning basics"
                          data-secondary="attributes" id="idm139656386321296" /><a data-type="indexterm"
                          data-primary="attributes" id="idm139656386390224" />an <em>attribute</em> is a data type
                        (e.g., “Mileage”), while a <em>feature</em> <a data-type="indexterm"
                          data-primary="Machine Learning basics" data-secondary="features" id="idm139656386388592" /><a
                          data-type="indexterm" data-primary="features" id="idm139656386387584" />has several meanings
                        depending on the context, but generally means an attribute plus its value (e.g., “Mileage =
                        15,000”). Many people use the words <em>attribute</em> and <em>feature</em> interchangeably,
                        though.</p>
                    </div>

                    <figure>
                      <div id="regression_diagram" class="figure">
                        <img src="mlst_0106.png" alt="mlst 0106" width="1890" height="961" />
                        <h6><span class="label">Figure 1-6. </span>Regression</h6>
                      </div>
                    </figure>

                    <p>Note that some regression algorithms can be used for classification as well, and vice versa. For
                      example, <em>Logistic Regression</em> <a data-type="indexterm" data-primary="Logistic Regression"
                        id="idm139656386382816" />is commonly used for classification, as it can output a value that
                      corresponds to the probability of belonging to a given class (e.g., 20% chance of being spam).</p>

                    <p>Here are some of the most important supervised learning algorithms (covered in this book):</p>

                    <ul>
                      <li>
                        <p>k-Nearest Neighbors</p>
                      </li>
                      <li>
                        <p>Linear Regression</p>
                      </li>
                      <li>
                        <p>Logistic Regression</p>
                      </li>
                      <li>
                        <p>Support Vector Machines (SVMs)</p>
                      </li>
                      <li>
                        <p>Decision Trees and Random Forests<a data-type="indexterm" data-primary="supervised learning"
                            data-startref="sl1" id="idm139656386358224" /></p>
                      </li>
                      <li>
                        <p>Neural networks<sup><a data-type="noteref" id="idm139656386356240-marker"
                              href="ch01.xhtml#idm139656386356240">2</a></sup></p>
                      </li>
                    </ul>
                  </div>
                </section>













                <section data-type="sect3" data-pdf-bookmark="Unsupervised learning">
                  <div class="sect3" id="idm139656385769232">
                    <h3>Unsupervised learning</h3>

                    <p>In <em>unsupervised learning</em>, <a data-type="indexterm" data-primary="unsupervised learning"
                        id="ul1" />as you might guess, the training data is unlabeled (<a data-type="xref"
                        href="#unsupervised_learning_diagram">Figure 1-7</a>). The system tries to learn without a
                      teacher.</p>

                    <figure class="smallersixty">
                      <div id="unsupervised_learning_diagram" class="figure">
                        <img src="mlst_0107.png" alt="mlst 0107" width="1954" height="929" />
                        <h6><span class="label">Figure 1-7. </span>An unlabeled training set for unsupervised learning
                        </h6>
                      </div>
                    </figure>

                    <p>Here are some of the most important unsupervised learning algorithms (most of these are covered
                      in <a data-type="xref" href="ch08.xhtml#dimensionality_chapter">Chapter 8</a> and <a
                        data-type="xref" href="ch09.xhtml#unsupervised_learning_chapter">Chapter 9</a>):</p>

                    <ul>
                      <li>
                        <p>Clustering</p>

                        <ul>
                          <li>
                            <p>K-Means</p>
                          </li>
                          <li>
                            <p>DBSCAN</p>
                          </li>
                          <li>
                            <p>Hierarchical Cluster Analysis (HCA)</p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p>Anomaly detection and novelty detection</p>

                        <ul>
                          <li>
                            <p>One-class SVM</p>
                          </li>
                          <li>
                            <p>Isolation Forest</p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p>Visualization and dimensionality reduction</p>

                        <ul>
                          <li>
                            <p>Principal Component Analysis (PCA)</p>
                          </li>
                          <li>
                            <p>Kernel PCA</p>
                          </li>
                          <li>
                            <p>Locally-Linear Embedding (LLE)</p>
                          </li>
                          <li>
                            <p>t-distributed Stochastic Neighbor Embedding (t-SNE)</p>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <p>Association rule <a data-type="indexterm" data-primary="unsupervised learning"
                            data-secondary="association rule learning" id="idm139656386307392" />learning</p>

                        <ul>
                          <li>
                            <p>Apriori</p>
                          </li>
                          <li>
                            <p>Eclat</p>
                          </li>
                        </ul>
                      </li>
                    </ul>

                    <p>For example, say you have a lot of data about your blog’s visitors. You may want to run a
                      <em>clustering</em> algorithm <a data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="clustering" id="idm139656386302640" /><a data-type="indexterm"
                        data-primary="clustering algorithms" id="idm139656386301632" />to try to detect groups of
                      similar visitors (<a data-type="xref" href="#clustering_diagram">Figure 1-8</a>). At no point do
                      you tell the algorithm which group a visitor belongs to: it finds those connections without your
                      help. For example, it might notice that 40% of your visitors are males who love comic books and
                      generally read your blog in the evening, while 20% are young sci-fi lovers who visit during the
                      weekends, and so on. If you use <a data-type="indexterm" data-primary="hierarchical clustering"
                        id="idm139656386299616" />a <em>hierarchical clustering</em> algorithm, it may also subdivide
                      each group into smaller groups. This may help you target your posts for each group.</p>

                    <figure class="smallersixty">
                      <div id="clustering_diagram" class="figure">
                        <img src="mlst_0108.png" alt="mlst 0108" width="1938" height="937" />
                        <h6><span class="label">Figure 1-8. </span>Clustering</h6>
                      </div>
                    </figure>

                    <p><em>Visualization</em> algorithms <a data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="visualization algorithms" id="idm139656386498192" /><a data-type="indexterm"
                        data-primary="visualization algorithms" id="visalgchap1" />are also good examples of
                      unsupervised learning algorithms: you feed them a lot of complex and unlabeled data, and they
                      output a 2D or 3D representation of your data that can easily be plotted (<a data-type="xref"
                        href="#socher_ganjoo_manning_ng_2013">Figure 1-9</a>). These algorithms try to preserve as much
                      structure as they can (e.g., trying to keep separate clusters in the input space from overlapping
                      in the visualization), so you can understand how the data is organized and perhaps identify
                      unsuspected patterns.</p>

                    <figure class="smallerninety">
                      <div id="socher_ganjoo_manning_ng_2013" class="figure">
                        <img src="mlst_0109.png" alt="mlst 0109" width="1149" height="757" />
                        <h6><span class="label">Figure 1-9. </span>Example of a t-SNE visualization highlighting
                          semantic clusters<sup><a data-type="noteref" id="idm139656386492688-marker"
                              href="ch01.xhtml#idm139656386492688">3</a></sup></h6>
                      </div>
                    </figure>

                    <p>A <a data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="visualization algorithms" data-tertiary="" id="idm139656386491120" /><a
                        data-type="indexterm" data-primary="visualization algorithms" data-startref="visalgchap1"
                        id="idm139656386489872" />related task is <em>dimensionality reduction</em>, in which <a
                        data-type="indexterm" data-primary="dimensionality reduction" id="idm139656386488368" /><a
                        data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="dimensionality reduction algorithm" id="idm139656386487600" />the goal is to
                      simplify the data without losing too much information. One way to do this is to merge several
                      correlated features into one. For example, a car’s mileage may be very correlated with its age, so
                      the dimensionality reduction algorithm will merge them into one feature that represents the car’s
                      wear and tear. This is <a data-type="indexterm" data-primary="feature extraction"
                        id="idm139656386486160" />called <em>feature extraction</em>.</p>
                    <div data-type="tip">
                      <h6>Tip</h6>
                      <p>It is often a good idea to try to reduce the dimension of your training data using a
                        dimensionality reduction algorithm before you feed it to another Machine Learning algorithm
                        (such as a supervised learning algorithm). It will run much faster, the data will take up less
                        disk and memory space, and in some cases it may also perform better.</p>
                    </div>

                    <p>Yet another important <a data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="anomaly detection" id="idm139656386482912" /><a data-type="indexterm"
                        data-primary="anomaly detection" id="idm139656386481904" />unsupervised task is <em>anomaly
                        detection</em>—for example, detecting unusual credit card transactions to prevent fraud,
                      catching manufacturing defects, or automatically removing outliers from a dataset before feeding
                      it to another learning algorithm. The system is shown mostly normal instances during training, so
                      it learns to recognize them and when it sees a new instance it can tell whether it looks like a
                      normal one or whether it is likely an anomaly (see <a data-type="xref"
                        href="#anomaly_detection_diagram">Figure 1-10</a>). A very similar task <a data-type="indexterm"
                        data-primary="unsupervised learning" data-secondary="novelty detection"
                        id="idm139656386479456" /><a data-type="indexterm" data-primary="novelty detection"
                        id="idm139656386478480" />is <em>novelty detection</em>: the difference is that novelty
                      detection algorithms expect to see only normal data during training, while anomaly detection
                      algorithms are usually more tolerant, they can often perform well even with a small percentage of
                      outliers in the training set.</p>

                    <figure class="smallerseventy">
                      <div id="anomaly_detection_diagram" class="figure">
                        <img src="mlst_0110.png" alt="mlst 0110" width="1938" height="937" />
                        <h6><span class="label">Figure 1-10. </span>Anomaly detection</h6>
                      </div>
                    </figure>

                    <p>Finally, another common <a data-type="indexterm" data-primary="association rule learning"
                        id="idm139656386474416" /><a data-type="indexterm" data-primary="unsupervised learning"
                        data-secondary="association rule learning" id="idm139656386473648" />unsupervised task is
                      <em>association rule learning</em>, in which the goal is to dig into large amounts of data and
                      discover interesting relations between attributes. For example, suppose you own a supermarket.
                      Running an association rule on your sales logs may reveal that people who purchase barbecue sauce
                      and potato chips also tend to buy steak. Thus, you may want to place these items close to each <a
                        data-type="indexterm" data-primary="unsupervised learning" data-startref="ul1"
                        id="idm139656386543296" />other.</p>
                  </div>
                </section>













                <section data-type="sect3" data-pdf-bookmark="Semisupervised learning">
                  <div class="sect3" id="idm139656386354784">
                    <h3>Semisupervised learning</h3>

                    <p>Some <a data-type="indexterm" data-primary="semisupervised learning"
                        id="idm139656386540848" />algorithms can deal with partially labeled training data, usually a
                      lot of unlabeled data and a little bit of labeled data. This is called <em>semisupervised
                        learning</em> (<a data-type="xref" href="#semi_supervised_learning_diagram">Figure 1-11</a>).
                    </p>

                    <p>Some <a data-type="indexterm" data-primary="photo-hosting services"
                        id="idm139656386538096" />photo-hosting services, such as <a data-type="indexterm"
                        data-primary="Google Photos" id="idm139656386537232" />Google Photos, are good examples of this.
                      Once you upload all your family photos to the service, it automatically recognizes that the same
                      person A shows up in photos 1, 5, and 11, while another person B shows up in photos 2, 5, and 7.
                      This is the unsupervised part of the algorithm (clustering). Now all the system needs is for you
                      to tell it who these people are. Just one label per person,<sup><a data-type="noteref"
                          id="idm139656386536016-marker" href="ch01.xhtml#idm139656386536016">4</a></sup> and it is able
                      to name everyone in every photo, which is useful for searching photos.</p>

                    <figure class="smallerseventy">
                      <div id="semi_supervised_learning_diagram" class="figure">
                        <img src="mlst_0111.png" alt="mlst 0111" width="1938" height="937" />
                        <h6><span class="label">Figure 1-11. </span>Semisupervised learning</h6>
                      </div>
                    </figure>

                    <p>Most semisupervised learning algorithms are combinations of unsupervised and supervised
                      algorithms. For example, <em>deep belief networks</em> <a data-type="indexterm"
                        data-primary="deep belief networks (DBNs)" id="idm139656386531856" />(DBNs) are based on
                      unsupervised components called <em>restricted Boltzmann machines</em> (RBMs) <a
                        data-type="indexterm" data-primary="restricted Boltzmann machines  (RBMs)"
                        id="idm139656386530592" />stacked on top of one another. RBMs are trained sequentially in an
                      unsupervised manner, and then the whole system is fine-tuned using supervised learning techniques.
                    </p>
                  </div>
                </section>













                <section data-type="sect3" data-pdf-bookmark="Reinforcement Learning">
                  <div class="sect3" id="idm139656386529392">
                    <h3>Reinforcement Learning</h3>

                    <p><em>Reinforcement Learning</em> is a <a data-type="indexterm"
                        data-primary="Reinforcement Learning (RL)" id="rl1" />very different beast. The learning system,
                      called an <em>agent</em> in this context, can observe the environment, select and perform actions,
                      and get <em>rewards</em> in return (or <em>penalties</em> in the form of negative rewards, as in
                      <a data-type="xref" href="#reinforcement_learning_diagram">Figure 1-12</a>). It must then learn by
                      itself what is the best strategy, called a <em>policy</em>, to get the most reward over time. A
                      policy defines what action the agent should choose when it is in a given situation.</p>

                    <figure class="smallerseventy">
                      <div id="reinforcement_learning_diagram" class="figure">
                        <img src="mlst_0112.png" alt="mlst 0112" width="2156" height="1542" />
                        <h6><span class="label">Figure 1-12. </span>Reinforcement Learning</h6>
                      </div>
                    </figure>

                    <p>For example, many robots implement Reinforcement Learning algorithms to learn how to walk.
                      DeepMind’s AlphaGo <a data-type="indexterm" data-primary="DeepMind" id="idm139656386521040" /><a
                        data-type="indexterm" data-primary="AlphaGo" id="idm139656386520336" />program is also a good
                      example of Reinforcement Learning: it made the headlines in May 2017 when it beat the world
                      champion Ke Jie at the game of <em>Go</em>. It learned its winning policy by analyzing millions of
                      games, and then playing many games against itself. Note that learning was turned off during the
                      games against the champion; AlphaGo was just applying the policy it had <a data-type="indexterm"
                        data-primary="Reinforcement Learning (RL)" data-startref="rl1" id="idm139656386518752" /><a
                        data-type="indexterm" data-primary="Machine Learning basics" data-secondary="types of systems"
                        data-tertiary="supervised/unsupervised learning" data-startref="mlb1tossul"
                        id="idm139656386517760" />learned.</p>
                  </div>
                </section>



              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Batch and Online Learning">
              <div class="sect2" id="idm139656386515872">
                <h2>Batch and Online Learning</h2>

                <p>Another <a data-type="indexterm" data-primary="Machine Learning basics"
                    data-secondary="types of systems" data-tertiary="batch and online learning"
                    id="mlb1tosbaol" />criterion used to classify Machine Learning systems is whether or not the system
                  can learn incrementally from a stream of incoming data.</p>










                <section data-type="sect3" data-pdf-bookmark="Batch learning">
                  <div class="sect3" id="idm139656386512592">
                    <h3>Batch learning</h3>

                    <p>In <a data-type="indexterm" data-primary="batch learning" id="bl1" /><em>batch learning</em>, the
                      system is incapable of learning incrementally: it must be trained using all the available data.
                      This will generally take a lot of time and computing resources, so it is typically done offline.
                      First the system is trained, and then it is launched into production and runs without learning
                      anymore; it just applies what it has learned. This is <a data-type="indexterm"
                        data-primary="offline learning" id="idm139656386509296" />called <em>offline learning</em>.</p>

                    <p>If you want a batch learning system to know about new data (such as a new type of spam), you need
                      to train a new version of the system from scratch on the full dataset (not just the new data, but
                      also the old data), then stop the old system and replace it with the new one.</p>

                    <p>Fortunately, the whole process of training, evaluating, and launching a Machine Learning system
                      can be automated fairly easily (as shown in <a data-type="xref"
                        href="#adapting_to_change_diagram">Figure 1-3</a>), so even a batch learning system can adapt to
                      change. Simply update the data and train a new version of the system from scratch as often as
                      needed.</p>

                    <p>This solution is simple and often works fine, but training using the full set of data can take
                      many hours, so you would typically train a new system only every 24 hours or even just weekly. If
                      your system needs to adapt to rapidly changing data (e.g., to predict stock prices), then you need
                      a more reactive solution.</p>

                    <p>Also, training on the full set of data requires a lot of computing resources (CPU, memory space,
                      disk space, disk I/O, network I/O, etc.). If you have a lot of data and you automate your system
                      to train from scratch every day, it will end up costing you a lot of money. If the amount of data
                      is huge, it may even be impossible to use a batch learning algorithm.</p>

                    <p>Finally, if your system needs to be able to learn autonomously and it has limited resources
                      (e.g., a smartphone application or a rover on Mars), then carrying around large amounts of
                      training data and taking up a lot of resources to train for hours every day is a showstopper.</p>

                    <p>Fortunately, a better option in all these cases is to use algorithms that are capable of learning
                      <a data-type="indexterm" data-primary="batch learning" data-startref="bl1"
                        id="idm139656386502976" />incrementally.</p>
                  </div>
                </section>













                <section data-type="sect3" data-pdf-bookmark="Online learning">
                  <div class="sect3" id="idm139656386501744">
                    <h3>Online learning</h3>

                    <p>In <em>online learning</em>, <a data-type="indexterm" data-primary="online learning"
                        id="ol1" />you train the system incrementally by feeding it data instances sequentially, either
                      individually or by small groups <a data-type="indexterm" data-primary="mini-batches"
                        id="idm139656386993680" />called <em>mini-batches</em>. Each learning step is fast and cheap, so
                      the system can learn about new data on the fly, as it arrives (see <a data-type="xref"
                        href="#online_learning_diagram">Figure 1-13</a>).</p>

                    <figure class="smallereighty">
                      <div id="online_learning_diagram" class="figure">
                        <img src="mlst_0113.png" alt="mlst 0113" width="2387" height="1174" />
                        <h6><span class="label">Figure 1-13. </span>Online learning</h6>
                      </div>
                    </figure>

                    <p>Online learning is great for systems that receive data as a continuous flow (e.g., stock prices)
                      and need to adapt to change rapidly or autonomously. It is also a good option if you have limited
                      computing resources: once an online learning system has learned about new data instances, it does
                      not need them anymore, so you can discard them (unless you want to be able to roll back to a
                      previous state and “replay” the data). This can save a huge amount of space.</p>

                    <p>Online learning algorithms can also be used to train systems on huge datasets that cannot fit in
                      one machine’s main memory (this is called <em>out-of-core</em> <a data-type="indexterm"
                        data-primary="out-of-core learning" id="idm139656386987504" />learning). The algorithm loads
                      part of the data, runs a training step on that data, and repeats the process until it has run on
                      all of the data (see <a data-type="xref" href="#ol_for_huge_datasets_diagram">Figure 1-14</a>).
                    </p>
                    <div data-type="warning" epub:type="warning">
                      <h6>Warning</h6>
                      <p>Out-of-core learning is usually done offline (i.e., not on the live system), so <em>online
                          learning</em> can be a confusing name. Think of it <a data-type="indexterm"
                          data-primary="incremental learning" id="idm139656386984192" />as <em>incremental
                          learning</em>.</p>
                    </div>

                    <figure class="smallereighty">
                      <div id="ol_for_huge_datasets_diagram" class="figure">
                        <img src="mlst_0114.png" alt="mlst 0114" width="2168" height="1196" />
                        <h6><span class="label">Figure 1-14. </span>Using online learning to handle huge datasets</h6>
                      </div>
                    </figure>

                    <p>One important parameter of online learning systems is how fast they should adapt to changing
                      data: this is called <a data-type="indexterm" data-primary="learning rate"
                        id="idm139656386979936" />the <em>learning rate</em>. If you set a high learning rate, then your
                      system will rapidly adapt to new data, but it will also tend to quickly forget the old data (you
                      don’t want a spam filter to flag only the latest kinds of spam it was shown). Conversely, if you
                      set a low learning rate, the system will have more inertia; that is, it will learn more slowly,
                      but it will also be less sensitive to noise in the new data or to sequences of nonrepresentative
                      data points (outliers).</p>

                    <p>A big challenge with online learning is that if bad data is fed to the system, the system’s
                      performance will gradually decline. If we are talking about a live system, your clients will
                      notice. For example, bad data could come from a malfunctioning sensor on a robot, or from someone
                      spamming a search engine to try to rank high in search results. To reduce this risk, you need to
                      monitor your system closely and promptly switch learning off (and possibly revert to a previously
                      working state) if you detect a drop in performance. You may also want to monitor the input data
                      and react to abnormal <a data-type="indexterm" data-primary="online learning" data-startref="ol1"
                        id="idm139656386977184" /><a data-type="indexterm" data-primary="Machine Learning basics"
                        data-secondary="types of systems" data-tertiary="batch and online learning"
                        data-startref="mlb1tosbaol" id="idm139656386976208" />data (e.g., using an anomaly detection
                      algorithm).</p>
                  </div>
                </section>



              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Instance-Based Versus Model-Based Learning">
              <div class="sect2" id="idm139656386974256">
                <h2>Instance-Based Versus Model-Based Learning</h2>

                <p>One <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="types of systems"
                    data-tertiary="instance-based versus model-based learning" id="mln1tosibvmbl" />more way to
                  categorize Machine Learning systems is by how they <em>generalize</em>. Most Machine Learning tasks
                  are about making predictions. This means that given a number of training examples, the system needs to
                  be able to generalize to examples it has never seen before. Having a good performance measure on the
                  training data is good, but insufficient; the true goal is to perform well on new instances.</p>

                <p>There are two main approaches to generalization: instance-based learning and model-based learning.
                </p>










                <section data-type="sect3" data-pdf-bookmark="Instance-based learning">
                  <div class="sect3" id="idm139656386969520">
                    <h3>Instance-based learning</h3>

                    <p>Possibly <a data-type="indexterm" data-primary="instance-based learning"
                        id="idm139656386967952" />the most trivial form of learning is simply to learn by heart. If you
                      were to create a spam filter this way, it would just flag all emails that are identical to emails
                      that have already been flagged by users—not the worst solution, but certainly not the best.</p>

                    <p>Instead of just flagging emails that are identical to known spam emails, your spam filter could
                      be programmed to also flag emails that are very similar to known spam emails. This requires <a
                        data-type="indexterm" data-primary="measure of similarity" id="idm139656386966224" />a
                      <em>measure of similarity</em> between two emails. A (very basic) similarity measure between two
                      emails could be to count the number of words they have in common. The system would flag an email
                      as spam if it has many words in common with a known spam email.</p>

                    <p>This is called <em>instance-based learning</em>: the system learns the examples by heart, then
                      generalizes to new cases by comparing them to the learned examples (or a subset of them), using a
                      similarity measure. For example, in <a data-type="xref"
                        href="#instance_based_learning_diagram">Figure 1-15</a> the new instance would be classified as
                      a triangle because the majority of the most similar instances belong to that class.</p>

                    <figure class="smallerseventy">
                      <div id="instance_based_learning_diagram" class="figure">
                        <img src="mlst_0115.png" alt="mlst 0115" width="1938" height="937" />
                        <h6><span class="label">Figure 1-15. </span>Instance-based learning</h6>
                      </div>
                    </figure>
                  </div>
                </section>













                <section data-type="sect3" data-pdf-bookmark="Model-based learning">
                  <div class="sect3" id="model_based_learning">
                    <h3>Model-based learning</h3>

                    <p>Another <a data-type="indexterm" data-primary="model-based learning" id="mbl1" />way to
                      generalize from a set of examples is to build a model of these examples, then use that model to
                      make <em>predictions</em>. This is called <em>model-based learning</em> (<a data-type="xref"
                        href="#model_based_learning_diagram">Figure 1-16</a>).</p>

                    <figure>
                      <div id="model_based_learning_diagram" class="figure">
                        <img src="mlst_0116.png" alt="mlst 0116" width="1938" height="980" />
                        <h6><span class="label">Figure 1-16. </span>Model-based learning</h6>
                      </div>
                    </figure>

                    <p>For example, <a data-type="indexterm" data-primary="Machine Learning basics"
                        data-secondary="workflow example" id="mln1we" />suppose you want to know if money makes people
                      happy, so you download the <em>Better Life Index</em> data from the <a
                        href="https://homl.info/4">OECD’s website</a> as well as stats about GDP per capita from the <a
                        href="https://homl.info/5">IMF’s website</a>. Then you join the tables and sort by GDP per
                      capita. <a data-type="xref" href="#life_satisfaction_table_excerpt">Table 1-1</a> shows an excerpt
                      of what you get.</p>
                    <table id="life_satisfaction_table_excerpt">
                      <caption><span class="label">Table 1-1. </span>Does money make people happier?</caption>
                      <thead>
                        <tr>
                          <th>Country</th>
                          <th>GDP per capita (USD)</th>
                          <th>Life satisfaction</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>
                            <p>Hungary</p>
                          </td>
                          <td>
                            <p>12,240</p>
                          </td>
                          <td>
                            <p>4.9</p>
                          </td>
                        </tr>
                        <tr>
                          <td>
                            <p>Korea</p>
                          </td>
                          <td>
                            <p>27,195</p>
                          </td>
                          <td>
                            <p>5.8</p>
                          </td>
                        </tr>
                        <tr>
                          <td>
                            <p>France</p>
                          </td>
                          <td>
                            <p>37,675</p>
                          </td>
                          <td>
                            <p>6.5</p>
                          </td>
                        </tr>
                        <tr>
                          <td>
                            <p>Australia</p>
                          </td>
                          <td>
                            <p>50,962</p>
                          </td>
                          <td>
                            <p>7.3</p>
                          </td>
                        </tr>
                        <tr>
                          <td>
                            <p>United States</p>
                          </td>
                          <td>
                            <p>55,805</p>
                          </td>
                          <td>
                            <p>7.2</p>
                          </td>
                        </tr>
                      </tbody>
                    </table>

                    <p>Let’s plot the data for a few random countries (<a data-type="xref"
                        href="#money_happy_scatterplot">Figure 1-17</a>).</p>

                    <figure class="smallersixtyfive">
                      <div id="money_happy_scatterplot" class="figure">
                        <img src="mlst_0117.png" alt="mlst 0117" width="1408" height="801" />
                        <h6><span class="label">Figure 1-17. </span>Do you see a trend here?</h6>
                      </div>
                    </figure>

                    <p>There does seem to be a trend here! Although the data is <em>noisy</em> (i.e., partly random), it
                      looks like life satisfaction goes up more or less linearly as the country’s GDP per capita
                      increases. So you decide to model life satisfaction as a linear function of GDP per capita. This
                      step is called <em>model selection</em>: <a data-type="indexterm" data-primary="model selection"
                        id="idm139656386461040" />you selected a <em>linear model</em> of life satisfaction with just
                      one attribute, GDP per capita (<a data-type="xref" href="#a_simple_linear_model">Equation
                        1-1</a>).</p>
                    <div data-type="equation" id="a_simple_linear_model">
                      <h5><span class="label">Equation 1-1. </span>A simple linear model</h5>
                      <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                        <mrow>
                          <mtext>life_satisfaction</mtext>
                          <mo>=</mo>
                          <msub>
                            <mi>θ</mi>
                            <mn>0</mn>
                          </msub>
                          <mo>+</mo>
                          <msub>
                            <mi>θ</mi>
                            <mn>1</mn>
                          </msub>
                          <mo>×</mo>
                          <mtext>GDP_per_capita</mtext>
                        </mrow>
                      </math>
                    </div>

                    <p>This model has <a data-type="indexterm" data-primary="model parameters" data-secondary="defining"
                        id="idm139656386450960" />two <em>model parameters</em>, <em>θ</em><sub>0</sub> and
                      <em>θ</em><sub>1</sub>.<sup><a data-type="noteref" id="idm139656386447936-marker"
                          href="ch01.xhtml#idm139656386447936">5</a></sup> By tweaking these parameters, you can make
                      your model represent any linear function, as shown in <a data-type="xref"
                        href="#tweaking_model_params_plot">Figure 1-18</a>.</p>

                    <figure class="smallersixtyfive">
                      <div id="tweaking_model_params_plot" class="figure">
                        <img src="mlst_0118.png" alt="mlst 0118" width="1408" height="801" />
                        <h6><span class="label">Figure 1-18. </span>A few possible linear models</h6>
                      </div>
                    </figure>

                    <p>Before you can use your model, you need to define the parameter values <em>θ</em><sub>0</sub> and
                      <em>θ</em><sub>1</sub>. How can you know which values will make your model perform best? To answer
                      this question, you need to specify a performance measure. You can either define a <em>utility
                        function</em> (or <em>fitness function</em>) <a data-type="indexterm"
                        data-primary="fitness function" id="idm139656386440736" />that <a data-type="indexterm"
                        data-primary="utility function" id="idm139656386439872" />measures how <em>good</em> your model
                      is, or you can define a <em>cost function</em> <a data-type="indexterm"
                        data-primary="cost function" id="idm139656386438208" />that measures how <em>bad</em> it is. For
                      linear regression problems, people typically use a cost function that measures the distance
                      between the linear model’s predictions and the training examples; the objective is to minimize
                      this distance.</p>

                    <p>This is where the <a data-type="indexterm" data-primary="Linear Regression"
                        id="idm139656386436352" />Linear Regression algorithm comes in: you feed it your training
                      examples and it finds the parameters that make the linear model fit best to your data. This is
                      called <em>training</em> <a data-type="indexterm" data-primary="training models"
                        id="idm139656386434928" />the model. In our case the algorithm finds that the optimal parameter
                      values are <em>θ</em><sub>0</sub> = 4.85 and <em>θ</em><sub>1</sub> = 4.91 × 10<sup>–5</sup>.</p>

                    <p>Now the model fits the training data as closely as possible (for a linear model), as you can see
                      in <a data-type="xref" href="#best_fit_model_plot">Figure 1-19</a>.</p>

                    <figure class="smallersixtyfive">
                      <div id="best_fit_model_plot" class="figure">
                        <img src="mlst_0119.png" alt="mlst 0119" width="1408" height="801" />
                        <h6><span class="label">Figure 1-19. </span>The linear model that fits the training data best
                        </h6>
                      </div>
                    </figure>

                    <p>You are finally ready to run the model to make predictions. For example, say you want to know how
                      happy Cypriots are, and the OECD data does not have the answer. Fortunately, you can use your
                      model to make a good prediction: you look up Cyprus’s GDP per capita, find $22,587, and then apply
                      your model and find that life satisfaction is likely to be somewhere around 4.85 + 22,587 × 4.91 ×
                      10<sup>-5</sup> = 5.96.</p>

                    <p>To whet your appetite, <a data-type="xref" href="#example_scikit_code">Example 1-1</a> shows the
                      Python code that loads the data, prepares it,<sup><a data-type="noteref"
                          id="idm139656386426080-marker" href="ch01.xhtml#idm139656386426080">6</a></sup> creates a
                      scatterplot for visualization, and then trains a linear model and makes a <a data-type="indexterm"
                        data-primary="Scikit-Learn" data-secondary="sklearn.linear_model.LinearRegression"
                        id="skllmlrch1" />prediction.<sup><a data-type="noteref" id="idm139656386423280-marker"
                          href="ch01.xhtml#idm139656386423280">7</a></sup></p>
                    <div id="example_scikit_code" data-type="example">
                      <h5><span class="label">Example 1-1. </span>Training and running a linear model using Scikit-Learn
                      </h5>

                      <pre data-type="programlisting"
                        data-code-language="python"><code class="kn">import</code> <code class="nn">matplotlib.pyplot</code> <code class="kn">as</code> <code class="nn">plt</code>
<code class="kn">import</code> <code class="nn">numpy</code> <code class="kn">as</code> <code class="nn">np</code>
<code class="kn">import</code> <code class="nn">pandas</code> <code class="kn">as</code> <code class="nn">pd</code>
<code class="kn">import</code> <code class="nn">sklearn.linear_model</code>

<code class="c1"># Load the data</code>
<code class="n">oecd_bli</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">read_csv</code><code class="p">(</code><code class="s2">"oecd_bli_2015.csv"</code><code class="p">,</code> <code class="n">thousands</code><code class="o">=</code><code class="s1">','</code><code class="p">)</code>
<code class="n">gdp_per_capita</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">read_csv</code><code class="p">(</code><code class="s2">"gdp_per_capita.csv"</code><code class="p">,</code><code class="n">thousands</code><code class="o">=</code><code class="s1">','</code><code class="p">,</code><code class="n">delimiter</code><code class="o">=</code><code class="s1">'</code><code class="se">\t</code><code class="s1">'</code><code class="p">,</code>
                             <code class="n">encoding</code><code class="o">=</code><code class="s1">'latin1'</code><code class="p">,</code> <code class="n">na_values</code><code class="o">=</code><code class="s2">"n/a"</code><code class="p">)</code>

<code class="c1"># Prepare the data</code>
<code class="n">country_stats</code> <code class="o">=</code> <code class="n">prepare_country_stats</code><code class="p">(</code><code class="n">oecd_bli</code><code class="p">,</code> <code class="n">gdp_per_capita</code><code class="p">)</code>
<code class="n">X</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">c_</code><code class="p">[</code><code class="n">country_stats</code><code class="p">[</code><code class="s2">"GDP per capita"</code><code class="p">]]</code>
<code class="n">y</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">c_</code><code class="p">[</code><code class="n">country_stats</code><code class="p">[</code><code class="s2">"Life satisfaction"</code><code class="p">]]</code>

<code class="c1"># Visualize the data</code>
<code class="n">country_stats</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s1">'scatter'</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"GDP per capita"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s1">'Life satisfaction'</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code>

<code class="c1"># Select a linear model</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">sklearn</code><code class="o">.</code><code class="n">linear_model</code><code class="o">.</code><code class="n">LinearRegression</code><code class="p">()</code>

<code class="c1"># Train the model</code>
<code class="n">model</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">)</code>

<code class="c1"># Make a prediction for Cyprus</code>
<code class="n">X_new</code> <code class="o">=</code> <code class="p">[[</code><code class="mi">22587</code><code class="p">]]</code>  <code class="c1"># Cyprus' GDP per capita</code>
<code class="k">print</code><code class="p">(</code><code class="n">model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_new</code><code class="p">))</code> <code class="c1"># outputs [[ 5.96242338]]</code></pre>
                    </div>
                    <div data-type="note" epub:type="note">
                      <h6>Note</h6>
                      <p>If you had used <a data-type="indexterm" data-primary="instance-based learning"
                          id="idm139656386415824" />an instance-based learning algorithm instead, you would have found
                        that Slovenia has the closest GDP per capita to that of Cyprus ($20,732), and since the OECD
                        data tells us that Slovenians’ life satisfaction is 5.7, you would have predicted a life
                        satisfaction of 5.7 for Cyprus. If you zoom out a bit and look at the two next closest
                        countries, you will find Portugal and Spain with life satisfactions of 5.1 and 6.5,
                        respectively. Averaging these three values, you get 5.77, which is pretty close to your
                        model-based prediction. This simple algorithm is called <em>k-Nearest Neighbors</em> <a
                          data-type="indexterm" data-primary="k-Nearest Neighbors" id="idm139656389856384" />regression
                        (in this example, <em>k</em> = 3).</p>

                      <p>Replacing the Linear Regression model with k-Nearest Neighbors regression in the previous code
                        is as simple as replacing these two lines:</p>

                      <pre data-type="programlisting"
                        data-code-language="python"><code class="kn">import</code> <code class="nn">sklearn.linear_model</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">sklearn</code><code class="o">.</code><code class="n">linear_model</code><code class="o">.</code><code class="n">LinearRegression</code><code class="p">()</code></pre>

                      <p>with these two<a data-type="indexterm" data-primary="Scikit-Learn"
                          data-secondary="sklearn.linear_model.LinearRegression" data-startref="skllmlrch1"
                          id="idm139656389846720" /><a data-type="indexterm" data-primary="Scikit-Learn"
                          data-secondary="sklearn.neighbors.KNeighborsRegressor" id="idm139656389845632" />:</p>

                      <pre data-type="programlisting"
                        data-code-language="python"><code class="kn">import</code> <code class="nn">sklearn.neighbors</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">sklearn</code><code class="o">.</code><code class="n">neighbors</code><code class="o">.</code><code class="n">KNeighborsRegressor</code><code class="p">(</code><code class="n">n_neighbors</code><code class="o">=</code><code class="mi">3</code><code class="p">)</code></pre>
                    </div>

                    <p>If <a data-type="indexterm" data-primary="Scikit-Learn"
                        data-secondary="sklearn.neighbors.KNeighborsRegressor" id="idm139656389828464" />all went well,
                      your model will make good predictions. If not, you may need to use more attributes (employment
                      rate, health, air pollution, etc.), get more or better quality training data, or perhaps select a
                      more powerful model <a data-type="indexterm" data-primary="Machine Learning basics"
                        data-secondary="workflow example" data-startref="mln1we" id="idm139656389827248" />(e.g., a
                      Polynomial Regression model).</p>

                    <p>In summary:</p>

                    <ul>
                      <li>
                        <p>You studied the data.</p>
                      </li>
                      <li>
                        <p>You selected a model.</p>
                      </li>
                      <li>
                        <p>You trained it on the training data (i.e., the learning algorithm searched for the model
                          parameter values that minimize a cost function).</p>
                      </li>
                      <li>
                        <p>Finally, you applied the model to make predictions on new cases (this is called
                          <em>inference</em>), <a data-type="indexterm" data-primary="inference"
                            id="idm139656389821232" />hoping that this model will generalize well.</p>
                      </li>
                    </ul>

                    <p>This is what a typical Machine Learning project looks like. In <a data-type="xref"
                        href="ch02.xhtml#project_chapter">Chapter 2</a> you will experience this first-hand by going
                      through an end-to-end project.</p>

                    <p>We have covered a lot of ground so far: you now know what Machine Learning is really about, why
                      it is useful, what some of the most common categories of ML systems are, and what a typical
                      project workflow looks like. Now let’s look at what can go wrong in learning and prevent you from
                      making accurate <a data-type="indexterm" data-primary="Machine Learning basics"
                        data-secondary="types of systems" data-startref="mlb1tos" id="idm139656389732928" /><a
                        data-type="indexterm" data-primary="model-based learning" data-startref="mbl1"
                        id="idm139656389731680" /><a data-type="indexterm" data-primary="Machine Learning basics"
                        data-secondary="types of systems" data-tertiary="instance-based versus model-based learning"
                        data-startref="mln1tosibvmbl" id="idm139656389730736" />predictions.</p>
                  </div>
                </section>



              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Main Challenges of Machine Learning">
          <div class="sect1" id="idm139656386959504">
            <h1>Main Challenges of Machine Learning</h1>

            <p>In <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="challenges"
                id="mlb1c" />short, since your main task is to select a learning algorithm and train it on some data,
              the two things that can go wrong are “bad algorithm” and “bad data.” Let’s start with examples of bad
              data.</p>








            <section data-type="sect2" data-pdf-bookmark="Insufficient Quantity of Training Data">
              <div class="sect2" id="idm139656389726272">
                <h2>Insufficient Quantity of Training Data</h2>

                <p>For <a data-type="indexterm" data-primary="training data" data-secondary="insufficient quantities"
                    id="td1i" />a toddler to learn what an apple is, all it takes is for you to point to an apple and
                  say “apple” (possibly repeating this procedure a few times). Now the child is able to recognize apples
                  in all sorts of colors and shapes. Genius.</p>

                <p>Machine Learning is not quite there yet; it takes a lot of data for most Machine Learning algorithms
                  to work properly. Even for very simple problems you typically need thousands of examples, and for
                  complex problems such as image or speech recognition you may need millions of examples (unless you can
                  reuse parts of an existing model).</p>
                <aside data-type="sidebar" epub:type="sidebar" class="pagebreak-before less_space">
                  <div class="sidebar" id="idm139656389722480">
                    <h5>The Unreasonable Effectiveness of Data</h5>
                    <p>In a <a href="https://homl.info/6">famous paper</a> published in 2001, Microsoft researchers
                      Michele Banko and Eric Brill showed that very different Machine Learning algorithms, including
                      fairly simple ones, performed almost identically well on a complex problem of natural language
                      disambiguation<sup><a data-type="noteref" id="idm139656389719728-marker"
                          href="ch01.xhtml#idm139656389719728">8</a></sup> once they were given enough data (as you can
                      see in <a data-type="xref" href="#banko_brill_2001_plot">Figure 1-20</a>).</p>

                    <figure class="smallersixty">
                      <div id="banko_brill_2001_plot" class="figure">
                        <img src="mlst_0120.png" alt="mlst 0120" width="1440" height="1378" />
                        <h6><span class="label">Figure 1-20. </span>The importance of data versus algorithms<sup><a
                              data-type="noteref" id="idm139656389716016-marker"
                              href="ch01.xhtml#idm139656389716016">9</a></sup></h6>
                      </div>
                    </figure>

                    <p>As the authors put it: “these results suggest that we may want to reconsider the trade-off
                      between spending time and money on algorithm development versus spending it on corpus
                      development.”</p>

                    <p>The idea that data matters more than algorithms for complex problems was further popularized by
                      Peter Norvig et al. in a paper titled <a href="https://homl.info/7">“The Unreasonable
                        Effectiveness of Data”</a> published in 2009.<sup><a data-type="noteref"
                          id="idm139656389713296-marker" href="ch01.xhtml#idm139656389713296">10</a></sup> It should be
                      noted, however, that small- and medium-sized datasets are still very common, and it is not always
                      easy or cheap to get extra training data, so don’t abandon algorithms just yet.</p>
                  </div>
                </aside>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Nonrepresentative Training Data">
              <div class="sect2" id="idm139656389712144">
                <h2>Nonrepresentative Training Data</h2>

                <p>In <a data-type="indexterm" data-primary="training data" data-secondary="nonrepresentative"
                    id="idm139656389710640" />order to generalize well, it is crucial that your training data be
                  representative of the new cases you want to generalize to. This is true whether you use instance-based
                  learning or model-based learning.</p>

                <p>For example, the set of countries we used earlier for training the linear model was not perfectly
                  representative; a few countries were missing. <a data-type="xref"
                    href="#representative_training_data_scatterplot">Figure 1-21</a> shows what the data looks like when
                  you add the missing countries.</p>

                <figure>
                  <div id="representative_training_data_scatterplot" class="figure">
                    <img src="mlst_0121.png" alt="mlst 0121" width="2298" height="801" />
                    <h6><span class="label">Figure 1-21. </span>A more representative training sample</h6>
                  </div>
                </figure>

                <p>If you train a linear model on this data, you get the solid line, while the old model is represented
                  by the dotted line. As you can see, not only does adding a few missing countries significantly alter
                  the model, but it makes it clear that such a simple linear model is probably never going to work well.
                  It seems that very rich countries are not happier than moderately rich countries (in fact they seem
                  unhappier), and conversely some poor countries seem happier than many rich countries.</p>

                <p>By using a nonrepresentative training set, we trained a model that is unlikely to make accurate
                  predictions, especially for very poor and very rich countries.</p>

                <p>It is crucial to use a training set that is representative of the cases you want to generalize to.
                  This is often harder than it sounds: if the sample is too small, you will <a data-type="indexterm"
                    data-primary="sampling noise" id="idm139656389703776" />have <em>sampling noise</em> (i.e.,
                  nonrepresentative data as a result of chance), but even very large samples can be nonrepresentative if
                  the sampling method is flawed. This <a data-type="indexterm" data-primary="sampling bias"
                    id="sb1" />is called <em>sampling bias</em>.</p>
                <aside data-type="sidebar" epub:type="sidebar">
                  <div class="sidebar" id="idm139656389692992">
                    <h5>A Famous Example of Sampling Bias</h5>
                    <p>Perhaps the most famous example of sampling bias happened during the US presidential election in
                      1936, which pitted Landon against Roosevelt: the <em>Literary Digest</em> conducted a very large
                      poll, sending mail to about 10 million people. It got 2.4 million answers, and predicted with high
                      confidence that Landon would get 57% of the votes. Instead, Roosevelt won with 62% of the votes.
                      The flaw was in the <em>Literary Digest</em>’s sampling method:</p>

                    <ul>
                      <li>
                        <p>First, to obtain the addresses to send the polls to, the <em>Literary Digest</em> used
                          telephone directories, lists of magazine subscribers, club membership lists, and the like. All
                          of these lists tend to favor wealthier people, who are more likely to vote Republican (hence
                          Landon).</p>
                      </li>
                      <li>
                        <p>Second, less than 25% of the people who received the poll answered. Again, this introduces a
                          sampling bias, by ruling out people who don’t care much about politics, people who don’t like
                          the <em>Literary Digest</em>, and other key groups. This is a special type of sampling bias <a
                            data-type="indexterm" data-primary="nonresponse bias" id="idm139656389687152" />called
                          <em>nonresponse bias</em>.</p>
                      </li>
                    </ul>

                    <p>Here is another example: say you want to build a system to recognize funk music videos. One way
                      to build your training set is to search “funk music” on YouTube and use the resulting videos. But
                      this assumes that YouTube’s search engine returns a set of videos that are representative of all
                      the funk music videos on YouTube. In reality, the search results are likely to be biased toward
                      popular artists (and if you live in Brazil you will get a lot of “funk carioca” videos, which
                      sound nothing like James Brown). On the other hand, how else can you get a large training set?</p>
                  </div>
                </aside>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Poor-Quality Data">
              <div class="sect2" id="idm139656389684336">
                <h2>Poor-Quality Data</h2>

                <p>Obviously, <a data-type="indexterm" data-primary="training data" data-secondary="poor quality"
                    id="td1pq" /><a data-type="indexterm" data-primary="sampling bias" data-startref="sb1"
                    id="idm139656389681728" />if your training data is full of errors, outliers, and noise (e.g., due to
                  poor-quality measurements), it will make it harder for the system to detect the underlying patterns,
                  so your system is less likely to perform well. It is often well worth the effort to spend time
                  cleaning up your training data. The truth is, most data scientists spend a significant part of their
                  time doing just that. For example:</p>

                <ul>
                  <li>
                    <p>If some instances are clearly outliers, it may help to simply discard them or try to fix the
                      errors manually.</p>
                  </li>
                  <li>
                    <p>If some instances are missing a few features (e.g., 5% of your customers did not specify their
                      age), you must decide whether you want to ignore this attribute altogether, ignore these
                      instances, fill in the missing values (e.g., with the median age), or train one model with the
                      feature and one model without it, and so <a data-type="indexterm"
                        data-primary="Machine Learning basics" data-secondary="challenges"
                        data-tertiary="training data problems" id="idm139656389677888" />on.</p>
                  </li>
                </ul>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Irrelevant Features">
              <div class="sect2" id="idm139656389676000">
                <h2>Irrelevant Features</h2>

                <p>As <a data-type="indexterm" data-primary="training data" data-secondary="irrelevant features"
                    id="idm139656389674672" />the saying goes: garbage in, garbage out. Your system will only be capable
                  of learning if the training data contains enough relevant features and not too many irrelevant ones. A
                  critical part of the success of a Machine Learning project is coming up with a good set of features to
                  train on. This process, <a data-type="indexterm" data-primary="feature engineering"
                    id="idm139656389673216" />called <em>feature engineering</em>, involves:</p>

                <ul>
                  <li>
                    <p><em>Feature selection</em>: selecting <a data-type="indexterm" data-primary="feature selection"
                        id="idm139656389670624" />the most useful features to train on among existing features.</p>
                  </li>
                  <li>
                    <p><em>Feature extraction</em>: combining existing features to produce a more useful one (as we saw
                      earlier, dimensionality reduction algorithms can help).</p>
                  </li>
                  <li>
                    <p>Creating new features by gathering new data.</p>
                  </li>
                </ul>

                <p>Now that we have looked at many examples of bad data, let’s look at a couple of examples of bad
                  algorithms.</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Overfitting the Training Data">
              <div class="sect2" id="idm139656389666496">
                <h2>Overfitting the Training Data</h2>

                <p>Say <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="challenges"
                    data-tertiary="algorithm problems" id="ml1coap" /><a data-type="indexterm"
                    data-primary="training data" data-secondary="overfitting" id="td1o" /><a data-type="indexterm"
                    data-primary="overfitting" id="o1" />you are visiting a foreign country and the taxi driver rips you
                  off. You might be tempted to say that <em>all</em> taxi drivers in that country are thieves.
                  Overgeneralizing is something that we humans do all too often, and unfortunately machines can fall
                  into the same trap if we are not careful. In Machine Learning this is called <em>overfitting</em>: it
                  means that the model performs well on the training data, but it does not generalize well.</p>

                <p><a data-type="xref" href="#overfitting_model_plot">Figure 1-22</a> shows an example of a high-degree
                  polynomial life satisfaction model that strongly overfits the training data. Even though it performs
                  much better on the training data than the simple linear model, would you really trust its predictions?
                </p>

                <figure>
                  <div id="overfitting_model_plot" class="figure">
                    <img src="mlst_0122.png" alt="mlst 0122" width="2298" height="801" />
                    <h6><span class="label">Figure 1-22. </span>Overfitting the training data</h6>
                  </div>
                </figure>

                <p>Complex models such as deep neural networks can detect subtle patterns in the data, but if the
                  training set is noisy, or if it is too small (which introduces sampling noise), then the model is
                  likely to detect patterns in the noise itself. Obviously these patterns will not generalize to new
                  instances. For example, say you feed your life satisfaction model many more attributes, including
                  uninformative ones such as the country’s name. In that case, a complex model may detect patterns like
                  the fact that all countries in the training data with a <em>w</em> in their name have a life
                  satisfaction greater than 7: New Zealand (7.3), Norway (7.4), Sweden (7.2), and Switzerland (7.5). How
                  confident are you that the W-satisfaction rule generalizes to Rwanda or Zimbabwe? Obviously this
                  pattern occurred in the training data by pure chance, but the model has no way to tell whether a
                  pattern is real or simply the result of noise in the data.</p>
                <div data-type="warning" epub:type="warning">
                  <h6>Warning</h6>
                  <p>Overfitting happens when the model is too complex relative to the amount and noisiness of the
                    training data. The possible solutions are:</p>

                  <ul>
                    <li>
                      <p>To simplify the model by selecting one with fewer parameters (e.g., a linear model rather than
                        a high-degree polynomial model), by reducing the number of attributes in the training data or by
                        constraining the model</p>
                    </li>
                    <li>
                      <p>To gather more training data</p>
                    </li>
                    <li>
                      <p>To reduce the noise in the training data (e.g., fix data errors and remove outliers)</p>
                    </li>
                  </ul>
                </div>

                <p>Constraining a model to make it simpler and reduce the risk of overfitting is <a
                    data-type="indexterm" data-primary="regularization" id="r1" />called <em>regularization</em>. For
                  example, the linear model we defined earlier has two parameters, <em>θ</em><sub>0</sub> and
                  <em>θ</em><sub>1</sub>. This gives the learning algorithm two <em>degrees of freedom</em> to <a
                    data-type="indexterm" data-primary="degrees of freedom" id="idm139656389809776" />adapt the model to
                  the training data: it can tweak both the height (<em>θ</em><sub>0</sub>) and the slope
                  (<em>θ</em><sub>1</sub>) of the line. If we forced <em>θ</em><sub>1</sub> = 0, the algorithm would
                  have only one degree of freedom and would have a much harder time fitting the data properly: all it
                  could do is move the line up or down to get as close as possible to the training instances, so it
                  would end up around the mean. A very simple model indeed! If we allow the algorithm to modify
                  <em>θ</em><sub>1</sub> but we force it to keep it small, then the learning algorithm will effectively
                  have somewhere in between one and two degrees of freedom. It will produce a simpler model than with
                  two degrees of freedom, but more complex than with just one. You want to find the right balance
                  between fitting the training data perfectly and keeping the model simple enough to ensure that it will
                  generalize well.</p>

                <p><a data-type="xref" href="#ridge_model_plot">Figure 1-23</a> shows three models: the dotted line
                  represents the original model that was trained with a few countries missing, the dashed line is our
                  second model trained with all countries, and the solid line is a linear model trained with the same
                  data as the first model but with a regularization constraint. You can see that regularization forced
                  the model to have a smaller slope, which fits a bit less the training data that the model was trained
                  on, but actually allows it to generalize better to new examples.</p>

                <figure>
                  <div id="ridge_model_plot" class="figure">
                    <img src="mlst_0123.png" alt="mlst 0123" width="2298" height="801" />
                    <h6><span class="label">Figure 1-23. </span>Regularization reduces the risk of overfitting</h6>
                  </div>
                </figure>

                <p>The amount of regularization to apply during learning can be controlled by a <em>hyperparameter</em>.
                  A <a data-type="indexterm" data-primary="hyperparameters" id="idm139656389801072" />hyperparameter is
                  a parameter of a learning algorithm (not of the model). As such, it is not affected by the learning
                  algorithm itself; it must be set prior to training and remains constant during training. If you set
                  the regularization hyperparameter to a very large value, you will get an almost flat model (a slope
                  close to zero); the learning algorithm will almost certainly not overfit the training data, but it
                  will be less likely to find a good solution. Tuning hyperparameters is an important part of building a
                  <a data-type="indexterm" data-primary="overfitting" data-startref="o1" id="idm139656389799664" /><a
                    data-type="indexterm" data-primary="training data" data-secondary="overfitting" data-startref="td1o"
                    id="idm139656389798720" /><a data-type="indexterm" data-primary="regularization" data-startref="r1"
                    id="idm139656389797504" />Machine Learning system (you will see a detailed example in the next
                  chapter).</p>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Underfitting the Training Data">
              <div class="sect2" id="idm139656389665872">
                <h2>Underfitting the Training Data</h2>

                <p>As <a data-type="indexterm" data-primary="training data" data-secondary="underfitting"
                    id="idm139656389795168" /><a data-type="indexterm" data-primary="underfitting"
                    id="idm139656389794160" />you might guess, <em>underfitting</em> is the opposite of overfitting: it
                  occurs when your model is too simple to learn the underlying structure of the data. For example, a
                  linear model of life satisfaction is prone to underfit; reality is just more complex than the model,
                  so its predictions are bound to be inaccurate, even on the training examples.</p>

                <p>The main options to fix this problem are:</p>

                <ul>
                  <li>
                    <p>Selecting a more powerful model, with more parameters</p>
                  </li>
                  <li>
                    <p>Feeding better features to the learning algorithm (feature engineering)</p>
                  </li>
                  <li>
                    <p>Reducing the constraints on the model <a data-type="indexterm"
                        data-primary="Machine Learning basics" data-secondary="challenges"
                        data-tertiary="algorithm problems" data-startref="ml1coap" id="idm139656389789232" />(e.g.,
                      reducing the regularization hyperparameter)</p>
                  </li>
                </ul>
              </div>
            </section>













            <section data-type="sect2" data-pdf-bookmark="Stepping Back">
              <div class="sect2" id="idm139656389787008">
                <h2>Stepping Back</h2>

                <p>By <a data-type="indexterm" data-primary="Machine Learning basics" data-secondary="summary"
                    id="idm139656389785712" />now you already know a lot about Machine Learning. However, we went
                  through so many concepts that you may be feeling a little lost, so let’s step back and look at the big
                  picture:</p>

                <ul>
                  <li>
                    <p>Machine Learning is about making machines get better at some task by learning from data, instead
                      of having to explicitly code rules.</p>
                  </li>
                  <li>
                    <p>There are many different types of ML systems: supervised or not, batch or online, instance-based
                      or model-based, and so on.</p>
                  </li>
                  <li>
                    <p>In a ML project you gather data in a training set, and you feed the training set to a learning
                      algorithm. If the algorithm is model-based it tunes some parameters to fit the model to the
                      training set (i.e., to make good predictions on the training set itself), and then hopefully it
                      will be able to make good predictions on new cases as well. If the algorithm is instance-based, it
                      just learns the examples by heart and generalizes to new instances by comparing them to the
                      learned instances using a similarity measure.</p>
                  </li>
                  <li>
                    <p>The system will not perform well if your training set is too small, or if the data is not
                      representative, noisy, or polluted with irrelevant features (garbage in, garbage out). Lastly,
                      your model needs to be neither too simple (in which case it will underfit) nor too complex (in
                      which case it will overfit).</p>
                  </li>
                </ul>

                <p>There’s just one last important topic to cover: once you have trained a model, you don’t want to just
                  “hope” it generalizes to new cases. You want to evaluate it, and fine-tune it if necessary. <a
                    data-type="indexterm" data-primary="Machine Learning basics" data-secondary="challenges"
                    data-startref="mlb1c" id="idm139656389778736" />Let’s see how.</p>
              </div>
            </section>





          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Testing and Validating">
          <div class="sect1" id="idm139656389777104">
            <h1>Testing and Validating</h1>

            <p>The <a data-type="indexterm" data-primary="Machine Learning basics"
                data-secondary="testing and validating" id="mlb1tav" /><a data-type="indexterm"
                data-primary="evaluating models" id="em1" /><a data-type="indexterm"
                data-primary="testing and validating" id="tav1" />only way to know how well a model will generalize to
              new cases is to actually try it out on new cases. One way to do that is to put your model in production
              and monitor how well it performs. This works well, but if your model is horribly bad, your users will
              complain—not the best idea.</p>

            <p>A better option is to split your data into two sets: <a data-type="indexterm" data-primary="training set"
                id="idm139656389771168" />the <em>training set</em> and <a data-type="indexterm" data-primary="test set"
                id="idm139656389622656" />the <em>test set</em>. As these names imply, you train your model using the
              training set, and you test it using the test set. The error rate on new cases is called the
              <em>generalization error</em> (or <em>out-of-sample error</em>), <a data-type="indexterm"
                data-primary="generalization error" id="idm139656389620352" /><a data-type="indexterm"
                data-primary="out-of-sample error" id="idm139656389619616" />and by evaluating your model on the test
              set, you get an estimate of this error. This value tells you how well your model will perform on instances
              it has never seen before.</p>

            <p>If the training error is low (i.e., your model makes few mistakes on the training set) but the
              generalization error is high, it means that your model is overfitting the training data.</p>
            <div data-type="tip">
              <h6>Tip</h6>
              <p>It is common to use 80% of the data for training and <em>hold out</em> 20% for testing.</p>
            </div>

            <p>So evaluating a model is simple enough: just use a test set. Now suppose you are hesitating between two
              models (say a linear model and a polynomial model): how can you decide? One option is to train both and
              compare how well they generalize using the test set.</p>

            <p>Now suppose that the linear model generalizes better, but you want to apply some <a data-type="indexterm"
                data-primary="regularization" id="idm139656389615488" />regularization to avoid overfitting. The
              question is: how do you choose the value of the regularization hyperparameter? One option is to train 100
              different models using 100 different values for this hyperparameter. Suppose you find the best
              hyperparameter value that produces a model with the lowest generalization error, say just 5% error.</p>

            <p>So you launch this model into production, but unfortunately it does not perform as well as expected and
              produces 15% errors. What just happened?</p>

            <p>The problem is that you measured the generalization error multiple times on the test set, and you adapted
              the model and hyperparameters to produce the best model <em>for that particular set</em>. This means that
              the model is unlikely to perform as well on new data.</p>

            <p>A common solution to this problem is called <em>holdout validation</em>: you simply hold out part of the
              training set to evaluate several candidate models and select the best one. The new heldout set is called
              <a data-type="indexterm" data-primary="validation set" id="idm139656389611616" />the <em>validation
                set</em>. More specifically, you train multiple models with various hyperparameters on the reduced
              training set (i.e., the full training set minus the validation set), and you select the model that
              performs best on the validation set. After this holdout validation process, you train the best model on
              the full training set (including the validation set), and this gives you the final model. Lastly, you
              evaluate this final model on the test set to get an estimate of the generalization error.</p>

            <p>This solution usually works quite well. However, if the validation set is too small, then model
              evaluations will be imprecise: you may end up selecting a suboptimal model by mistake. Conversely, if the
              validation set is too large, then the remaining training set will be much smaller than the full training
              set. Why is this bad? Well, since the final model will be trained on the full training set, it is not
              ideal to compare candidate models trained on a much smaller training set. It would be like selecting the
              fastest sprinter to participate in a marathon. One way to solve this problem is to perform repeated
              <em>cross-validation</em>, using multiple validation sets. Each model is evaluated once per validation
              set, after it is trained on the rest of the data. By averaging out all the evaluations of a model, we get
              a much more accurate measure of its performance. However, there is a drawback: the training time is
              multiplied by the number of validation sets.</p>
            <aside data-type="sidebar" epub:type="sidebar">
              <div class="sidebar" id="idm139656389607936">
                <h5>No Free Lunch Theorem</h5>
                <p>A <a data-type="indexterm" data-primary="No Free Lunch theorem" id="idm139656389606608" />model <a
                    data-type="indexterm" data-primary="data" data-secondary="making assumptions about"
                    id="idm139656389605744" /><a data-type="indexterm" data-primary="data"
                    data-seealso="test data; training data" id="idm139656389604752" />is a simplified version of the
                  observations. The simplifications are meant to discard the superfluous details that are unlikely to
                  generalize to new instances. However, to decide what data to discard and what data to keep, you must
                  make <em>assumptions</em>. For example, a linear model makes the assumption that the data is
                  fundamentally linear and that the distance between the instances and the straight line is just noise,
                  which can safely be ignored.</p>

                <p>In a <a href="https://homl.info/8">famous 1996 paper</a>,<sup><a data-type="noteref"
                      id="idm139656389601456-marker" href="ch01.xhtml#idm139656389601456">11</a></sup> David Wolpert
                  demonstrated that if you make absolutely no assumption about the data, then there is no reason to
                  prefer one model over any other. This is called the <em>No Free Lunch</em> (NFL) theorem. For some
                  datasets the best model is a linear model, while for other datasets it is a neural network. There is
                  no model that is <em>a priori</em> guaranteed to work better (hence the name of the theorem). The only
                  way to know for sure which model is best is to evaluate them all. Since this is not possible, in
                  practice you make some reasonable assumptions about the data and you evaluate only a few reasonable
                  models. For example, for simple tasks you may evaluate linear models with various levels of
                  regularization, and for a complex problem you may evaluate various neural <a data-type="indexterm"
                    data-primary="Machine Learning basics" data-secondary="testing and validating"
                    data-startref="mlb1tav" id="idm139656389599152" /><a data-type="indexterm"
                    data-primary="evaluating models" data-startref="em1" id="idm139656389597904" /><a
                    data-type="indexterm" data-primary="testing and validating" data-startref="tav1"
                    id="idm139656389596960" />networks.</p>
              </div>
            </aside>
          </div>
        </section>













        <section data-type="sect1" data-pdf-bookmark="Exercises">
          <div class="sect1" id="idm139656389776480">
            <h1>Exercises</h1>

            <p>In this chapter we have covered some of the most important concepts in Machine Learning. In the next
              chapters we will dive deeper and write more code, but before we do, make sure you know how to answer the
              following questions:</p>
            <ol>
              <li>
                <p>How would you define Machine Learning?</p>
              </li>
              <li>
                <p>Can you name four types of problems where it shines?</p>
              </li>
              <li>
                <p>What is a labeled training set?</p>
              </li>
              <li>
                <p>What are the two most common supervised tasks?</p>
              </li>
              <li>
                <p>Can you name four common unsupervised tasks?</p>
              </li>
              <li>
                <p>What type of Machine Learning algorithm would you use to allow a robot to walk in various unknown
                  terrains?</p>
              </li>
              <li>
                <p>What type of algorithm would you use to segment your customers into multiple groups?</p>
              </li>
              <li>
                <p>Would you frame the problem of spam detection as a supervised learning problem or an unsupervised
                  learning problem?</p>
              </li>
              <li>
                <p>What is an online learning system?</p>
              </li>
              <li>
                <p>What is out-of-core learning?</p>
              </li>
              <li>
                <p>What type of learning algorithm relies on a similarity measure to make predictions?</p>
              </li>
              <li>
                <p>What is the difference between a model parameter and a learning algorithm’s hyperparameter?</p>
              </li>
              <li>
                <p>What do model-based learning algorithms search for? What is the most common strategy they use to
                  succeed? How do they make predictions?</p>
              </li>
              <li>
                <p>Can you name four of the main challenges in Machine Learning?</p>
              </li>
              <li>
                <p>If your model performs great on the training data but generalizes poorly to new instances, what is
                  happening? Can you name three possible solutions?</p>
              </li>
              <li>
                <p>What is a test set and why would you want to use it?</p>
              </li>
              <li>
                <p>What is the purpose of a validation set?</p>
              </li>
              <li>
                <p>What can go wrong if you tune hyperparameters using the test set?</p>
              </li>
              <li>
                <p>What is repeated cross-validation and why would you prefer it to using a single validation set?</p>
              </li>

            </ol>

            <p>Solutions to these exercises are available in Appendix A.</p>
          </div>
        </section>







        <div data-type="footnotes">
          <p data-type="footnote" id="idm139656386323968"><sup><a
                href="ch01.xhtml#idm139656386323968-marker">1</a></sup> Fun fact: this odd-sounding name is a statistics
            term introduced by Francis Galton while he was studying the fact that the children of tall people tend to be
            shorter than their parents. Since children were shorter, he called this <em>regression to the mean</em>.
            This name was then applied to the methods he used to analyze correlations between variables.</p>
          <p data-type="footnote" id="idm139656386356240"><sup><a
                href="ch01.xhtml#idm139656386356240-marker">2</a></sup> Some neural network architectures can be
            unsupervised, such as autoencoders and restricted Boltzmann machines. They can also be semisupervised, such
            as in deep belief networks and unsupervised pretraining.</p>
          <p data-type="footnote" id="idm139656386492688"><sup><a
                href="ch01.xhtml#idm139656386492688-marker">3</a></sup> Notice how animals are rather well separated
            from vehicles, how horses are close to deer but far from birds, and so on. Figure reproduced with permission
            from Socher, Ganjoo, Manning, and Ng (2013), “T-SNE visualization of the semantic word space.”</p>
          <p data-type="footnote" id="idm139656386536016"><sup><a
                href="ch01.xhtml#idm139656386536016-marker">4</a></sup> That’s when the system works perfectly. In
            practice it often creates a few clusters per person, and sometimes mixes up two people who look alike, so
            you need to provide a few labels per person and manually clean up some clusters.</p>
          <p data-type="footnote" id="idm139656386447936"><sup><a
                href="ch01.xhtml#idm139656386447936-marker">5</a></sup> By convention, the Greek letter θ (theta) is
            frequently used to represent model parameters.</p>
          <p data-type="footnote" id="idm139656386426080"><sup><a
                href="ch01.xhtml#idm139656386426080-marker">6</a></sup> The <code>prepare_country_stats()</code>
            function’s definition is not shown here (see this chapter’s Jupyter notebook if you want all the gory
            details). It’s just boring Pandas code that joins the life satisfaction data from the OECD with the GDP per
            capita data from the IMF.</p>
          <p data-type="footnote" id="idm139656386423280"><sup><a
                href="ch01.xhtml#idm139656386423280-marker">7</a></sup> It’s okay if you don’t understand all the code
            yet; we will present Scikit-Learn in the following chapters.</p>
          <p data-type="footnote" id="idm139656389719728"><sup><a
                href="ch01.xhtml#idm139656389719728-marker">8</a></sup> For example, knowing whether to write “to,”
            “two,” or “too” depending on the context.</p>
          <p data-type="footnote" id="idm139656389716016"><sup><a
                href="ch01.xhtml#idm139656389716016-marker">9</a></sup> Figure reproduced with permission from Banko and
            Brill (2001), “Learning Curves for Confusion Set Disambiguation.”</p>
          <p data-type="footnote" id="idm139656389713296"><sup><a
                href="ch01.xhtml#idm139656389713296-marker">10</a></sup> “The Unreasonable Effectiveness of Data,” Peter
            Norvig et al. (2009).</p>
          <p data-type="footnote" id="idm139656389601456"><sup><a
                href="ch01.xhtml#idm139656389601456-marker">11</a></sup> “The Lack of A Priori Distinctions Between
            Learning Algorithms,” D. Wolpert (1996).</p>
        </div>
      </div>
    </section>
  </div>



</body>

</html>